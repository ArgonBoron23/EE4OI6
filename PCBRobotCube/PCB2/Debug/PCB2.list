
PCB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800411c  0800411c  0000511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004150  08004150  00006020  2**0
                  CONTENTS
  4 .ARM          00000008  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004158  08004158  00006020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004158  08004158  00005158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08004164  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000020  08004184  00006020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08004184  000060f4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f15f  00000000  00000000  00006056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  000151b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a0  00000000  00000000  00016e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  000177b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ac4  00000000  00000000  00017f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e341  00000000  00000000  0003a9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4a84  00000000  00000000  00048d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  0010d7d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0010fe94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	20000020 	.word	0x20000020
 8000274:	00000000 	.word	0x00000000
 8000278:	08004104 	.word	0x08004104

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000024 	.word	0x20000024
 8000294:	08004104 	.word	0x08004104

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <_ZN3LEDC1Ev>:


#include "Modules/LED.h"


LED::LED()
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
{
	delayTimeMillis = 100;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2264      	movs	r2, #100	@ 0x64
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4618      	mov	r0, r3
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <_ZN3LED5blinkEv>:

void LED::blink()
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

	 BSP_LED_Toggle(LED_GREEN);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f9ed 	bl	80009b4 <BSP_LED_Toggle>
	 HAL_Delay(100);
 80005da:	2064      	movs	r0, #100	@ 0x64
 80005dc:	f000 fc22 	bl	8000e24 <HAL_Delay>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fb5c 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f82e 	bl	8000650 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f999 	bl	800092c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005fa:	2101      	movs	r1, #1
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f9f7 	bl	80009f0 <BSP_PB_Init>


  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000602:	4b11      	ldr	r3, [pc, #68]	@ (8000648 <main+0x60>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000608:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <main+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000610:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <main+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <main+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <main+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000622:	4909      	ldr	r1, [pc, #36]	@ (8000648 <main+0x60>)
 8000624:	2000      	movs	r0, #0
 8000626:	f000 fa7d 	bl	8000b24 <BSP_COM_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <main+0x56>
  {
    Error_Handler();
 800063a:	f000 f879 	bl	8000730 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  userLED.blink();
 800063e:	4803      	ldr	r0, [pc, #12]	@ (800064c <main+0x64>)
 8000640:	f7ff ffc4 	bl	80005cc <_ZN3LED5blinkEv>
 8000644:	e7fb      	b.n	800063e <main+0x56>
 8000646:	bf00      	nop
 8000648:	20000040 	.word	0x20000040
 800064c:	2000003c 	.word	0x2000003c

08000650 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09c      	sub	sp, #112	@ 0x70
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2250      	movs	r2, #80	@ 0x50
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f003 fd23 	bl	80040aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <_Z18SystemClock_Configv+0xd8>)
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <_Z18SystemClock_Configv+0xd8>)
 800067c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000680:	6113      	str	r3, [r2, #16]
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <_Z18SystemClock_Configv+0xd8>)
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068e:	bf00      	nop
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <_Z18SystemClock_Configv+0xd8>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	2b08      	cmp	r3, #8
 800069a:	bf14      	ite	ne
 800069c:	2301      	movne	r3, #1
 800069e:	2300      	moveq	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d1f4      	bne.n	8000690 <_Z18SystemClock_Configv+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b6:	2300      	movs	r3, #0
 80006b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff70 	bl	80015a4 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80006d4:	f000 f82c 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	231f      	movs	r3, #31
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2103      	movs	r1, #3
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fb8c 	bl	8001e14 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 800070c:	f000 f810 	bl	8000730 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <_Z18SystemClock_Configv+0xdc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <_Z18SystemClock_Configv+0xdc>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	3770      	adds	r7, #112	@ 0x70
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	44020800 	.word	0x44020800
 800072c:	40022000 	.word	0x40022000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <Error_Handler+0x8>

0800073c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d107      	bne.n	800075c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000752:	4293      	cmp	r3, r2
 8000754:	d102      	bne.n	800075c <_Z41__static_initialization_and_destruction_0ii+0x20>
LED userLED;
 8000756:	4803      	ldr	r0, [pc, #12]	@ (8000764 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000758:	f7ff ff2a 	bl	80005b0 <_ZN3LEDC1Ev>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000003c 	.word	0x2000003c

08000768 <_GLOBAL__sub_I_userLED>:
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
 800076c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff ffe3 	bl	800073c <_Z41__static_initialization_and_destruction_0ii>
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078a:	bf00      	nop
 800078c:	e7fd      	b.n	800078a <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	bf00      	nop
 8000794:	e7fd      	b.n	8000792 <HardFault_Handler+0x4>

08000796 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079a:	bf00      	nop
 800079c:	e7fd      	b.n	800079a <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <BusFault_Handler+0x4>

080007a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 fb02 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f979 	bl	8000ae0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <SystemInit+0xc8>)
 80007fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000800:	4a2e      	ldr	r2, [pc, #184]	@ (80008bc <SystemInit+0xc8>)
 8000802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000806:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <SystemInit+0xcc>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000810:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <SystemInit+0xcc>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <SystemInit+0xcc>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800081c:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <SystemInit+0xcc>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4927      	ldr	r1, [pc, #156]	@ (80008c0 <SystemInit+0xcc>)
 8000822:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <SystemInit+0xd0>)
 8000824:	4013      	ands	r3, r2
 8000826:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <SystemInit+0xcc>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <SystemInit+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <SystemInit+0xcc>)
 8000836:	4a24      	ldr	r2, [pc, #144]	@ (80008c8 <SystemInit+0xd4>)
 8000838:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800083a:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <SystemInit+0xcc>)
 800083c:	2200      	movs	r2, #0
 800083e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <SystemInit+0xcc>)
 8000842:	4a21      	ldr	r2, [pc, #132]	@ (80008c8 <SystemInit+0xd4>)
 8000844:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <SystemInit+0xcc>)
 8000848:	2200      	movs	r2, #0
 800084a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800084c:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <SystemInit+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1b      	ldr	r2, [pc, #108]	@ (80008c0 <SystemInit+0xcc>)
 8000852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000858:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <SystemInit+0xcc>)
 800085a:	2200      	movs	r2, #0
 800085c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <SystemInit+0xc8>)
 8000860:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000864:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <SystemInit+0xd8>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800086e:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000876:	d003      	beq.n	8000880 <SystemInit+0x8c>
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800087e:	d117      	bne.n	80008b0 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <SystemInit+0xd8>)
 8000882:	69db      	ldr	r3, [r3, #28]
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	2b00      	cmp	r3, #0
 800088a:	d005      	beq.n	8000898 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <SystemInit+0xd8>)
 800088e:	4a10      	ldr	r2, [pc, #64]	@ (80008d0 <SystemInit+0xdc>)
 8000890:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <SystemInit+0xd8>)
 8000894:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <SystemInit+0xe0>)
 8000896:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <SystemInit+0xd8>)
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	4a0b      	ldr	r2, [pc, #44]	@ (80008cc <SystemInit+0xd8>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <SystemInit+0xd8>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a08      	ldr	r2, [pc, #32]	@ (80008cc <SystemInit+0xd8>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	61d3      	str	r3, [r2, #28]
  }
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	e000ed00 	.word	0xe000ed00
 80008c0:	44020c00 	.word	0x44020c00
 80008c4:	fae2eae3 	.word	0xfae2eae3
 80008c8:	01010280 	.word	0x01010280
 80008cc:	40022000 	.word	0x40022000
 80008d0:	08192a3b 	.word	0x08192a3b
 80008d4:	4c5d6e7f 	.word	0x4c5d6e7f

080008d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000910 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008dc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008de:	e003      	b.n	80008e8 <LoopCopyDataInit>

080008e0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008e2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008e4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008e6:	3104      	adds	r1, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008ea:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <LoopForever+0xe>)
	adds	r2, r0, r1
 80008ec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008ee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008f0:	d3f6      	bcc.n	80008e0 <CopyDataInit>
	ldr	r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000920 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008f4:	e002      	b.n	80008fc <LoopFillZerobss>

080008f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008f6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008f8:	f842 3b04 	str.w	r3, [r2], #4

080008fc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <LoopForever+0x16>)
	cmp	r2, r3
 80008fe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000900:	d3f9      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000902:	f7ff ff77 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f003 fbd9 	bl	80040bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090a:	f7ff fe6d 	bl	80005e8 <main>

0800090e <LoopForever>:

LoopForever:
    b LoopForever
 800090e:	e7fe      	b.n	800090e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000910:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000914:	08004164 	.word	0x08004164
	ldr	r0, =_sdata
 8000918:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800091c:	20000020 	.word	0x20000020
	ldr	r2, =_sbss
 8000920:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8000924:	200000f4 	.word	0x200000f4

08000928 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_IRQHandler>
	...

0800092c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED2)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d003      	beq.n	8000948 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
       )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000940:	f06f 0301 	mvn.w	r3, #1
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
 8000946:	e02c      	b.n	80009a2 <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED2)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d10e      	bne.n	800096c <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <BSP_LED_Init+0x80>)
 8000950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000954:	4a15      	ldr	r2, [pc, #84]	@ (80009ac <BSP_LED_Init+0x80>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <BSP_LED_Init+0x80>)
 8000960:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800096c:	2320      	movs	r3, #32
 800096e:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a0c      	ldr	r2, [pc, #48]	@ (80009b0 <BSP_LED_Init+0x84>)
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	f107 0210 	add.w	r2, r7, #16
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fc86 	bl	800129c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a07      	ldr	r2, [pc, #28]	@ (80009b0 <BSP_LED_Init+0x84>)
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	2120      	movs	r1, #32
 800099a:	2200      	movs	r2, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f000 fdcf 	bl	8001540 <HAL_GPIO_WritePin>
  }

  return ret;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3728      	adds	r7, #40	@ 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	44020c00 	.word	0x44020c00
 80009b0:	20000008 	.word	0x20000008

080009b4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]

  if((Led != LED2)
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
    )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009c8:	f06f 0301 	mvn.w	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e008      	b.n	80009e2 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <BSP_LED_Toggle+0x38>)
 80009d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d8:	2220      	movs	r2, #32
 80009da:	4611      	mov	r1, r2
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fdc7 	bl	8001570 <HAL_GPIO_TogglePin>
  }

  return ret;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000008 	.word	0x20000008

080009f0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	460a      	mov	r2, r1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	4613      	mov	r3, r2
 80009fe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000a00:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <BSP_PB_Init+0xd4>)
 8000a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a06:	4a2f      	ldr	r2, [pc, #188]	@ (8000ac4 <BSP_PB_Init+0xd4>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <BSP_PB_Init+0xd4>)
 8000a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000a24:	2302      	movs	r3, #2
 8000a26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d10c      	bne.n	8000a4c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a23      	ldr	r2, [pc, #140]	@ (8000ac8 <BSP_PB_Init+0xd8>)
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	f107 020c 	add.w	r2, r7, #12
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fc29 	bl	800129c <HAL_GPIO_Init>
 8000a4a:	e036      	b.n	8000aba <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <BSP_PB_Init+0xdc>)
 8000a4e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac8 <BSP_PB_Init+0xd8>)
 8000a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fc1c 	bl	800129c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	4613      	mov	r3, r2
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4a18      	ldr	r2, [pc, #96]	@ (8000ad0 <BSP_PB_Init+0xe0>)
 8000a70:	441a      	add	r2, r3
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4917      	ldr	r1, [pc, #92]	@ (8000ad4 <BSP_PB_Init+0xe4>)
 8000a76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4610      	mov	r0, r2
 8000a7e:	f000 fbb1 	bl	80011e4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4a10      	ldr	r2, [pc, #64]	@ (8000ad0 <BSP_PB_Init+0xe0>)
 8000a8e:	1898      	adds	r0, r3, r2
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a11      	ldr	r2, [pc, #68]	@ (8000ad8 <BSP_PB_Init+0xe8>)
 8000a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f000 fb76 	bl	800118c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000aa0:	2018      	movs	r0, #24
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <BSP_PB_Init+0xec>)
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	f000 fa95 	bl	8000fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 faab 	bl	8001010 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	44020c00 	.word	0x44020c00
 8000ac8:	2000000c 	.word	0x2000000c
 8000acc:	10110000 	.word	0x10110000
 8000ad0:	20000050 	.word	0x20000050
 8000ad4:	08004134 	.word	0x08004134
 8000ad8:	20000010 	.word	0x20000010
 8000adc:	20000014 	.word	0x20000014

08000ae0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	4613      	mov	r3, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <BSP_PB_IRQHandler+0x28>)
 8000af6:	4413      	add	r3, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 fb87 	bl	800120c <HAL_EXTI_IRQHandler>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000050 	.word	0x20000050

08000b0c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b3a:	f06f 0301 	mvn.w	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e018      	b.n	8000b74 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2294      	movs	r2, #148	@ 0x94
 8000b46:	fb02 f303 	mul.w	r3, r2, r3
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <BSP_COM_Init+0x5c>)
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f854 	bl	8000bfc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2294      	movs	r2, #148	@ 0x94
 8000b58:	fb02 f303 	mul.w	r3, r2, r3
 8000b5c:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <BSP_COM_Init+0x5c>)
 8000b5e:	4413      	add	r3, r2
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f80e 	bl	8000b84 <MX_USART_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000b6e:	f06f 0303 	mvn.w	r3, #3
 8000b72:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000b74:	68fb      	ldr	r3, [r7, #12]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000005c 	.word	0x2000005c

08000b84 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_USART_Init+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	895b      	ldrh	r3, [r3, #10]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	891b      	ldrh	r3, [r3, #8]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	899b      	ldrh	r3, [r3, #12]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000bd0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f002 fe6f 	bl	80038bc <HAL_UART_Init>
 8000bde:	4603      	mov	r3, r0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000004 	.word	0x20000004

08000bec <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff ff8b 	bl	8000b0c <BSP_PB_Callback>
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c0a:	4a25      	ldr	r2, [pc, #148]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000c22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c32:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c38:	f003 0301 	and.w	r3, r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c46:	4a16      	ldr	r2, [pc, #88]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c4c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <COM1_MspInit+0xa4>)
 8000c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000c66:	2302      	movs	r3, #2
 8000c68:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000c6e:	230d      	movs	r3, #13
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <COM1_MspInit+0xa8>)
 8000c7a:	f000 fb0f 	bl	800129c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000c86:	230d      	movs	r3, #13
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <COM1_MspInit+0xa8>)
 8000c92:	f000 fb03 	bl	800129c <HAL_GPIO_Init>
}
 8000c96:	bf00      	nop
 8000c98:	3728      	adds	r7, #40	@ 0x28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	44020c00 	.word	0x44020c00
 8000ca4:	42020000 	.word	0x42020000

08000ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f98a 	bl	8000fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000cb2:	f001 fa67 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_Init+0x44>)
 8000cba:	6a1b      	ldr	r3, [r3, #32]
 8000cbc:	f003 030f 	and.w	r3, r3, #15
 8000cc0:	490b      	ldr	r1, [pc, #44]	@ (8000cf0 <HAL_Init+0x48>)
 8000cc2:	5ccb      	ldrb	r3, [r1, r3]
 8000cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_Init+0x4c>)
 8000cca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000ccc:	2004      	movs	r0, #4
 8000cce:	f000 f9cf 	bl	8001070 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f810 	bl	8000cf8 <HAL_InitTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e002      	b.n	8000ce8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce2:	f7ff fd49 	bl	8000778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	44020c00 	.word	0x44020c00
 8000cf0:	0800411c 	.word	0x0800411c
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000d04:	4b33      	ldr	r3, [pc, #204]	@ (8000dd4 <HAL_InitTick+0xdc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e05c      	b.n	8000dca <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000d10:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <HAL_InitTick+0xe0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d10c      	bne.n	8000d36 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <HAL_InitTick+0xe4>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <HAL_InitTick+0xdc>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	e037      	b.n	8000da6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000d36:	f000 f9f3 	bl	8001120 <HAL_SYSTICK_GetCLKSourceConfig>
 8000d3a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d023      	beq.n	8000d8a <HAL_InitTick+0x92>
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d82d      	bhi.n	8000da4 <HAL_InitTick+0xac>
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_InitTick+0x5e>
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d00d      	beq.n	8000d70 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000d54:	e026      	b.n	8000da4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <HAL_InitTick+0xe4>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_InitTick+0xdc>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	60fb      	str	r3, [r7, #12]
        break;
 8000d6e:	e01a      	b.n	8000da6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_InitTick+0xdc>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d7e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	60fb      	str	r3, [r7, #12]
        break;
 8000d88:	e00d      	b.n	8000da6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000d8a:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0xdc>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d98:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da0:	60fb      	str	r3, [r7, #12]
        break;
 8000da2:	e000      	b.n	8000da6 <HAL_InitTick+0xae>
        break;
 8000da4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000da6:	68f8      	ldr	r0, [r7, #12]
 8000da8:	f000 f940 	bl	800102c <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e009      	b.n	8000dca <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db6:	2200      	movs	r2, #0
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbe:	f000 f90d 	bl	8000fdc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000dc2:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_InitTick+0xe8>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2000001c 	.word	0x2000001c
 8000dd8:	e000e010 	.word	0xe000e010
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000018 	.word	0x20000018

08000de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2000001c 	.word	0x2000001c
 8000e08:	200000f0 	.word	0x200000f0

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000f0 	.word	0x200000f0

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2000001c 	.word	0x2000001c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	@ (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	@ (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff4c 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fea:	f7ff ff63 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000fee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	6978      	ldr	r0, [r7, #20]
 8000ff6:	f7ff ffb3 	bl	8000f60 <NVIC_EncodePriority>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff82 	bl	8000f0c <__NVIC_SetPriority>
}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff56 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800103c:	d301      	bcc.n	8001042 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800103e:	2301      	movs	r3, #1
 8001040:	e00d      	b.n	800105e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <HAL_SYSTICK_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <HAL_SYSTICK_Config+0x40>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_SYSTICK_Config+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a05      	ldr	r2, [pc, #20]	@ (800106c <HAL_SYSTICK_Config+0x40>)
 8001056:	f043 0303 	orr.w	r3, r3, #3
 800105a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b04      	cmp	r3, #4
 800107c:	d844      	bhi.n	8001108 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800107e:	a201      	add	r2, pc, #4	@ (adr r2, 8001084 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	080010a7 	.word	0x080010a7
 8001088:	080010c5 	.word	0x080010c5
 800108c:	080010e7 	.word	0x080010e7
 8001090:	08001109 	.word	0x08001109
 8001094:	08001099 	.word	0x08001099
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6013      	str	r3, [r2, #0]
      break;
 80010a4:	e031      	b.n	800110a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80010a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010b8:	4a18      	ldr	r2, [pc, #96]	@ (800111c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010ba:	f023 030c 	bic.w	r3, r3, #12
 80010be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80010c2:	e022      	b.n	800110a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ca:	f023 0304 	bic.w	r3, r3, #4
 80010ce:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010d6:	f023 030c 	bic.w	r3, r3, #12
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80010e4:	e011      	b.n	800110a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001118 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80010ec:	f023 0304 	bic.w	r3, r3, #4
 80010f0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80010f8:	f023 030c 	bic.w	r3, r3, #12
 80010fc:	4a07      	ldr	r2, [pc, #28]	@ (800111c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001106:	e000      	b.n	800110a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001108:	bf00      	nop
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010
 800111c:	44020c00 	.word	0x44020c00

08001120 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001132:	2304      	movs	r3, #4
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	e01e      	b.n	8001176 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800113a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2b08      	cmp	r3, #8
 8001148:	d00f      	beq.n	800116a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	2b08      	cmp	r3, #8
 800114e:	d80f      	bhi.n	8001170 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d003      	beq.n	8001164 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800115c:	e008      	b.n	8001170 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
        break;
 8001162:	e008      	b.n	8001176 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001164:	2301      	movs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
        break;
 8001168:	e005      	b.n	8001176 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800116a:	2302      	movs	r3, #2
 800116c:	607b      	str	r3, [r7, #4]
        break;
 800116e:	e002      	b.n	8001176 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
        break;
 8001174:	bf00      	nop
    }
  }
  return systick_source;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e010 	.word	0xe000e010
 8001188:	44020c00 	.word	0x44020c00

0800118c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	460b      	mov	r3, r1
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800119e:	7afb      	ldrb	r3, [r7, #11]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d011      	beq.n	80011c8 <HAL_EXTI_RegisterCallback+0x3c>
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	dc13      	bgt.n	80011d0 <HAL_EXTI_RegisterCallback+0x44>
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_EXTI_RegisterCallback+0x26>
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d007      	beq.n	80011c0 <HAL_EXTI_RegisterCallback+0x34>
 80011b0:	e00e      	b.n	80011d0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
      break;
 80011be:	e00a      	b.n	80011d6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
      break;
 80011c6:	e006      	b.n	80011d6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
      break;
 80011ce:	e002      	b.n	80011d6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	75fb      	strb	r3, [r7, #23]
      break;
 80011d4:	bf00      	nop
  }

  return status;
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e003      	b.n	8001200 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80011fe:	2300      	movs	r3, #0
  }
}
 8001200:	4618      	mov	r0, r3
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	2201      	movs	r2, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	015a      	lsls	r2, r3, #5
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_EXTI_IRQHandler+0x88>)
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	015a      	lsls	r2, r3, #5
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_EXTI_IRQHandler+0x8c>)
 8001264:	4413      	add	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d009      	beq.n	800128c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4798      	blx	r3
    }
  }
}
 800128c:	bf00      	nop
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	4402200c 	.word	0x4402200c
 8001298:	44022010 	.word	0x44022010

0800129c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b087      	sub	sp, #28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012aa:	e136      	b.n	800151a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	4013      	ands	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 8128 	beq.w	8001514 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x38>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b12      	cmp	r3, #18
 80012d2:	d125      	bne.n	8001320 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	f003 020f 	and.w	r2, r3, #15
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	4313      	orrs	r3, r2
 8001310:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	6979      	ldr	r1, [r7, #20]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4013      	ands	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4313      	orrs	r3, r2
 800134c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d00b      	beq.n	8001374 <HAL_GPIO_Init+0xd8>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001368:	2b11      	cmp	r3, #17
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d130      	bne.n	80013d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4313      	orrs	r3, r2
 800139c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013aa:	2201      	movs	r2, #1
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4013      	ands	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	f003 0201 	and.w	r2, r3, #1
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d017      	beq.n	800140e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4013      	ands	r3, r2
 80013f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4313      	orrs	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d07c      	beq.n	8001514 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800141a:	4a47      	ldr	r2, [pc, #284]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3318      	adds	r3, #24
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4013      	ands	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0a9a      	lsrs	r2, r3, #10
 8001442:	4b3e      	ldr	r3, [pc, #248]	@ (800153c <HAL_GPIO_Init+0x2a0>)
 8001444:	4013      	ands	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	4093      	lsls	r3, r2
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4313      	orrs	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001456:	4938      	ldr	r1, [pc, #224]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3318      	adds	r3, #24
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001464:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	4013      	ands	r3, r2
 8001472:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001488:	4a2b      	ldr	r2, [pc, #172]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4013      	ands	r3, r2
 800149c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80014b2:	4a21      	ldr	r2, [pc, #132]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 80014ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014be:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	4013      	ands	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4313      	orrs	r3, r2
 80014dc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80014de:	4a16      	ldr	r2, [pc, #88]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 80014e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800150c:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <HAL_GPIO_Init+0x29c>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	3301      	adds	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	fa22 f303 	lsr.w	r3, r2, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	f47f aec1 	bne.w	80012ac <HAL_GPIO_Init+0x10>
  }
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	371c      	adds	r7, #28
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	44022000 	.word	0x44022000
 800153c:	002f7f7f 	.word	0x002f7f7f

08001540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
 800154c:	4613      	mov	r3, r2
 800154e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001550:	787b      	ldrb	r3, [r7, #1]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155c:	e002      	b.n	8001564 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4013      	ands	r3, r2
 8001588:	041a      	lsls	r2, r3, #16
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	43d9      	mvns	r1, r3
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	400b      	ands	r3, r1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f000 bc28 	b.w	8001e08 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b8:	4b94      	ldr	r3, [pc, #592]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f003 0318 	and.w	r3, r3, #24
 80015c0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80015c2:	4b92      	ldr	r3, [pc, #584]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d05b      	beq.n	8001690 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x46>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2b18      	cmp	r3, #24
 80015e2:	d114      	bne.n	800160e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d111      	bne.n	800160e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d102      	bne.n	80015f8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	f000 bc08 	b.w	8001e08 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80015f8:	4b84      	ldr	r3, [pc, #528]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	041b      	lsls	r3, r3, #16
 8001606:	4981      	ldr	r1, [pc, #516]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001608:	4313      	orrs	r3, r2
 800160a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800160c:	e040      	b.n	8001690 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d023      	beq.n	800165e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001616:	4b7d      	ldr	r3, [pc, #500]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a7c      	ldr	r2, [pc, #496]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fbf3 	bl	8000e0c <HAL_GetTick>
 8001626:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800162a:	f7ff fbef 	bl	8000e0c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e3e5      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800163c:	4b73      	ldr	r3, [pc, #460]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001648:	4b70      	ldr	r3, [pc, #448]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	041b      	lsls	r3, r3, #16
 8001656:	496d      	ldr	r1, [pc, #436]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001658:	4313      	orrs	r3, r2
 800165a:	618b      	str	r3, [r1, #24]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800165e:	4b6b      	ldr	r3, [pc, #428]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6a      	ldr	r2, [pc, #424]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001664:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166a:	f7ff fbcf 	bl	8000e0c <HAL_GetTick>
 800166e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001672:	f7ff fbcb 	bl	8000e0c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e3c1      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001684:	4b61      	ldr	r3, [pc, #388]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80a0 	beq.w	80017de <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x10c>
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	2b18      	cmp	r3, #24
 80016a8:	d109      	bne.n	80016be <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8092 	bne.w	80017de <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e3a4      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c6:	d106      	bne.n	80016d6 <HAL_RCC_OscConfig+0x132>
 80016c8:	4b50      	ldr	r3, [pc, #320]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e058      	b.n	8001788 <HAL_RCC_OscConfig+0x1e4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d112      	bne.n	8001704 <HAL_RCC_OscConfig+0x160>
 80016de:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a4a      	ldr	r2, [pc, #296]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b48      	ldr	r3, [pc, #288]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a47      	ldr	r2, [pc, #284]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016f0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b45      	ldr	r3, [pc, #276]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a44      	ldr	r2, [pc, #272]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80016fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e041      	b.n	8001788 <HAL_RCC_OscConfig+0x1e4>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800170c:	d112      	bne.n	8001734 <HAL_RCC_OscConfig+0x190>
 800170e:	4b3f      	ldr	r3, [pc, #252]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a3e      	ldr	r2, [pc, #248]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b3c      	ldr	r3, [pc, #240]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a3b      	ldr	r2, [pc, #236]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001720:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b39      	ldr	r3, [pc, #228]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a38      	ldr	r2, [pc, #224]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800172c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e029      	b.n	8001788 <HAL_RCC_OscConfig+0x1e4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800173c:	d112      	bne.n	8001764 <HAL_RCC_OscConfig+0x1c0>
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a32      	ldr	r2, [pc, #200]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b30      	ldr	r3, [pc, #192]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a2f      	ldr	r2, [pc, #188]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001750:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2c      	ldr	r2, [pc, #176]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e011      	b.n	8001788 <HAL_RCC_OscConfig+0x1e4>
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a28      	ldr	r2, [pc, #160]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b26      	ldr	r3, [pc, #152]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a25      	ldr	r2, [pc, #148]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a22      	ldr	r2, [pc, #136]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 8001782:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fb3c 	bl	8000e0c <HAL_GetTick>
 8001794:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001798:	f7ff fb38 	bl	8000e0c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e32e      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x1f4>
 80017b6:	e012      	b.n	80017de <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb28 	bl	8000e0c <HAL_GetTick>
 80017bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb24 	bl	8000e0c <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e31a      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_RCC_OscConfig+0x268>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 809a 	beq.w	8001920 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <HAL_RCC_OscConfig+0x25a>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	2b18      	cmp	r3, #24
 80017f6:	d149      	bne.n	800188c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d146      	bne.n	800188c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d104      	bne.n	8001810 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e2fe      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
 800180a:	bf00      	nop
 800180c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11c      	bne.n	8001850 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001816:	4b9a      	ldr	r3, [pc, #616]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0218 	and.w	r2, r3, #24
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	429a      	cmp	r2, r3
 8001824:	d014      	beq.n	8001850 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001826:	4b96      	ldr	r3, [pc, #600]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 0218 	bic.w	r2, r3, #24
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	4993      	ldr	r1, [pc, #588]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001834:	4313      	orrs	r3, r2
 8001836:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001838:	f000 fdd0 	bl	80023dc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800183c:	4b91      	ldr	r3, [pc, #580]	@ (8001a84 <HAL_RCC_OscConfig+0x4e0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fa59 	bl	8000cf8 <HAL_InitTick>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e2db      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fadc 	bl	8000e0c <HAL_GetTick>
 8001854:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001858:	f7ff fad8 	bl	8000e0c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e2ce      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800186a:	4b85      	ldr	r3, [pc, #532]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001876:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	041b      	lsls	r3, r3, #16
 8001884:	497e      	ldr	r1, [pc, #504]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800188a:	e049      	b.n	8001920 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d02c      	beq.n	80018ee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001894:	4b7a      	ldr	r3, [pc, #488]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 0218 	bic.w	r2, r3, #24
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	4977      	ldr	r1, [pc, #476]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80018a6:	4b76      	ldr	r3, [pc, #472]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a75      	ldr	r2, [pc, #468]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b2:	f7ff faab 	bl	8000e0c <HAL_GetTick>
 80018b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018ba:	f7ff faa7 	bl	8000e0c <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e29d      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80018d8:	4b69      	ldr	r3, [pc, #420]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	4966      	ldr	r1, [pc, #408]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	610b      	str	r3, [r1, #16]
 80018ec:	e018      	b.n	8001920 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ee:	4b64      	ldr	r3, [pc, #400]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a63      	ldr	r2, [pc, #396]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fa87 	bl	8000e0c <HAL_GetTick>
 80018fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001902:	f7ff fa83 	bl	8000e0c <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e279      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	4b5a      	ldr	r3, [pc, #360]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d03c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01c      	beq.n	800196e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001934:	4b52      	ldr	r3, [pc, #328]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800193a:	4a51      	ldr	r2, [pc, #324]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 800193c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001940:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001944:	f7ff fa62 	bl	8000e0c <HAL_GetTick>
 8001948:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800194c:	f7ff fa5e 	bl	8000e0c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e254      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800195e:	4b48      	ldr	r3, [pc, #288]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001964:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0ef      	beq.n	800194c <HAL_RCC_OscConfig+0x3a8>
 800196c:	e01b      	b.n	80019a6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196e:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001970:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001974:	4a42      	ldr	r2, [pc, #264]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001976:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800197a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff fa45 	bl	8000e0c <HAL_GetTick>
 8001982:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001986:	f7ff fa41 	bl	8000e0c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e237      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001998:	4b39      	ldr	r3, [pc, #228]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 800199a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800199e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ef      	bne.n	8001986 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80d2 	beq.w	8001b58 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80019b4:	4b34      	ldr	r3, [pc, #208]	@ (8001a88 <HAL_RCC_OscConfig+0x4e4>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d118      	bne.n	80019f2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <HAL_RCC_OscConfig+0x4e4>)
 80019c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c4:	4a30      	ldr	r2, [pc, #192]	@ (8001a88 <HAL_RCC_OscConfig+0x4e4>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019cc:	f7ff fa1e 	bl	8000e0c <HAL_GetTick>
 80019d0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff fa1a 	bl	8000e0c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e210      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80019e6:	4b28      	ldr	r3, [pc, #160]	@ (8001a88 <HAL_RCC_OscConfig+0x4e4>)
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_RCC_OscConfig+0x468>
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 80019fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a00:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a0a:	e074      	b.n	8001af6 <HAL_RCC_OscConfig+0x552>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d118      	bne.n	8001a46 <HAL_RCC_OscConfig+0x4a2>
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a1a:	4a19      	ldr	r2, [pc, #100]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a2a:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a3a:	4a11      	ldr	r2, [pc, #68]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a44:	e057      	b.n	8001af6 <HAL_RCC_OscConfig+0x552>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b05      	cmp	r3, #5
 8001a4c:	d11e      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4e8>
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a54:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a64:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a6e:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a74:	4a02      	ldr	r2, [pc, #8]	@ (8001a80 <HAL_RCC_OscConfig+0x4dc>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a7e:	e03a      	b.n	8001af6 <HAL_RCC_OscConfig+0x552>
 8001a80:	44020c00 	.word	0x44020c00
 8001a84:	20000018 	.word	0x20000018
 8001a88:	44020800 	.word	0x44020800
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b85      	cmp	r3, #133	@ 0x85
 8001a92:	d118      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x522>
 8001a94:	4ba2      	ldr	r3, [pc, #648]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a9a:	4aa1      	ldr	r2, [pc, #644]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001aa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aaa:	4a9d      	ldr	r2, [pc, #628]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ab0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aba:	4a99      	ldr	r2, [pc, #612]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ac4:	e017      	b.n	8001af6 <HAL_RCC_OscConfig+0x552>
 8001ac6:	4b96      	ldr	r3, [pc, #600]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001acc:	4a94      	ldr	r2, [pc, #592]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ad6:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001adc:	4a90      	ldr	r2, [pc, #576]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ae6:	4b8e      	ldr	r3, [pc, #568]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aec:	4a8c      	ldr	r2, [pc, #560]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001aee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001af2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d016      	beq.n	8001b2c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff f985 	bl	8000e0c <HAL_GetTick>
 8001b02:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff f981 	bl	8000e0c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e175      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b1c:	4b80      	ldr	r3, [pc, #512]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001b1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ed      	beq.n	8001b06 <HAL_RCC_OscConfig+0x562>
 8001b2a:	e015      	b.n	8001b58 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f96e 	bl	8000e0c <HAL_GetTick>
 8001b30:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f96a 	bl	8000e0c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e15e      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b4a:	4b75      	ldr	r3, [pc, #468]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ed      	bne.n	8001b34 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d036      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d019      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b6c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a6b      	ldr	r2, [pc, #428]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001b72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f948 	bl	8000e0c <HAL_GetTick>
 8001b7c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001b80:	f7ff f944 	bl	8000e0c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e13a      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001b92:	4b63      	ldr	r3, [pc, #396]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x5dc>
 8001b9e:	e018      	b.n	8001bd2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5e      	ldr	r2, [pc, #376]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ba6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001baa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff f92e 	bl	8000e0c <HAL_GetTick>
 8001bb0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001bb4:	f7ff f92a 	bl	8000e0c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e120      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001bc6:	4b56      	ldr	r3, [pc, #344]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8115 	beq.w	8001e06 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b18      	cmp	r3, #24
 8001be0:	f000 80af 	beq.w	8001d42 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	f040 8086 	bne.w	8001cfa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001bee:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a4b      	ldr	r2, [pc, #300]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001bf4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f907 	bl	8000e0c <HAL_GetTick>
 8001bfe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f903 	bl	8000e0c <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0f9      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001c14:	4b42      	ldr	r3, [pc, #264]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001c20:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001c28:	f023 0303 	bic.w	r3, r3, #3
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c34:	0212      	lsls	r2, r2, #8
 8001c36:	430a      	orrs	r2, r1
 8001c38:	4939      	ldr	r1, [pc, #228]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	025b      	lsls	r3, r3, #9
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	3b01      	subs	r3, #1
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001c6e:	492c      	ldr	r1, [pc, #176]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001c74:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	4a29      	ldr	r2, [pc, #164]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c7a:	f023 0310 	bic.w	r3, r3, #16
 8001c7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c84:	4a26      	ldr	r2, [pc, #152]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001c8a:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	4a24      	ldr	r2, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001c96:	4b22      	ldr	r3, [pc, #136]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	f023 020c 	bic.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	491f      	ldr	r1, [pc, #124]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cac:	f023 0220 	bic.w	r2, r3, #32
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb4:	491a      	ldr	r1, [pc, #104]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cba:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	4a18      	ldr	r2, [pc, #96]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001ccc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f89b 	bl	8000e0c <HAL_GetTick>
 8001cd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001cda:	f7ff f897 	bl	8000e0c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e08d      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cec:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x736>
 8001cf8:	e085      	b.n	8001e06 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	@ (8001d20 <HAL_RCC_OscConfig+0x77c>)
 8001d00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff f881 	bl	8000e0c <HAL_GetTick>
 8001d0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff f87d 	bl	8000e0c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d903      	bls.n	8001d24 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e073      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
 8001d20:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d24:	4b3a      	ldr	r3, [pc, #232]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ee      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001d30:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	4a36      	ldr	r2, [pc, #216]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001d36:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	6293      	str	r3, [r2, #40]	@ 0x28
 8001d40:	e061      	b.n	8001e06 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001d42:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d46:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d48:	4b31      	ldr	r3, [pc, #196]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d031      	beq.n	8001dba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d12a      	bne.n	8001dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d122      	bne.n	8001dba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d11a      	bne.n	8001dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	0a5b      	lsrs	r3, r3, #9
 8001d88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d90:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d111      	bne.n	8001dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d108      	bne.n	8001dba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0e1b      	lsrs	r3, r3, #24
 8001dac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e024      	b.n	8001e08 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d01a      	beq.n	8001e06 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001dd6:	f023 0310 	bic.w	r3, r3, #16
 8001dda:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f816 	bl	8000e0c <HAL_GetTick>
 8001de0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001de2:	bf00      	nop
 8001de4:	f7ff f812 	bl	8000e0c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d0f9      	beq.n	8001de4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	4a06      	ldr	r2, [pc, #24]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	4a04      	ldr	r2, [pc, #16]	@ (8001e10 <HAL_RCC_OscConfig+0x86c>)
 8001e00:	f043 0310 	orr.w	r3, r3, #16
 8001e04:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	44020c00 	.word	0x44020c00

08001e14 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e19e      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b83      	ldr	r3, [pc, #524]	@ (8002038 <HAL_RCC_ClockConfig+0x224>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b80      	ldr	r3, [pc, #512]	@ (8002038 <HAL_RCC_ClockConfig+0x224>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 020f 	bic.w	r2, r3, #15
 8001e3e:	497e      	ldr	r1, [pc, #504]	@ (8002038 <HAL_RCC_ClockConfig+0x224>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b7c      	ldr	r3, [pc, #496]	@ (8002038 <HAL_RCC_ClockConfig+0x224>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e186      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d012      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	4b74      	ldr	r3, [pc, #464]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	0a1b      	lsrs	r3, r3, #8
 8001e6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d909      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001e76:	4b71      	ldr	r3, [pc, #452]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	021b      	lsls	r3, r3, #8
 8001e84:	496d      	ldr	r1, [pc, #436]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	4b68      	ldr	r3, [pc, #416]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d909      	bls.n	8001ebc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001ea8:	4b64      	ldr	r3, [pc, #400]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4961      	ldr	r1, [pc, #388]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d908      	bls.n	8001eea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001ed8:	4b58      	ldr	r3, [pc, #352]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4955      	ldr	r1, [pc, #340]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	4b50      	ldr	r3, [pc, #320]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d908      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001f06:	4b4d      	ldr	r3, [pc, #308]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	f023 020f 	bic.w	r2, r3, #15
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	494a      	ldr	r1, [pc, #296]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 8093 	beq.w	800204c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f2e:	4b43      	ldr	r3, [pc, #268]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d121      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e113      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e107      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001f5e:	4b37      	ldr	r3, [pc, #220]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0fb      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6e:	4b33      	ldr	r3, [pc, #204]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0f3      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	492c      	ldr	r1, [pc, #176]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f90:	f7fe ff3c 	bl	8000e0c <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d112      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe ff34 	bl	8000e0c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0d7      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb6:	4b21      	ldr	r3, [pc, #132]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 0318 	and.w	r3, r3, #24
 8001fbe:	2b18      	cmp	r3, #24
 8001fc0:	d1ee      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x18c>
 8001fc2:	e043      	b.n	800204c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fcc:	e00a      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fce:	f7fe ff1d 	bl	8000e0c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e0c0      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe4:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f003 0318 	and.w	r3, r3, #24
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d1ee      	bne.n	8001fce <HAL_RCC_ClockConfig+0x1ba>
 8001ff0:	e02c      	b.n	800204c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d122      	bne.n	8002040 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	f7fe ff06 	bl	8000e0c <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e0a9      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002012:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_RCC_ClockConfig+0x228>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 0318 	and.w	r3, r3, #24
 800201a:	2b08      	cmp	r3, #8
 800201c:	d1ee      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x1e8>
 800201e:	e015      	b.n	800204c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002020:	f7fe fef4 	bl	8000e0c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4293      	cmp	r3, r2
 8002030:	d906      	bls.n	8002040 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e097      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000
 800203c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002040:	4b4b      	ldr	r3, [pc, #300]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f003 0318 	and.w	r3, r3, #24
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1e9      	bne.n	8002020 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b44      	ldr	r3, [pc, #272]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	429a      	cmp	r2, r3
 8002066:	d208      	bcs.n	800207a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002068:	4b41      	ldr	r3, [pc, #260]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	f023 020f 	bic.w	r2, r3, #15
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	493e      	ldr	r1, [pc, #248]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 8002076:	4313      	orrs	r3, r2
 8002078:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207a:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <HAL_RCC_ClockConfig+0x360>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d210      	bcs.n	80020aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002088:	4b3a      	ldr	r3, [pc, #232]	@ (8002174 <HAL_RCC_ClockConfig+0x360>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 020f 	bic.w	r2, r3, #15
 8002090:	4938      	ldr	r1, [pc, #224]	@ (8002174 <HAL_RCC_ClockConfig+0x360>)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <HAL_RCC_ClockConfig+0x360>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e05d      	b.n	8002166 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d010      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d208      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80020c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4927      	ldr	r1, [pc, #156]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d012      	beq.n	800210a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d209      	bcs.n	800210a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	491a      	ldr	r1, [pc, #104]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 8002106:	4313      	orrs	r3, r2
 8002108:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	2b00      	cmp	r3, #0
 8002114:	d012      	beq.n	800213c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695a      	ldr	r2, [r3, #20]
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002124:	429a      	cmp	r2, r3
 8002126:	d209      	bcs.n	800213c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	021b      	lsls	r3, r3, #8
 8002136:	490e      	ldr	r1, [pc, #56]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800213c:	f000 f822 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_ClockConfig+0x35c>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	490b      	ldr	r1, [pc, #44]	@ (8002178 <HAL_RCC_ClockConfig+0x364>)
 800214c:	5ccb      	ldrb	r3, [r1, r3]
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_RCC_ClockConfig+0x368>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x36c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fdcc 	bl	8000cf8 <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002164:	7afb      	ldrb	r3, [r7, #11]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	44020c00 	.word	0x44020c00
 8002174:	40022000 	.word	0x40022000
 8002178:	0800411c 	.word	0x0800411c
 800217c:	20000000 	.word	0x20000000
 8002180:	20000018 	.word	0x20000018

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800218a:	4b8c      	ldr	r3, [pc, #560]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f003 0318 	and.w	r3, r3, #24
 8002192:	2b08      	cmp	r3, #8
 8002194:	d102      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002196:	4b8a      	ldr	r3, [pc, #552]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	e107      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800219c:	4b87      	ldr	r3, [pc, #540]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f003 0318 	and.w	r3, r3, #24
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d112      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80021a8:	4b84      	ldr	r3, [pc, #528]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80021b4:	4b81      	ldr	r3, [pc, #516]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	4a81      	ldr	r2, [pc, #516]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e0f1      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80021c8:	4b7e      	ldr	r3, [pc, #504]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	e0ee      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ce:	4b7b      	ldr	r3, [pc, #492]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0318 	and.w	r3, r3, #24
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d102      	bne.n	80021e0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021da:	4b7b      	ldr	r3, [pc, #492]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0x244>)
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	e0e5      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e0:	4b76      	ldr	r3, [pc, #472]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 0318 	and.w	r3, r3, #24
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	f040 80dd 	bne.w	80023a8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80021ee:	4b73      	ldr	r3, [pc, #460]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80021f8:	4b70      	ldr	r3, [pc, #448]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002202:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002204:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002210:	4b6a      	ldr	r3, [pc, #424]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	fb02 f303 	mul.w	r3, r2, r3
 8002220:	ee07 3a90 	vmov	s15, r3
 8002224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002228:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 80b7 	beq.w	80023a2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0xbe>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d056      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x16a>
 8002240:	e077      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002242:	4b5e      	ldr	r3, [pc, #376]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d02d      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800224e:	4b5b      	ldr	r3, [pc, #364]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	08db      	lsrs	r3, r3, #3
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	4a5a      	ldr	r2, [pc, #360]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x240>)
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002278:	4b50      	ldr	r3, [pc, #320]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 800227a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002288:	ed97 6a02 	vldr	s12, [r7, #8]
 800228c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80023cc <HAL_RCC_GetSysClockFreq+0x248>
 8002290:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002294:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800229c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80022a8:	e065      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80023d0 <HAL_RCC_GetSysClockFreq+0x24c>
 80022b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022bc:	4b3f      	ldr	r3, [pc, #252]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 80022be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80022cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80023cc <HAL_RCC_GetSysClockFreq+0x248>
 80022d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80022dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80022ec:	e043      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80023d4 <HAL_RCC_GetSysClockFreq+0x250>
 80022fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002300:	4b2e      	ldr	r3, [pc, #184]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002310:	ed97 6a02 	vldr	s12, [r7, #8]
 8002314:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80023cc <HAL_RCC_GetSysClockFreq+0x248>
 8002318:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800231c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002324:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002330:	e021      	b.n	8002376 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80023d8 <HAL_RCC_GetSysClockFreq+0x254>
 8002340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002344:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002354:	ed97 6a02 	vldr	s12, [r7, #8]
 8002358:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80023cc <HAL_RCC_GetSysClockFreq+0x248>
 800235c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002360:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002368:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800236c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002370:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002374:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002376:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x238>)
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002380:	3301      	adds	r3, #1
 8002382:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800238e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239a:	ee17 3a90 	vmov	r3, s15
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	e004      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e001      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80023aa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80023ac:	69fb      	ldr	r3, [r7, #28]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	44020c00 	.word	0x44020c00
 80023c0:	003d0900 	.word	0x003d0900
 80023c4:	03d09000 	.word	0x03d09000
 80023c8:	016e3600 	.word	0x016e3600
 80023cc:	46000000 	.word	0x46000000
 80023d0:	4c742400 	.word	0x4c742400
 80023d4:	4bb71b00 	.word	0x4bb71b00
 80023d8:	4a742400 	.word	0x4a742400

080023dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023e0:	f7ff fed0 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <HAL_RCC_GetHCLKFreq+0x2c>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80023ea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023ee:	4907      	ldr	r1, [pc, #28]	@ (800240c <HAL_RCC_GetHCLKFreq+0x30>)
 80023f0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80023f2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x34>)
 80023fc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <HAL_RCC_GetHCLKFreq+0x34>)
 8002400:	681b      	ldr	r3, [r3, #0]
}
 8002402:	4618      	mov	r0, r3
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	44020c00 	.word	0x44020c00
 800240c:	0800411c 	.word	0x0800411c
 8002410:	20000000 	.word	0x20000000

08002414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002418:	f7ff ffe0 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	091b      	lsrs	r3, r3, #4
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	4904      	ldr	r1, [pc, #16]	@ (800243c <HAL_RCC_GetPCLK1Freq+0x28>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}
 8002438:	44020c00 	.word	0x44020c00
 800243c:	0800412c 	.word	0x0800412c

08002440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002444:	f7ff ffca 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002448:	4602      	mov	r2, r0
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4904      	ldr	r1, [pc, #16]	@ (8002468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002456:	5ccb      	ldrb	r3, [r1, r3]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	44020c00 	.word	0x44020c00
 8002468:	0800412c 	.word	0x0800412c

0800246c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002470:	f7ff ffb4 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002474:	4602      	mov	r2, r0
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	0b1b      	lsrs	r3, r3, #12
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4904      	ldr	r1, [pc, #16]	@ (8002494 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002482:	5ccb      	ldrb	r3, [r1, r3]
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800248c:	4618      	mov	r0, r3
 800248e:	bd80      	pop	{r7, pc}
 8002490:	44020c00 	.word	0x44020c00
 8002494:	0800412c 	.word	0x0800412c

08002498 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8002498:	b480      	push	{r7}
 800249a:	b08b      	sub	sp, #44	@ 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80024a0:	4bad      	ldr	r3, [pc, #692]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80024a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80024aa:	4bab      	ldr	r3, [pc, #684]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80024b4:	4ba8      	ldr	r3, [pc, #672]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024be:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80024c0:	4ba5      	ldr	r3, [pc, #660]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80024c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80024ca:	4ba3      	ldr	r3, [pc, #652]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80024cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ce:	08db      	lsrs	r3, r3, #3
 80024d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	ee07 3a90 	vmov	s15, r3
 80024de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8126 	beq.w	800273a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d053      	beq.n	800259c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d86f      	bhi.n	80025da <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d003      	beq.n	8002508 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d02b      	beq.n	800255e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8002506:	e068      	b.n	80025da <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002508:	4b93      	ldr	r3, [pc, #588]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	08db      	lsrs	r3, r3, #3
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	4a92      	ldr	r2, [pc, #584]	@ (800275c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	ee07 3a90 	vmov	s15, r3
 8002520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002540:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8002760 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800255c:	e068      	b.n	8002630 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002568:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002764 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800256c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	ed97 6a04 	vldr	s12, [r7, #16]
 800257e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002760 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800258a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800258e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002596:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800259a:	e049      	b.n	8002630 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a6:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002768 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80025aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80025bc:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8002760 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80025c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80025d8:	e02a      	b.n	8002630 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80025da:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	4a5d      	ldr	r2, [pc, #372]	@ (800275c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80025e6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	ee07 3a90 	vmov	s15, r3
 80025fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002612:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002760 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800261e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800262e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002630:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800263c:	d121      	bne.n	8002682 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800263e:	4b46      	ldr	r3, [pc, #280]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d017      	beq.n	800267a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800264a:	4b43      	ldr	r3, [pc, #268]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	0a5b      	lsrs	r3, r3, #9
 8002650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002654:	ee07 3a90 	vmov	s15, r3
 8002658:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800265c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002660:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002664:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800266c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002670:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e002      	b.n	8002688 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002688:	4b33      	ldr	r3, [pc, #204]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002690:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002694:	d121      	bne.n	80026da <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8002696:	4b30      	ldr	r3, [pc, #192]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d017      	beq.n	80026d2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80026a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80026a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ac:	ee07 3a90 	vmov	s15, r3
 80026b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80026b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80026bc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80026c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026c8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	e006      	b.n	80026e0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	e002      	b.n	80026e0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80026e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026ec:	d121      	bne.n	8002732 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80026ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80026f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d017      	beq.n	800272a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80026fa:	4b17      	ldr	r3, [pc, #92]	@ (8002758 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80026fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fe:	0e1b      	lsrs	r3, r3, #24
 8002700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800270c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002710:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002714:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002720:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002728:	e010      	b.n	800274c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	e00c      	b.n	800274c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
}
 8002738:	e008      	b.n	800274c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
}
 800274c:	bf00      	nop
 800274e:	372c      	adds	r7, #44	@ 0x2c
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	44020c00 	.word	0x44020c00
 800275c:	03d09000 	.word	0x03d09000
 8002760:	46000000 	.word	0x46000000
 8002764:	4a742400 	.word	0x4a742400
 8002768:	4bb71b00 	.word	0x4bb71b00

0800276c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800276c:	b480      	push	{r7}
 800276e:	b08b      	sub	sp, #44	@ 0x2c
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8002774:	4bad      	ldr	r3, [pc, #692]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800277e:	4bab      	ldr	r3, [pc, #684]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8002788:	4ba8      	ldr	r3, [pc, #672]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002792:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8002794:	4ba5      	ldr	r3, [pc, #660]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800279e:	4ba3      	ldr	r3, [pc, #652]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	08db      	lsrs	r3, r3, #3
 80027a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8126 	beq.w	8002a0e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d053      	beq.n	8002870 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d86f      	bhi.n	80028ae <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d003      	beq.n	80027dc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d02b      	beq.n	8002832 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80027da:	e068      	b.n	80028ae <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80027dc:	4b93      	ldr	r3, [pc, #588]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	08db      	lsrs	r3, r3, #3
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	4a92      	ldr	r2, [pc, #584]	@ (8002a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	ee07 3a90 	vmov	s15, r3
 80027f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002810:	ed97 6a04 	vldr	s12, [r7, #16]
 8002814:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002820:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002830:	e068      	b.n	8002904 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8002840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284e:	ed97 6a04 	vldr	s12, [r7, #16]
 8002852:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800285e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800286e:	e049      	b.n	8002904 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002a3c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800287e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288c:	ed97 6a04 	vldr	s12, [r7, #16]
 8002890:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80028ac:	e02a      	b.n	8002904 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80028ae:	4b5f      	ldr	r3, [pc, #380]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	ee07 3a90 	vmov	s15, r3
 80028c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80028e6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80028ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002902:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002904:	4b49      	ldr	r3, [pc, #292]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002910:	d121      	bne.n	8002956 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002912:	4b46      	ldr	r3, [pc, #280]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d017      	beq.n	800294e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800291e:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002930:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002934:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002938:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002944:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e006      	b.n	800295c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e002      	b.n	800295c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800295c:	4b33      	ldr	r3, [pc, #204]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002968:	d121      	bne.n	80029ae <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800296a:	4b30      	ldr	r3, [pc, #192]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d017      	beq.n	80029a6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002976:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	0c1b      	lsrs	r3, r3, #16
 800297c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002980:	ee07 3a90 	vmov	s15, r3
 8002984:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002988:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800298c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002990:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	e002      	b.n	80029b4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c0:	d121      	bne.n	8002a06 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d017      	beq.n	80029fe <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80029ce:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80029d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d2:	0e1b      	lsrs	r3, r3, #24
 80029d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80029e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029e4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80029e8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80029ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80029fc:	e010      	b.n	8002a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	e00c      	b.n	8002a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	e008      	b.n	8002a20 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	372c      	adds	r7, #44	@ 0x2c
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	44020c00 	.word	0x44020c00
 8002a30:	03d09000 	.word	0x03d09000
 8002a34:	46000000 	.word	0x46000000
 8002a38:	4a742400 	.word	0x4a742400
 8002a3c:	4bb71b00 	.word	0x4bb71b00

08002a40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	@ 0x30
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002a4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a4e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8002a52:	430b      	orrs	r3, r1
 8002a54:	d14b      	bne.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002a56:	4bc4      	ldr	r3, [pc, #784]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a60:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8002a62:	4bc1      	ldr	r3, [pc, #772]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d108      	bne.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8002a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a76:	d104      	bne.n	8002a82 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8002a78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a7e:	f000 bf14 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8002a82:	4bb9      	ldr	r3, [pc, #740]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a98:	d104      	bne.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8002a9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aa0:	f000 bf03 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8002aa4:	4bb0      	ldr	r3, [pc, #704]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ab0:	d119      	bne.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8002ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ab8:	d115      	bne.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002aba:	4bab      	ldr	r3, [pc, #684]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8002ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ac6:	d30a      	bcc.n	8002ade <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8002ac8:	4ba7      	ldr	r3, [pc, #668]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad2:	4aa6      	ldr	r2, [pc, #664]	@ (8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002ada:	f000 bee6 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002ae2:	f000 bee2 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aea:	f000 bede 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8002aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002af2:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8002af6:	ea52 0301 	orrs.w	r3, r2, r1
 8002afa:	f000 838e 	beq.w	800321a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8002afe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b02:	2a01      	cmp	r2, #1
 8002b04:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8002b08:	f080 86cc 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b10:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8002b14:	ea52 0301 	orrs.w	r3, r2, r1
 8002b18:	f000 82aa 	beq.w	8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8002b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b20:	2a01      	cmp	r2, #1
 8002b22:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8002b26:	f080 86bd 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b2e:	f1a3 0110 	sub.w	r1, r3, #16
 8002b32:	ea52 0301 	orrs.w	r3, r2, r1
 8002b36:	f000 8681 	beq.w	800383c <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8002b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b3e:	2a01      	cmp	r2, #1
 8002b40:	f173 0310 	sbcs.w	r3, r3, #16
 8002b44:	f080 86ae 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b4c:	1f19      	subs	r1, r3, #4
 8002b4e:	ea52 0301 	orrs.w	r3, r2, r1
 8002b52:	f000 84b1 	beq.w	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8002b56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b5a:	2a01      	cmp	r2, #1
 8002b5c:	f173 0304 	sbcs.w	r3, r3, #4
 8002b60:	f080 86a0 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b68:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	f000 85aa 	beq.w	80036c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8002b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b76:	497e      	ldr	r1, [pc, #504]	@ (8002d70 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8002b78:	428a      	cmp	r2, r1
 8002b7a:	f173 0300 	sbcs.w	r3, r3, #0
 8002b7e:	f080 8691 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b86:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	f000 8532 	beq.w	80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8002b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b94:	4977      	ldr	r1, [pc, #476]	@ (8002d74 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8002b96:	428a      	cmp	r2, r1
 8002b98:	f173 0300 	sbcs.w	r3, r3, #0
 8002b9c:	f080 8682 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ba4:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	f000 84bc 	beq.w	8003526 <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8002bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb2:	4971      	ldr	r1, [pc, #452]	@ (8002d78 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8002bb4:	428a      	cmp	r2, r1
 8002bb6:	f173 0300 	sbcs.w	r3, r3, #0
 8002bba:	f080 8673 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002bbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	f000 85f2 	beq.w	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8002bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bd0:	496a      	ldr	r1, [pc, #424]	@ (8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8002bd2:	428a      	cmp	r2, r1
 8002bd4:	f173 0300 	sbcs.w	r3, r3, #0
 8002bd8:	f080 8664 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8002be4:	430b      	orrs	r3, r1
 8002be6:	f000 81e5 	beq.w	8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8002bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bee:	4964      	ldr	r1, [pc, #400]	@ (8002d80 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8002bf0:	428a      	cmp	r2, r1
 8002bf2:	f173 0300 	sbcs.w	r3, r3, #0
 8002bf6:	f080 8655 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bfe:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8002c02:	430b      	orrs	r3, r1
 8002c04:	f000 83cc 	beq.w	80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8002c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c0c:	495d      	ldr	r1, [pc, #372]	@ (8002d84 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8002c0e:	428a      	cmp	r2, r1
 8002c10:	f173 0300 	sbcs.w	r3, r3, #0
 8002c14:	f080 8646 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c1c:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8002c20:	430b      	orrs	r3, r1
 8002c22:	f000 8331 	beq.w	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8002c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c2a:	4957      	ldr	r1, [pc, #348]	@ (8002d88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8002c2c:	428a      	cmp	r2, r1
 8002c2e:	f173 0300 	sbcs.w	r3, r3, #0
 8002c32:	f080 8637 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c3a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	f000 82bb 	beq.w	80031ba <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8002c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c48:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8002c4c:	f173 0300 	sbcs.w	r3, r3, #0
 8002c50:	f080 8628 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c58:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	f000 826d 	beq.w	800313c <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8002c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c66:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002c6a:	428a      	cmp	r2, r1
 8002c6c:	f173 0300 	sbcs.w	r3, r3, #0
 8002c70:	f080 8618 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c78:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f000 821e 	beq.w	80030be <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8002c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c86:	f242 0101 	movw	r1, #8193	@ 0x2001
 8002c8a:	428a      	cmp	r2, r1
 8002c8c:	f173 0300 	sbcs.w	r3, r3, #0
 8002c90:	f080 8608 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c98:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	f000 8137 	beq.w	8002f10 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8002ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ca6:	f241 0101 	movw	r1, #4097	@ 0x1001
 8002caa:	428a      	cmp	r2, r1
 8002cac:	f173 0300 	sbcs.w	r3, r3, #0
 8002cb0:	f080 85f8 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb8:	1f11      	subs	r1, r2, #4
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	f000 80d2 	beq.w	8002e64 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8002cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cc4:	2a05      	cmp	r2, #5
 8002cc6:	f173 0300 	sbcs.w	r3, r3, #0
 8002cca:	f080 85eb 	bcs.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd2:	1e51      	subs	r1, r2, #1
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	d006      	beq.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8002cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cdc:	1e91      	subs	r1, r2, #2
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	d06c      	beq.n	8002dbc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8002ce2:	f000 bddf 	b.w	80038a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002ce6:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8002cf8:	f7ff fba2 	bl	8002440 <HAL_RCC_GetPCLK2Freq>
 8002cfc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8002cfe:	f000 bdd4 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8002d02:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d0e:	d10a      	bne.n	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002d16:	f107 030c 	add.w	r3, r7, #12
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fd26 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d24:	e048      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8002d26:	4b10      	ldr	r3, [pc, #64]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8002d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d109      	bne.n	8002d4c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002d38:	4b0b      	ldr	r3, [pc, #44]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	08db      	lsrs	r3, r3, #3
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d4a:	e035      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d119      	bne.n	8002d94 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d64:	e028      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8002d66:	bf00      	nop
 8002d68:	44020c00 	.word	0x44020c00
 8002d6c:	016e3600 	.word	0x016e3600
 8002d70:	20000001 	.word	0x20000001
 8002d74:	10000001 	.word	0x10000001
 8002d78:	08000001 	.word	0x08000001
 8002d7c:	04000001 	.word	0x04000001
 8002d80:	00200001 	.word	0x00200001
 8002d84:	00040001 	.word	0x00040001
 8002d88:	00020001 	.word	0x00020001
 8002d8c:	03d09000 	.word	0x03d09000
 8002d90:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8002d94:	4b9f      	ldr	r3, [pc, #636]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d106      	bne.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d103      	bne.n	8002db0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8002da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dae:	e003      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002db4:	f000 bd79 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002db8:	f000 bd77 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002dbc:	4b95      	ldr	r3, [pc, #596]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002dc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002dce:	f7ff fb21 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8002dd2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8002dd4:	f000 bd69 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002de0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002de4:	d10a      	bne.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d107      	bne.n	8002dfc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002dec:	f107 030c 	add.w	r3, r7, #12
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fcbb 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfa:	e031      	b.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8002dfc:	4b85      	ldr	r3, [pc, #532]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d10c      	bne.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	2b18      	cmp	r3, #24
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e0e:	4b81      	ldr	r3, [pc, #516]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	4a7f      	ldr	r2, [pc, #508]	@ (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e20:	e01e      	b.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8002e22:	4b7c      	ldr	r3, [pc, #496]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e2e:	d105      	bne.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	d102      	bne.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8002e36:	4b79      	ldr	r3, [pc, #484]	@ (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e3a:	e011      	b.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8002e3c:	4b75      	ldr	r3, [pc, #468]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d106      	bne.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8002e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4c:	2b28      	cmp	r3, #40	@ 0x28
 8002e4e:	d103      	bne.n	8002e58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8002e50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e56:	e003      	b.n	8002e60 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002e5c:	f000 bd25 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002e60:	f000 bd23 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002e64:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e6a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8002e6e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d104      	bne.n	8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002e76:	f7ff facd 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8002e7a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8002e7c:	f000 bd15 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8002e80:	4b64      	ldr	r3, [pc, #400]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8002e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e90:	2b40      	cmp	r3, #64	@ 0x40
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fc67 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea2:	e033      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8002ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d10c      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eb4:	d109      	bne.n	8002eca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002eb6:	4b57      	ldr	r3, [pc, #348]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	08db      	lsrs	r3, r3, #3
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	4a55      	ldr	r2, [pc, #340]	@ (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec8:	e020      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8002eca:	4b52      	ldr	r3, [pc, #328]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8002ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8002ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ee4:	e012      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8002ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8002ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002efa:	d103      	bne.n	8002f04 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8002efc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f02:	e003      	b.n	8002f0c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f08:	f000 bccf 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002f0c:	f000 bccd 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002f10:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f16:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8002f1a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8002f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d104      	bne.n	8002f2c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8002f22:	f7ff faa3 	bl	800246c <HAL_RCC_GetPCLK3Freq>
 8002f26:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8002f28:	f000 bcbf 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8002f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f32:	d108      	bne.n	8002f46 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fc17 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f42:	f000 bcb2 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8002f46:	4b33      	ldr	r3, [pc, #204]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8002f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f58:	d109      	bne.n	8002f6e <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	08db      	lsrs	r3, r3, #3
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	4a2c      	ldr	r2, [pc, #176]	@ (8003018 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f6c:	e020      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8002f6e:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8002f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f82:	d102      	bne.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8002f84:	4b25      	ldr	r3, [pc, #148]	@ (800301c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f88:	e012      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8002f8a:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d107      	bne.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002f9e:	d103      	bne.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8002fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa6:	e003      	b.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fac:	f000 bc7d 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002fb0:	f000 bc7b 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8002fb4:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8002fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d104      	bne.n	8002fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8002fc6:	f7ff fa09 	bl	80023dc <HAL_RCC_GetHCLKFreq>
 8002fca:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8002fcc:	f000 bc6d 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8002fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d104      	bne.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8002fd6:	f7ff f8d5 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002fda:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8002fdc:	f000 bc65 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fbbe 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ff4:	f000 bc59 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003000:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003004:	d10e      	bne.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8003006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003008:	2b03      	cmp	r3, #3
 800300a:	d10b      	bne.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 800300c:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003010:	e02c      	b.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8003012:	bf00      	nop
 8003014:	44020c00 	.word	0x44020c00
 8003018:	03d09000 	.word	0x03d09000
 800301c:	003d0900 	.word	0x003d0900
 8003020:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8003024:	4b95      	ldr	r3, [pc, #596]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b02      	cmp	r3, #2
 800302e:	d10c      	bne.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	2b04      	cmp	r3, #4
 8003034:	d109      	bne.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003036:	4b91      	ldr	r3, [pc, #580]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	4a8f      	ldr	r2, [pc, #572]	@ (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003048:	e010      	b.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800304a:	4b8c      	ldr	r3, [pc, #560]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003052:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003056:	d105      	bne.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	2b05      	cmp	r3, #5
 800305c:	d102      	bne.n	8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 800305e:	4b89      	ldr	r3, [pc, #548]	@ (8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003062:	e003      	b.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003068:	f000 bc1f 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800306c:	f000 bc1d 	b.w	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8003070:	4b82      	ldr	r3, [pc, #520]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003072:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800307c:	4b7f      	ldr	r3, [pc, #508]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d106      	bne.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800308a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d103      	bne.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8003090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003096:	e011      	b.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003098:	4b78      	ldr	r3, [pc, #480]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800309a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800309e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80030a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d103      	bne.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80030ae:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b4:	e002      	b.n	80030bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80030ba:	e3f6      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80030bc:	e3f5      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80030be:	4b6f      	ldr	r3, [pc, #444]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80030c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80030ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80030d0:	f7ff f9a0 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80030d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80030d6:	e3e8      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030de:	d107      	bne.n	80030f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb41 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030ee:	e3dc      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80030f0:	4b62      	ldr	r3, [pc, #392]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d10d      	bne.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003102:	d109      	bne.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003104:	4b5d      	ldr	r3, [pc, #372]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	4a5c      	ldr	r2, [pc, #368]	@ (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003116:	e010      	b.n	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003118:	4b58      	ldr	r3, [pc, #352]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003124:	d106      	bne.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800312c:	d102      	bne.n	8003134 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 800312e:	4b55      	ldr	r3, [pc, #340]	@ (8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003132:	e002      	b.n	800313a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003138:	e3b7      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800313a:	e3b6      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800313c:	4b4f      	ldr	r3, [pc, #316]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800313e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003142:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800314e:	f7ff f961 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003152:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003154:	e3a9      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800315c:	d107      	bne.n	800316e <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fb02 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800316c:	e39d      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800316e:	4b43      	ldr	r3, [pc, #268]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b02      	cmp	r3, #2
 8003178:	d10d      	bne.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800317a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003180:	d109      	bne.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	4a3c      	ldr	r2, [pc, #240]	@ (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003194:	e010      	b.n	80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8003196:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800319e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a2:	d106      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80031a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80031aa:	d102      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80031ac:	4b35      	ldr	r3, [pc, #212]	@ (8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b0:	e002      	b.n	80031b8 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031b6:	e378      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80031b8:	e377      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80031ba:	4b30      	ldr	r3, [pc, #192]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80031bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80031c0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80031c4:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80031c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7ff f922 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80031d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80031d2:	e36a      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80031d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031da:	d107      	bne.n	80031ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80031dc:	f107 030c 	add.w	r3, r7, #12
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fac3 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031ea:	e35e      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80031ec:	4b23      	ldr	r3, [pc, #140]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d10d      	bne.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 80031f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031fe:	d109      	bne.n	8003214 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003200:	4b1e      	ldr	r3, [pc, #120]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	4a1d      	ldr	r2, [pc, #116]	@ (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003212:	e34a      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003218:	e347      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800321a:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800321c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003220:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 8003226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d103      	bne.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800322c:	f7ff f91e 	bl	800246c <HAL_RCC_GetPCLK3Freq>
 8003230:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003232:	e33a      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800323a:	d107      	bne.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fa93 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800324a:	e32e      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 800324c:	4b0b      	ldr	r3, [pc, #44]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	d10d      	bne.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800325e:	d109      	bne.n	8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003260:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a05      	ldr	r2, [pc, #20]	@ (8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003272:	e31a      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003278:	e317      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800327a:	bf00      	nop
 800327c:	44020c00 	.word	0x44020c00
 8003280:	03d09000 	.word	0x03d09000
 8003284:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003288:	4b9b      	ldr	r3, [pc, #620]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800328a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800328e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003292:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800329a:	d044      	beq.n	8003326 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80032a2:	d879      	bhi.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80032a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d02d      	beq.n	8003308 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b2:	d871      	bhi.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ba:	d017      	beq.n	80032ec <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80032bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032c2:	d869      	bhi.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80032c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d004      	beq.n	80032d4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d0:	d004      	beq.n	80032dc <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80032d2:	e061      	b.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80032d4:	f7ff f8ca 	bl	800246c <HAL_RCC_GetPCLK3Freq>
 80032d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80032da:	e060      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fa43 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80032ea:	e058      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80032ec:	4b82      	ldr	r3, [pc, #520]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80032ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d103      	bne.n	8003302 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 80032fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003300:	e04d      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003306:	e04a      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003308:	4b7b      	ldr	r3, [pc, #492]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800330a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800330e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003316:	d103      	bne.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8003318:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800331e:	e03e      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003324:	e03b      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003326:	4b74      	ldr	r3, [pc, #464]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800332c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003330:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003332:	4b71      	ldr	r3, [pc, #452]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d10c      	bne.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003344:	4b6c      	ldr	r3, [pc, #432]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
 8003354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003356:	e01e      	b.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003358:	4b67      	ldr	r3, [pc, #412]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003360:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003364:	d106      	bne.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336c:	d102      	bne.n	8003374 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800336e:	4b64      	ldr	r3, [pc, #400]	@ (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003372:	e010      	b.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003374:	4b60      	ldr	r3, [pc, #384]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003380:	d106      	bne.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8003382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003384:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003388:	d102      	bne.n	8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800338a:	4b5e      	ldr	r3, [pc, #376]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338e:	e002      	b.n	8003396 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003394:	e003      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 8003396:	e002      	b.n	800339e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800339c:	bf00      	nop
          }
        }
        break;
 800339e:	e284      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80033a0:	4b55      	ldr	r3, [pc, #340]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80033a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80033aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80033b2:	d044      	beq.n	800343e <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80033ba:	d879      	bhi.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033c2:	d02d      	beq.n	8003420 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80033c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ca:	d871      	bhi.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033d2:	d017      	beq.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80033da:	d869      	bhi.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 80033e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033e8:	d004      	beq.n	80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80033ea:	e061      	b.n	80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80033ec:	f7ff f812 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 80033f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 80033f2:	e060      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033f4:	f107 030c 	add.w	r3, r7, #12
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f9b7 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003402:	e058      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003404:	4b3c      	ldr	r3, [pc, #240]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d103      	bne.n	800341a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003416:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003418:	e04d      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800341e:	e04a      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003420:	4b35      	ldr	r3, [pc, #212]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003426:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800342a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800342e:	d103      	bne.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8003430:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003436:	e03e      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800343c:	e03b      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800343e:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003444:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800344a:	4b2b      	ldr	r3, [pc, #172]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b02      	cmp	r3, #2
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800345c:	4b26      	ldr	r3, [pc, #152]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	08db      	lsrs	r3, r3, #3
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	4a25      	ldr	r2, [pc, #148]	@ (80034fc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800346e:	e01e      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003470:	4b21      	ldr	r3, [pc, #132]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800347c:	d106      	bne.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003484:	d102      	bne.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003486:	4b1e      	ldr	r3, [pc, #120]	@ (8003500 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8003488:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800348a:	e010      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800348c:	4b1a      	ldr	r3, [pc, #104]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003498:	d106      	bne.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034a0:	d102      	bne.n	80034a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80034a2:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034a6:	e002      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80034ac:	e003      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80034ae:	e002      	b.n	80034b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80034b4:	bf00      	nop
          }
        }
        break;
 80034b6:	e1f8      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80034ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80034be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034d0:	d105      	bne.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003504 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80034dc:	e1e5      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80034de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e4:	d110      	bne.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80034e6:	f107 0318 	add.w	r3, r7, #24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe ffd4 	bl	8002498 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80034f4:	e1d9      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80034f6:	bf00      	nop
 80034f8:	44020c00 	.word	0x44020c00
 80034fc:	03d09000 	.word	0x03d09000
 8003500:	003d0900 	.word	0x003d0900
 8003504:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800350e:	d107      	bne.n	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff f929 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800351e:	e1c4      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003524:	e1c1      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8003526:	4b9d      	ldr	r3, [pc, #628]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	2b04      	cmp	r3, #4
 8003536:	d859      	bhi.n	80035ec <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8003538:	a201      	add	r2, pc, #4	@ (adr r2, 8003540 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003555 	.word	0x08003555
 8003544:	08003565 	.word	0x08003565
 8003548:	080035ed 	.word	0x080035ed
 800354c:	08003575 	.word	0x08003575
 8003550:	0800357b 	.word	0x0800357b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	4618      	mov	r0, r3
 800355a:	f7fe ff9d 	bl	8002498 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003562:	e046      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003564:	f107 030c 	add.w	r3, r7, #12
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff f8ff 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003572:	e03e      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003574:	4b8a      	ldr	r3, [pc, #552]	@ (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003578:	e03b      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800357a:	4b88      	ldr	r3, [pc, #544]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800357c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003580:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003586:	4b85      	ldr	r3, [pc, #532]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003598:	4b80      	ldr	r3, [pc, #512]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	08db      	lsrs	r3, r3, #3
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	4a80      	ldr	r2, [pc, #512]	@ (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035aa:	e01e      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035ac:	4b7b      	ldr	r3, [pc, #492]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035b8:	d106      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c0:	d102      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80035c2:	4b79      	ldr	r3, [pc, #484]	@ (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80035c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c6:	e010      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80035c8:	4b74      	ldr	r3, [pc, #464]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035dc:	d102      	bne.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80035de:	4b73      	ldr	r3, [pc, #460]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035e2:	e002      	b.n	80035ea <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80035ea:	e002      	b.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80035f0:	bf00      	nop
          }
        }
        break;
 80035f2:	e15a      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80035f4:	4b69      	ldr	r3, [pc, #420]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	2b20      	cmp	r3, #32
 8003604:	d022      	beq.n	800364c <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	2b20      	cmp	r3, #32
 800360a:	d858      	bhi.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	2b18      	cmp	r3, #24
 8003610:	d019      	beq.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8003612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003614:	2b18      	cmp	r3, #24
 8003616:	d852      	bhi.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 800361e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003620:	2b08      	cmp	r3, #8
 8003622:	d008      	beq.n	8003636 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8003624:	e04b      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003626:	f107 0318 	add.w	r3, r7, #24
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe ff34 	bl	8002498 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003634:	e046      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f896 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003644:	e03e      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003646:	4b56      	ldr	r3, [pc, #344]	@ (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800364a:	e03b      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800364c:	4b53      	ldr	r3, [pc, #332]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800364e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003652:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003658:	4b50      	ldr	r3, [pc, #320]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d10c      	bne.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800366a:	4b4c      	ldr	r3, [pc, #304]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	08db      	lsrs	r3, r3, #3
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367c:	e01e      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800367e:	4b47      	ldr	r3, [pc, #284]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800368a:	d106      	bne.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003692:	d102      	bne.n	800369a <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8003694:	4b44      	ldr	r3, [pc, #272]	@ (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8003696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003698:	e010      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800369a:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036a6:	d106      	bne.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036ae:	d102      	bne.n	80036b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80036b0:	4b3e      	ldr	r3, [pc, #248]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036b4:	e002      	b.n	80036bc <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80036ba:	e003      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80036bc:	e002      	b.n	80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80036c2:	bf00      	nop
          }
        }
        break;
 80036c4:	e0f1      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80036c6:	4b35      	ldr	r3, [pc, #212]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80036c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036cc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80036d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036d8:	d023      	beq.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80036da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e0:	d858      	bhi.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80036e6:	d019      	beq.n	800371c <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80036ec:	d852      	bhi.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 80036f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f6:	2b40      	cmp	r3, #64	@ 0x40
 80036f8:	d008      	beq.n	800370c <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 80036fa:	e04b      	b.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80036fc:	f107 0318 	add.w	r3, r7, #24
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fec9 	bl	8002498 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800370a:	e046      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff f82b 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800371a:	e03e      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800371c:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003720:	e03b      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003722:	4b1e      	ldr	r3, [pc, #120]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003728:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800372e:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003740:	4b16      	ldr	r3, [pc, #88]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003752:	e01e      	b.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800375c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003760:	d106      	bne.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003768:	d102      	bne.n	8003770 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800376a:	4b0f      	ldr	r3, [pc, #60]	@ (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800376e:	e010      	b.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003770:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800377c:	d106      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003784:	d102      	bne.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8003788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800378a:	e002      	b.n	8003792 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003790:	e003      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8003792:	e002      	b.n	800379a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003798:	bf00      	nop
          }
        }
        break;
 800379a:	e086      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800379c:	44020c00 	.word	0x44020c00
 80037a0:	00bb8000 	.word	0x00bb8000
 80037a4:	03d09000 	.word	0x03d09000
 80037a8:	003d0900 	.word	0x003d0900
 80037ac:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80037b0:	4b40      	ldr	r3, [pc, #256]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80037b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037ba:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80037bc:	4b3d      	ldr	r3, [pc, #244]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c8:	d105      	bne.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 80037d0:	4b39      	ldr	r3, [pc, #228]	@ (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 80037d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d4:	e031      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80037d6:	4b37      	ldr	r3, [pc, #220]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037e2:	d10a      	bne.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 80037e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d107      	bne.n	80037fa <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80037ea:	f107 0318 	add.w	r3, r7, #24
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fe52 	bl	8002498 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037f8:	e01f      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80037fa:	4b2e      	ldr	r3, [pc, #184]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80037fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b02      	cmp	r3, #2
 8003806:	d106      	bne.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	2b20      	cmp	r3, #32
 800380c:	d103      	bne.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003814:	e011      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8003816:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800381c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003820:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003824:	d106      	bne.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8003826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003828:	2b30      	cmp	r3, #48	@ 0x30
 800382a:	d103      	bne.n	8003834 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 800382c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003832:	e002      	b.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8003838:	e037      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800383a:	e036      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800383c:	4b1d      	ldr	r3, [pc, #116]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800383e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003842:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b10      	cmp	r3, #16
 800384c:	d107      	bne.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800384e:	f107 0318 	add.w	r3, r7, #24
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fe20 	bl	8002498 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 800385c:	e025      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800386a:	d10a      	bne.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2b20      	cmp	r3, #32
 8003870:	d107      	bne.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003872:	f107 030c 	add.w	r3, r7, #12
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe ff78 	bl	800276c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003880:	e00f      	b.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8003882:	4b0c      	ldr	r3, [pc, #48]	@ (80038b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800388a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800388e:	d105      	bne.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8003890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003892:	2b30      	cmp	r3, #48	@ 0x30
 8003894:	d102      	bne.n	800389c <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8003896:	4b08      	ldr	r3, [pc, #32]	@ (80038b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8003898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389a:	e002      	b.n	80038a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80038a2:	e002      	b.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038a8:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3730      	adds	r7, #48	@ 0x30
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	44020c00 	.word	0x44020c00
 80038b8:	02dc6c00 	.word	0x02dc6c00

080038bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e042      	b.n	8003954 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f83b 	bl	800395c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2224      	movs	r2, #36	@ 0x24
 80038ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9b0 	bl	8003c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f82f 	bl	8003970 <UART_SetConfig>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e01b      	b.n	8003954 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800392a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800393a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fa2f 	bl	8003db0 <UART_CheckIdleState>
 8003952:	4603      	mov	r3, r0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b094      	sub	sp, #80	@ 0x50
 8003976:	af00      	add	r7, sp, #0
 8003978:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	431a      	orrs	r2, r3
 800398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	431a      	orrs	r2, r3
 8003990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4313      	orrs	r3, r2
 8003996:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	498a      	ldr	r1, [pc, #552]	@ (8003bc8 <UART_SetConfig+0x258>)
 80039a0:	4019      	ands	r1, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	68d9      	ldr	r1, [r3, #12]
 80039ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	ea40 0301 	orr.w	r3, r0, r1
 80039c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b7f      	ldr	r3, [pc, #508]	@ (8003bcc <UART_SetConfig+0x25c>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d004      	beq.n	80039de <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039da:	4313      	orrs	r3, r2
 80039dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80039e8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80039ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f2:	430b      	orrs	r3, r1
 80039f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	f023 000f 	bic.w	r0, r3, #15
 8003a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	ea40 0301 	orr.w	r3, r0, r1
 8003a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd0 <UART_SetConfig+0x260>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d102      	bne.n	8003a1e <UART_SetConfig+0xae>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1c:	e01a      	b.n	8003a54 <UART_SetConfig+0xe4>
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b6c      	ldr	r3, [pc, #432]	@ (8003bd4 <UART_SetConfig+0x264>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d102      	bne.n	8003a2e <UART_SetConfig+0xbe>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	e012      	b.n	8003a54 <UART_SetConfig+0xe4>
 8003a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b69      	ldr	r3, [pc, #420]	@ (8003bd8 <UART_SetConfig+0x268>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d102      	bne.n	8003a3e <UART_SetConfig+0xce>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a3c:	e00a      	b.n	8003a54 <UART_SetConfig+0xe4>
 8003a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b62      	ldr	r3, [pc, #392]	@ (8003bcc <UART_SetConfig+0x25c>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d103      	bne.n	8003a50 <UART_SetConfig+0xe0>
 8003a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a4e:	e001      	b.n	8003a54 <UART_SetConfig+0xe4>
 8003a50:	2300      	movs	r3, #0
 8003a52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <UART_SetConfig+0x25c>)
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d171      	bne.n	8003b42 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a60:	2200      	movs	r2, #0
 8003a62:	623b      	str	r3, [r7, #32]
 8003a64:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a6a:	f7fe ffe9 	bl	8002a40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a6e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80e2 	beq.w	8003c3c <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7c:	4a57      	ldr	r2, [pc, #348]	@ (8003bdc <UART_SetConfig+0x26c>)
 8003a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a8a:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d305      	bcc.n	8003aa8 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003aa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d903      	bls.n	8003ab0 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003aae:	e0c5      	b.n	8003c3c <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	61fa      	str	r2, [r7, #28]
 8003ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	4a47      	ldr	r2, [pc, #284]	@ (8003bdc <UART_SetConfig+0x26c>)
 8003abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	617a      	str	r2, [r7, #20]
 8003aca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ace:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003ad2:	f7fc fbe1 	bl	8000298 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4610      	mov	r0, r2
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	020b      	lsls	r3, r1, #8
 8003ae8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aec:	0202      	lsls	r2, r0, #8
 8003aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af0:	6849      	ldr	r1, [r1, #4]
 8003af2:	0849      	lsrs	r1, r1, #1
 8003af4:	2000      	movs	r0, #0
 8003af6:	460c      	mov	r4, r1
 8003af8:	4605      	mov	r5, r0
 8003afa:	eb12 0804 	adds.w	r8, r2, r4
 8003afe:	eb43 0905 	adc.w	r9, r3, r5
 8003b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	60fa      	str	r2, [r7, #12]
 8003b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b10:	4640      	mov	r0, r8
 8003b12:	4649      	mov	r1, r9
 8003b14:	f7fc fbc0 	bl	8000298 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b26:	d308      	bcc.n	8003b3a <UART_SetConfig+0x1ca>
 8003b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b2e:	d204      	bcs.n	8003b3a <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8003b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e080      	b.n	8003c3c <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003b40:	e07c      	b.n	8003c3c <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b4a:	d149      	bne.n	8003be0 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b4e:	2200      	movs	r2, #0
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b58:	f7fe ff72 	bl	8002a40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b5c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d06b      	beq.n	8003c3c <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <UART_SetConfig+0x26c>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b72:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b76:	005a      	lsls	r2, r3, #1
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	441a      	add	r2, r3
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8c:	2b0f      	cmp	r3, #15
 8003b8e:	d916      	bls.n	8003bbe <UART_SetConfig+0x24e>
 8003b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b96:	d212      	bcs.n	8003bbe <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f023 030f 	bic.w	r3, r3, #15
 8003ba0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8003bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	e03e      	b.n	8003c3c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003bc4:	e03a      	b.n	8003c3c <UART_SetConfig+0x2cc>
 8003bc6:	bf00      	nop
 8003bc8:	cfff69f3 	.word	0xcfff69f3
 8003bcc:	44002400 	.word	0x44002400
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40004400 	.word	0x40004400
 8003bd8:	40004800 	.word	0x40004800
 8003bdc:	08004138 	.word	0x08004138
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003be0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003be2:	2200      	movs	r2, #0
 8003be4:	469a      	mov	sl, r3
 8003be6:	4693      	mov	fp, r2
 8003be8:	4650      	mov	r0, sl
 8003bea:	4659      	mov	r1, fp
 8003bec:	f7fe ff28 	bl	8002a40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003bf0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d021      	beq.n	8003c3c <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8003c68 <UART_SetConfig+0x2f8>)
 8003bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c06:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	441a      	add	r2, r3
 8003c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d909      	bls.n	8003c36 <UART_SetConfig+0x2c6>
 8003c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c28:	d205      	bcs.n	8003c36 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	e002      	b.n	8003c3c <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	2201      	movs	r2, #1
 8003c48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4e:	2200      	movs	r2, #0
 8003c50:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c54:	2200      	movs	r2, #0
 8003c56:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c58:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3750      	adds	r7, #80	@ 0x50
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c66:	bf00      	nop
 8003c68:	08004138 	.word	0x08004138

08003c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01a      	beq.n	8003d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d6a:	d10a      	bne.n	8003d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	605a      	str	r2, [r3, #4]
  }
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b098      	sub	sp, #96	@ 0x60
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc0:	f7fd f824 	bl	8000e0c <HAL_GetTick>
 8003dc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d12f      	bne.n	8003e34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f88e 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d022      	beq.n	8003e34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e063      	b.n	8003efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d149      	bne.n	8003ed6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f857 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03c      	beq.n	8003ed6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	e853 3f00 	ldrex	r3, [r3]
 8003e68:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e6      	bne.n	8003e5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eae:	61fa      	str	r2, [r7, #28]
 8003eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	69b9      	ldr	r1, [r7, #24]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	617b      	str	r3, [r7, #20]
   return(result);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e5      	bne.n	8003e8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e012      	b.n	8003efc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3758      	adds	r7, #88	@ 0x58
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	e04f      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d04b      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7fc ff75 	bl	8000e0c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e04e      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d037      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b80      	cmp	r3, #128	@ 0x80
 8003f4a:	d034      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d031      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d110      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f838 	bl	8003fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2208      	movs	r2, #8
 8003f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e029      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f90:	d111      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f81e 	bl	8003fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00f      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d0a0      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b095      	sub	sp, #84	@ 0x54
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004004:	643b      	str	r3, [r7, #64]	@ 0x40
 8004006:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800400a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e6      	bne.n	8003fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	61fb      	str	r3, [r7, #28]
   return(result);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3308      	adds	r3, #8
 800403a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800403c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e3      	bne.n	8004018 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d118      	bne.n	800408a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	60bb      	str	r3, [r7, #8]
   return(result);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f023 0310 	bic.w	r3, r3, #16
 800406c:	647b      	str	r3, [r7, #68]	@ 0x44
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6979      	ldr	r1, [r7, #20]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800409e:	bf00      	nop
 80040a0:	3754      	adds	r7, #84	@ 0x54
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <memset>:
 80040aa:	4402      	add	r2, r0
 80040ac:	4603      	mov	r3, r0
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d100      	bne.n	80040b4 <memset+0xa>
 80040b2:	4770      	bx	lr
 80040b4:	f803 1b01 	strb.w	r1, [r3], #1
 80040b8:	e7f9      	b.n	80040ae <memset+0x4>
	...

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4d0d      	ldr	r5, [pc, #52]	@ (80040f4 <__libc_init_array+0x38>)
 80040c0:	2600      	movs	r6, #0
 80040c2:	4c0d      	ldr	r4, [pc, #52]	@ (80040f8 <__libc_init_array+0x3c>)
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	4d0b      	ldr	r5, [pc, #44]	@ (80040fc <__libc_init_array+0x40>)
 80040ce:	2600      	movs	r6, #0
 80040d0:	4c0b      	ldr	r4, [pc, #44]	@ (8004100 <__libc_init_array+0x44>)
 80040d2:	f000 f817 	bl	8004104 <_init>
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e4:	3601      	adds	r6, #1
 80040e6:	4798      	blx	r3
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ee:	3601      	adds	r6, #1
 80040f0:	4798      	blx	r3
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	08004158 	.word	0x08004158
 80040f8:	08004158 	.word	0x08004158
 80040fc:	08004158 	.word	0x08004158
 8004100:	08004160 	.word	0x08004160

08004104 <_init>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	bf00      	nop
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr

08004110 <_fini>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr
