
PCBRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  08000258  08000258  00001258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005270  08005270  0000707c  2**0
                  CONTENTS
  4 .ARM          00000008  08005270  08005270  00006270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005278  08005278  0000707c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005278  08005278  00006278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800527c  0800527c  0000627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08005280  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000007c  080052fc  0000707c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080052fc  000072a4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000707c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e359  00000000  00000000  000070b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c48  00000000  00000000  0001540b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00017058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c6  00000000  00000000  00017a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002359c  00000000  00000000  00018256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f03e  00000000  00000000  0003b7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6bb4  00000000  00000000  0004a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001113e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  00111428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00114500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000007c 	.word	0x2000007c
 8000274:	00000000 	.word	0x00000000
 8000278:	080051d4 	.word	0x080051d4

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000080 	.word	0x20000080
 8000294:	080051d4 	.word	0x080051d4

08000298 <__aeabi_uldivmod>:
 8000298:	b953      	cbnz	r3, 80002b0 <__aeabi_uldivmod+0x18>
 800029a:	b94a      	cbnz	r2, 80002b0 <__aeabi_uldivmod+0x18>
 800029c:	2900      	cmp	r1, #0
 800029e:	bf08      	it	eq
 80002a0:	2800      	cmpeq	r0, #0
 80002a2:	bf1c      	itt	ne
 80002a4:	f04f 31ff 	movne.w	r1, #4294967295
 80002a8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ac:	f000 b97e 	b.w	80005ac <__aeabi_idiv0>
 80002b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b8:	f000 f806 	bl	80002c8 <__udivmoddi4>
 80002bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c4:	b004      	add	sp, #16
 80002c6:	4770      	bx	lr

080002c8 <__udivmoddi4>:
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002cc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ce:	460c      	mov	r4, r1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d14d      	bne.n	8000370 <__udivmoddi4+0xa8>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	460f      	mov	r7, r1
 80002d8:	4684      	mov	ip, r0
 80002da:	4696      	mov	lr, r2
 80002dc:	fab2 f382 	clz	r3, r2
 80002e0:	d960      	bls.n	80003a4 <__udivmoddi4+0xdc>
 80002e2:	b14b      	cbz	r3, 80002f8 <__udivmoddi4+0x30>
 80002e4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002e8:	f1c3 0220 	rsb	r2, r3, #32
 80002ec:	409f      	lsls	r7, r3
 80002ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f2:	fa20 f202 	lsr.w	r2, r0, r2
 80002f6:	4317      	orrs	r7, r2
 80002f8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002fc:	fa1f f48e 	uxth.w	r4, lr
 8000300:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000304:	fbb7 f1f6 	udiv	r1, r7, r6
 8000308:	fb06 7711 	mls	r7, r6, r1, r7
 800030c:	fb01 f004 	mul.w	r0, r1, r4
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x62>
 8000318:	eb1e 0202 	adds.w	r2, lr, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x60>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 812d 	bhi.w	8000582 <__udivmoddi4+0x2ba>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	fa1f fc8c 	uxth.w	ip, ip
 8000330:	fbb2 f0f6 	udiv	r0, r2, r6
 8000334:	fb06 2210 	mls	r2, r6, r0, r2
 8000338:	fb00 f404 	mul.w	r4, r0, r4
 800033c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000340:	4564      	cmp	r4, ip
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x8e>
 8000344:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x8c>
 800034e:	4564      	cmp	r4, ip
 8000350:	f200 811a 	bhi.w	8000588 <__udivmoddi4+0x2c0>
 8000354:	4610      	mov	r0, r2
 8000356:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035a:	ebac 0c04 	sub.w	ip, ip, r4
 800035e:	2100      	movs	r1, #0
 8000360:	b125      	cbz	r5, 800036c <__udivmoddi4+0xa4>
 8000362:	fa2c f303 	lsr.w	r3, ip, r3
 8000366:	2200      	movs	r2, #0
 8000368:	e9c5 3200 	strd	r3, r2, [r5]
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	428b      	cmp	r3, r1
 8000372:	d905      	bls.n	8000380 <__udivmoddi4+0xb8>
 8000374:	b10d      	cbz	r5, 800037a <__udivmoddi4+0xb2>
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	2100      	movs	r1, #0
 800037c:	4608      	mov	r0, r1
 800037e:	e7f5      	b.n	800036c <__udivmoddi4+0xa4>
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14d      	bne.n	8000424 <__udivmoddi4+0x15c>
 8000388:	42a3      	cmp	r3, r4
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2aa>
 800038e:	4290      	cmp	r0, r2
 8000390:	f080 80ef 	bcs.w	8000572 <__udivmoddi4+0x2aa>
 8000394:	4606      	mov	r6, r0
 8000396:	4623      	mov	r3, r4
 8000398:	4608      	mov	r0, r1
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e6      	beq.n	800036c <__udivmoddi4+0xa4>
 800039e:	e9c5 6300 	strd	r6, r3, [r5]
 80003a2:	e7e3      	b.n	800036c <__udivmoddi4+0xa4>
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	f040 80a2 	bne.w	80004ee <__udivmoddi4+0x226>
 80003aa:	1a8a      	subs	r2, r1, r2
 80003ac:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b0:	fa1f f68e 	uxth.w	r6, lr
 80003b4:	2101      	movs	r1, #1
 80003b6:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ba:	fb07 2014 	mls	r0, r7, r4, r2
 80003be:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c6:	fb06 f004 	mul.w	r0, r6, r4
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d90f      	bls.n	80003ee <__udivmoddi4+0x126>
 80003ce:	eb1e 0202 	adds.w	r2, lr, r2
 80003d2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003d6:	bf2c      	ite	cs
 80003d8:	f04f 0901 	movcs.w	r9, #1
 80003dc:	f04f 0900 	movcc.w	r9, #0
 80003e0:	4290      	cmp	r0, r2
 80003e2:	d903      	bls.n	80003ec <__udivmoddi4+0x124>
 80003e4:	f1b9 0f00 	cmp.w	r9, #0
 80003e8:	f000 80c8 	beq.w	800057c <__udivmoddi4+0x2b4>
 80003ec:	4644      	mov	r4, r8
 80003ee:	1a12      	subs	r2, r2, r0
 80003f0:	fa1f fc8c 	uxth.w	ip, ip
 80003f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003f8:	fb07 2210 	mls	r2, r7, r0, r2
 80003fc:	fb00 f606 	mul.w	r6, r0, r6
 8000400:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000404:	4566      	cmp	r6, ip
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x152>
 8000408:	eb1e 0c0c 	adds.w	ip, lr, ip
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x150>
 8000412:	4566      	cmp	r6, ip
 8000414:	f200 80bb 	bhi.w	800058e <__udivmoddi4+0x2c6>
 8000418:	4610      	mov	r0, r2
 800041a:	ebac 0c06 	sub.w	ip, ip, r6
 800041e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000422:	e79d      	b.n	8000360 <__udivmoddi4+0x98>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa04 fe01 	lsl.w	lr, r4, r1
 800042e:	fa22 f706 	lsr.w	r7, r2, r6
 8000432:	fa20 fc06 	lsr.w	ip, r0, r6
 8000436:	40f4      	lsrs	r4, r6
 8000438:	408a      	lsls	r2, r1
 800043a:	431f      	orrs	r7, r3
 800043c:	ea4e 030c 	orr.w	r3, lr, ip
 8000440:	fa00 fe01 	lsl.w	lr, r0, r1
 8000444:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fbb4 f0f8 	udiv	r0, r4, r8
 8000454:	fb08 4410 	mls	r4, r8, r0, r4
 8000458:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045c:	fb00 f90c 	mul.w	r9, r0, ip
 8000460:	45a1      	cmp	r9, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1ba>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f100 3aff 	add.w	sl, r0, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a1      	cmp	r9, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b8>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 8093 	beq.w	80005a6 <__udivmoddi4+0x2de>
 8000480:	4650      	mov	r0, sl
 8000482:	eba4 0409 	sub.w	r4, r4, r9
 8000486:	fa1f f983 	uxth.w	r9, r3
 800048a:	fbb4 f3f8 	udiv	r3, r4, r8
 800048e:	fb08 4413 	mls	r4, r8, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d906      	bls.n	80004ac <__udivmoddi4+0x1e4>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x1e2>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d87a      	bhi.n	80005a0 <__udivmoddi4+0x2d8>
 80004aa:	4643      	mov	r3, r8
 80004ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b0:	eba4 040c 	sub.w	r4, r4, ip
 80004b4:	fba0 9802 	umull	r9, r8, r0, r2
 80004b8:	4544      	cmp	r4, r8
 80004ba:	46cc      	mov	ip, r9
 80004bc:	4643      	mov	r3, r8
 80004be:	d302      	bcc.n	80004c6 <__udivmoddi4+0x1fe>
 80004c0:	d106      	bne.n	80004d0 <__udivmoddi4+0x208>
 80004c2:	45ce      	cmp	lr, r9
 80004c4:	d204      	bcs.n	80004d0 <__udivmoddi4+0x208>
 80004c6:	3801      	subs	r0, #1
 80004c8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004cc:	eb68 0307 	sbc.w	r3, r8, r7
 80004d0:	b15d      	cbz	r5, 80004ea <__udivmoddi4+0x222>
 80004d2:	ebbe 020c 	subs.w	r2, lr, ip
 80004d6:	eb64 0403 	sbc.w	r4, r4, r3
 80004da:	fa04 f606 	lsl.w	r6, r4, r6
 80004de:	fa22 f301 	lsr.w	r3, r2, r1
 80004e2:	40cc      	lsrs	r4, r1
 80004e4:	431e      	orrs	r6, r3
 80004e6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ea:	2100      	movs	r1, #0
 80004ec:	e73e      	b.n	800036c <__udivmoddi4+0xa4>
 80004ee:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f2:	f1c3 0120 	rsb	r1, r3, #32
 80004f6:	fa04 f203 	lsl.w	r2, r4, r3
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000504:	fa20 f101 	lsr.w	r1, r0, r1
 8000508:	fa1f f68e 	uxth.w	r6, lr
 800050c:	fbb4 f0f7 	udiv	r0, r4, r7
 8000510:	430a      	orrs	r2, r1
 8000512:	fb07 4410 	mls	r4, r7, r0, r4
 8000516:	0c11      	lsrs	r1, r2, #16
 8000518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800051c:	fb00 f406 	mul.w	r4, r0, r6
 8000520:	428c      	cmp	r4, r1
 8000522:	d90e      	bls.n	8000542 <__udivmoddi4+0x27a>
 8000524:	eb1e 0101 	adds.w	r1, lr, r1
 8000528:	f100 38ff 	add.w	r8, r0, #4294967295
 800052c:	bf2c      	ite	cs
 800052e:	f04f 0901 	movcs.w	r9, #1
 8000532:	f04f 0900 	movcc.w	r9, #0
 8000536:	428c      	cmp	r4, r1
 8000538:	d902      	bls.n	8000540 <__udivmoddi4+0x278>
 800053a:	f1b9 0f00 	cmp.w	r9, #0
 800053e:	d02c      	beq.n	800059a <__udivmoddi4+0x2d2>
 8000540:	4640      	mov	r0, r8
 8000542:	1b09      	subs	r1, r1, r4
 8000544:	b292      	uxth	r2, r2
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	fb07 1114 	mls	r1, r7, r4, r1
 800054e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000552:	fb04 f106 	mul.w	r1, r4, r6
 8000556:	4291      	cmp	r1, r2
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x2a2>
 800055a:	eb1e 0202 	adds.w	r2, lr, r2
 800055e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000562:	d201      	bcs.n	8000568 <__udivmoddi4+0x2a0>
 8000564:	4291      	cmp	r1, r2
 8000566:	d815      	bhi.n	8000594 <__udivmoddi4+0x2cc>
 8000568:	4644      	mov	r4, r8
 800056a:	1a52      	subs	r2, r2, r1
 800056c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000570:	e721      	b.n	80003b6 <__udivmoddi4+0xee>
 8000572:	1a86      	subs	r6, r0, r2
 8000574:	eb64 0303 	sbc.w	r3, r4, r3
 8000578:	2001      	movs	r0, #1
 800057a:	e70e      	b.n	800039a <__udivmoddi4+0xd2>
 800057c:	3c02      	subs	r4, #2
 800057e:	4472      	add	r2, lr
 8000580:	e735      	b.n	80003ee <__udivmoddi4+0x126>
 8000582:	3902      	subs	r1, #2
 8000584:	4472      	add	r2, lr
 8000586:	e6d0      	b.n	800032a <__udivmoddi4+0x62>
 8000588:	44f4      	add	ip, lr
 800058a:	3802      	subs	r0, #2
 800058c:	e6e3      	b.n	8000356 <__udivmoddi4+0x8e>
 800058e:	44f4      	add	ip, lr
 8000590:	3802      	subs	r0, #2
 8000592:	e742      	b.n	800041a <__udivmoddi4+0x152>
 8000594:	3c02      	subs	r4, #2
 8000596:	4472      	add	r2, lr
 8000598:	e7e7      	b.n	800056a <__udivmoddi4+0x2a2>
 800059a:	3802      	subs	r0, #2
 800059c:	4471      	add	r1, lr
 800059e:	e7d0      	b.n	8000542 <__udivmoddi4+0x27a>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	443c      	add	r4, r7
 80005a4:	e782      	b.n	80004ac <__udivmoddi4+0x1e4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e76a      	b.n	8000482 <__udivmoddi4+0x1ba>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fc2c 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f838 	bl	800062c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fa3b 	bl	8000a38 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005c2:	2101      	movs	r1, #1
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 fab7 	bl	8000b38 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <main+0x74>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <main+0x74>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <main+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80005de:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <main+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <main+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80005ea:	490e      	ldr	r1, [pc, #56]	@ (8000624 <main+0x74>)
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fb31 	bl	8000c54 <BSP_COM_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <main+0x56>
  {
    Error_Handler();
 8000602:	f000 f897 	bl	8000734 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000606:	4808      	ldr	r0, [pc, #32]	@ (8000628 <main+0x78>)
 8000608:	f003 ff64 	bl	80044d4 <iprintf>

  /* -- Sample board code to switch on led ---- */
  BSP_LED_On(LED_GREEN);
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fa57 	bl	8000ac0 <BSP_LED_On>
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */


      HAL_Delay(200);
 8000612:	20c8      	movs	r0, #200	@ 0xc8
 8000614:	f000 fcba 	bl	8000f8c <HAL_Delay>
      /* -- Sample board code to toggle led ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fa6f 	bl	8000afc <BSP_LED_Toggle>
      HAL_Delay(200);
 800061e:	bf00      	nop
 8000620:	e7f7      	b.n	8000612 <main+0x62>
 8000622:	bf00      	nop
 8000624:	20000098 	.word	0x20000098
 8000628:	080051ec 	.word	0x080051ec

0800062c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	@ 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2250      	movs	r2, #80	@ 0x50
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 ff9f 	bl	800457e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000652:	4b2c      	ldr	r3, [pc, #176]	@ (8000704 <_Z18SystemClock_Configv+0xd8>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	4a2b      	ldr	r2, [pc, #172]	@ (8000704 <_Z18SystemClock_Configv+0xd8>)
 8000658:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800065c:	6113      	str	r3, [r2, #16]
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <_Z18SystemClock_Configv+0xd8>)
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066a:	bf00      	nop
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <_Z18SystemClock_Configv+0xd8>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	2b08      	cmp	r3, #8
 8000676:	bf14      	ite	ne
 8000678:	2301      	movne	r3, #1
 800067a:	2300      	moveq	r3, #0
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f4      	bne.n	800066c <_Z18SystemClock_Configv+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000692:	2300      	movs	r3, #0
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f836 	bl	800170c <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	bf14      	ite	ne
 80006a6:	2301      	movne	r3, #1
 80006a8:	2300      	moveq	r3, #0
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80006b0:	f000 f840 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	231f      	movs	r3, #31
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 fc52 	bl	8001f7c <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 80006e8:	f000 f824 	bl	8000734 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <_Z18SystemClock_Configv+0xdc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80006f4:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <_Z18SystemClock_Configv+0xdc>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	3770      	adds	r7, #112	@ 0x70
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	44020800 	.word	0x44020800
 8000708:	40022000 	.word	0x40022000

0800070c <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d102      	bne.n	8000722 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 800071c:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <BSP_PB_Callback+0x24>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200000a8 	.word	0x200000a8

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000752:	bf00      	nop
 8000754:	e7fd      	b.n	8000752 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	bf00      	nop
 800075c:	e7fd      	b.n	800075a <HardFault_Handler+0x4>

0800075e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <BusFault_Handler+0x4>

0800076e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000772:	bf00      	nop
 8000774:	e7fd      	b.n	8000772 <UsageFault_Handler+0x4>

08000776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 fbd2 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 fa39 	bl	8000c28 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b086      	sub	sp, #24
 80007be:	af00      	add	r7, sp, #0
 80007c0:	60f8      	str	r0, [r7, #12]
 80007c2:	60b9      	str	r1, [r7, #8]
 80007c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e00a      	b.n	80007e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007cc:	f3af 8000 	nop.w
 80007d0:	4601      	mov	r1, r0
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	60ba      	str	r2, [r7, #8]
 80007d8:	b2ca      	uxtb	r2, r1
 80007da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	3301      	adds	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	dbf0      	blt.n	80007cc <_read+0x12>
  }

  return len;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e009      	b.n	800081a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	60ba      	str	r2, [r7, #8]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 fa84 	bl	8000d1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697a      	ldr	r2, [r7, #20]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	429a      	cmp	r2, r3
 8000820:	dbf1      	blt.n	8000806 <_write+0x12>
  }
  return len;
 8000822:	687b      	ldr	r3, [r7, #4]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <_close>:

int _close(int file)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000854:	605a      	str	r2, [r3, #4]
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_isatty>:

int _isatty(int file)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800089c:	4a14      	ldr	r2, [pc, #80]	@ (80008f0 <_sbrk+0x5c>)
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <_sbrk+0x60>)
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <_sbrk+0x64>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <_sbrk+0x64>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <_sbrk+0x68>)
 80008b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008b6:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	693a      	ldr	r2, [r7, #16]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d207      	bcs.n	80008d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c4:	f003 feaa 	bl	800461c <__errno>
 80008c8:	4603      	mov	r3, r0
 80008ca:	220c      	movs	r2, #12
 80008cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ce:	f04f 33ff 	mov.w	r3, #4294967295
 80008d2:	e009      	b.n	80008e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d4:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <_sbrk+0x64>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008da:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <_sbrk+0x64>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4413      	add	r3, r2
 80008e2:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <_sbrk+0x64>)
 80008e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20008000 	.word	0x20008000
 80008f4:	00000400 	.word	0x00000400
 80008f8:	200000ac 	.word	0x200000ac
 80008fc:	200002a8 	.word	0x200002a8

08000900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <SystemInit+0xc8>)
 8000908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090c:	4a2e      	ldr	r2, [pc, #184]	@ (80009c8 <SystemInit+0xc8>)
 800090e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000912:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <SystemInit+0xcc>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800091c:	4b2b      	ldr	r3, [pc, #172]	@ (80009cc <SystemInit+0xcc>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <SystemInit+0xcc>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000928:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <SystemInit+0xcc>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4927      	ldr	r1, [pc, #156]	@ (80009cc <SystemInit+0xcc>)
 800092e:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <SystemInit+0xd0>)
 8000930:	4013      	ands	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000934:	4b25      	ldr	r3, [pc, #148]	@ (80009cc <SystemInit+0xcc>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800093a:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <SystemInit+0xcc>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000940:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <SystemInit+0xcc>)
 8000942:	4a24      	ldr	r2, [pc, #144]	@ (80009d4 <SystemInit+0xd4>)
 8000944:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000946:	4b21      	ldr	r3, [pc, #132]	@ (80009cc <SystemInit+0xcc>)
 8000948:	2200      	movs	r2, #0
 800094a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <SystemInit+0xcc>)
 800094e:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <SystemInit+0xd4>)
 8000950:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <SystemInit+0xcc>)
 8000954:	2200      	movs	r2, #0
 8000956:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <SystemInit+0xcc>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <SystemInit+0xcc>)
 800095e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000964:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <SystemInit+0xcc>)
 8000966:	2200      	movs	r2, #0
 8000968:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800096a:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <SystemInit+0xc8>)
 800096c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000970:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <SystemInit+0xd8>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800097a:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000982:	d003      	beq.n	800098c <SystemInit+0x8c>
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800098a:	d117      	bne.n	80009bc <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <SystemInit+0xd8>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d005      	beq.n	80009a4 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <SystemInit+0xd8>)
 800099a:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <SystemInit+0xdc>)
 800099c:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <SystemInit+0xd8>)
 80009a0:	4a0f      	ldr	r2, [pc, #60]	@ (80009e0 <SystemInit+0xe0>)
 80009a2:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <SystemInit+0xd8>)
 80009a6:	69db      	ldr	r3, [r3, #28]
 80009a8:	4a0b      	ldr	r2, [pc, #44]	@ (80009d8 <SystemInit+0xd8>)
 80009aa:	f043 0302 	orr.w	r3, r3, #2
 80009ae:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <SystemInit+0xd8>)
 80009b2:	69db      	ldr	r3, [r3, #28]
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <SystemInit+0xd8>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	61d3      	str	r3, [r2, #28]
  }
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00
 80009cc:	44020c00 	.word	0x44020c00
 80009d0:	fae2eae3 	.word	0xfae2eae3
 80009d4:	01010280 	.word	0x01010280
 80009d8:	40022000 	.word	0x40022000
 80009dc:	08192a3b 	.word	0x08192a3b
 80009e0:	4c5d6e7f 	.word	0x4c5d6e7f

080009e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ea:	e003      	b.n	80009f4 <LoopCopyDataInit>

080009ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009f2:	3104      	adds	r1, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <LoopForever+0xe>)
	adds	r2, r0, r1
 80009f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009fc:	d3f6      	bcc.n	80009ec <CopyDataInit>
	ldr	r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a00:	e002      	b.n	8000a08 <LoopFillZerobss>

08000a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a04:	f842 3b04 	str.w	r3, [r2], #4

08000a08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <LoopForever+0x16>)
	cmp	r2, r3
 8000a0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a0c:	d3f9      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a0e:	f7ff ff77 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f003 fe09 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a16:	f7ff fdcb 	bl	80005b0 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a1c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8000a20:	08005280 	.word	0x08005280
	ldr	r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a28:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000a2c:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000a30:	200002a4 	.word	0x200002a4

08000a34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_IRQHandler>
	...

08000a38 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED2)
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
       )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a4c:	f06f 0301 	mvn.w	r3, #1
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a52:	e02c      	b.n	8000aae <BSP_LED_Init+0x76>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED2)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10e      	bne.n	8000a78 <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <BSP_LED_Init+0x80>)
 8000a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a60:	4a15      	ldr	r2, [pc, #84]	@ (8000ab8 <BSP_LED_Init+0x80>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <BSP_LED_Init+0x80>)
 8000a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a78:	2320      	movs	r3, #32
 8000a7a:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000abc <BSP_LED_Init+0x84>)
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	f107 0210 	add.w	r2, r7, #16
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fcb4 	bl	8001404 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	@ (8000abc <BSP_LED_Init+0x84>)
 8000aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fdfd 	bl	80016a8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3728      	adds	r7, #40	@ 0x28
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	44020c00 	.word	0x44020c00
 8000abc:	20000008 	.word	0x20000008

08000ac0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]

  if((Led != LED2)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <BSP_LED_On+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
    )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ad4:	f06f 0301 	mvn.w	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e008      	b.n	8000aee <BSP_LED_On+0x2e>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <BSP_LED_On+0x38>)
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fddd 	bl	80016a8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008

08000afc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]

  if((Led != LED2)
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d003      	beq.n	8000b18 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
     && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
    )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b10:	f06f 0301 	mvn.w	r3, #1
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e008      	b.n	8000b2a <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <BSP_LED_Toggle+0x38>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2220      	movs	r2, #32
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fdd7 	bl	80016d8 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000008 	.word	0x20000008

08000b38 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000b48:	4b30      	ldr	r3, [pc, #192]	@ (8000c0c <BSP_PB_Init+0xd4>)
 8000b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000c0c <BSP_PB_Init+0xd4>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <BSP_PB_Init+0xd4>)
 8000b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10c      	bne.n	8000b94 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a23      	ldr	r2, [pc, #140]	@ (8000c10 <BSP_PB_Init+0xd8>)
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	f107 020c 	add.w	r2, r7, #12
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fc39 	bl	8001404 <HAL_GPIO_Init>
 8000b92:	e036      	b.n	8000c02 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <BSP_PB_Init+0xdc>)
 8000b96:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <BSP_PB_Init+0xd8>)
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	f107 020c 	add.w	r2, r7, #12
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fc2c 	bl	8001404 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <BSP_PB_Init+0xe0>)
 8000bb8:	441a      	add	r2, r3
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4917      	ldr	r1, [pc, #92]	@ (8000c1c <BSP_PB_Init+0xe4>)
 8000bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4610      	mov	r0, r2
 8000bc6:	f000 fbc1 	bl	800134c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4a10      	ldr	r2, [pc, #64]	@ (8000c18 <BSP_PB_Init+0xe0>)
 8000bd6:	1898      	adds	r0, r3, r2
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <BSP_PB_Init+0xe8>)
 8000bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be0:	461a      	mov	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f000 fb86 	bl	80012f4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000be8:	2018      	movs	r0, #24
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	@ (8000c24 <BSP_PB_Init+0xec>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	f000 faa5 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000bfa:	2318      	movs	r3, #24
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 fabb 	bl	8001178 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	44020c00 	.word	0x44020c00
 8000c10:	2000000c 	.word	0x2000000c
 8000c14:	10110000 	.word	0x10110000
 8000c18:	200000b0 	.word	0x200000b0
 8000c1c:	08005220 	.word	0x08005220
 8000c20:	20000010 	.word	0x20000010
 8000c24:	20000014 	.word	0x20000014

08000c28 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	4613      	mov	r3, r2
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	4413      	add	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <BSP_PB_IRQHandler+0x28>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fb97 	bl	8001374 <HAL_EXTI_IRQHandler>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000b0 	.word	0x200000b0

08000c54 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c6a:	f06f 0301 	mvn.w	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	e018      	b.n	8000ca4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2294      	movs	r2, #148	@ 0x94
 8000c76:	fb02 f303 	mul.w	r3, r2, r3
 8000c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <BSP_COM_Init+0x5c>)
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f870 	bl	8000d64 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2294      	movs	r2, #148	@ 0x94
 8000c88:	fb02 f303 	mul.w	r3, r2, r3
 8000c8c:	4a08      	ldr	r2, [pc, #32]	@ (8000cb0 <BSP_COM_Init+0x5c>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f80e 	bl	8000cb4 <MX_USART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d002      	beq.n	8000ca4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c9e:	f06f 0303 	mvn.w	r3, #3
 8000ca2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000bc 	.word	0x200000bc

08000cb4 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_USART_Init+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	895b      	ldrh	r3, [r3, #10]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	891b      	ldrh	r3, [r3, #8]
 8000cea:	461a      	mov	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	899b      	ldrh	r3, [r3, #12]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d00:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f002 fe8b 	bl	8003a24 <HAL_UART_Init>
 8000d0e:	4603      	mov	r3, r0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000004 	.word	0x20000004

08000d1c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <__io_putchar+0x30>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2394      	movs	r3, #148	@ 0x94
 8000d2c:	fb02 f303 	mul.w	r3, r2, r3
 8000d30:	4a07      	ldr	r2, [pc, #28]	@ (8000d50 <__io_putchar+0x34>)
 8000d32:	1898      	adds	r0, r3, r2
 8000d34:	1d39      	adds	r1, r7, #4
 8000d36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f002 fecc 	bl	8003ad8 <HAL_UART_Transmit>
  return ch;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000150 	.word	0x20000150
 8000d50:	200000bc 	.word	0x200000bc

08000d54 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f7ff fcd7 	bl	800070c <BSP_PB_Callback>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d6c:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d72:	4a25      	ldr	r2, [pc, #148]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d90:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000da8:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dae:	4a16      	ldr	r2, [pc, #88]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000db8:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <COM1_MspInit+0xa4>)
 8000dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000dc6:	2310      	movs	r3, #16
 8000dc8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000dd6:	230d      	movs	r3, #13
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	480a      	ldr	r0, [pc, #40]	@ (8000e0c <COM1_MspInit+0xa8>)
 8000de2:	f000 fb0f 	bl	8001404 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000de6:	2308      	movs	r3, #8
 8000de8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000dee:	230d      	movs	r3, #13
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <COM1_MspInit+0xa8>)
 8000dfa:	f000 fb03 	bl	8001404 <HAL_GPIO_Init>
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	44020c00 	.word	0x44020c00
 8000e0c:	42020000 	.word	0x42020000

08000e10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f98a 	bl	800112e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e1a:	f001 fa67 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <HAL_Init+0x44>)
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	f003 030f 	and.w	r3, r3, #15
 8000e28:	490b      	ldr	r1, [pc, #44]	@ (8000e58 <HAL_Init+0x48>)
 8000e2a:	5ccb      	ldrb	r3, [r1, r3]
 8000e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e30:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <HAL_Init+0x4c>)
 8000e32:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e34:	2004      	movs	r0, #4
 8000e36:	f000 f9cf 	bl	80011d8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f810 	bl	8000e60 <HAL_InitTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e002      	b.n	8000e50 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4a:	f7ff fc79 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	44020c00 	.word	0x44020c00
 8000e58:	08005208 	.word	0x08005208
 8000e5c:	20000000 	.word	0x20000000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e6c:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <HAL_InitTick+0xdc>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e05c      	b.n	8000f32 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <HAL_InitTick+0xe0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b04      	cmp	r3, #4
 8000e82:	d10c      	bne.n	8000e9e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000e84:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <HAL_InitTick+0xe4>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <HAL_InitTick+0xdc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	e037      	b.n	8000f0e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000e9e:	f000 f9f3 	bl	8001288 <HAL_SYSTICK_GetCLKSourceConfig>
 8000ea2:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d023      	beq.n	8000ef2 <HAL_InitTick+0x92>
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d82d      	bhi.n	8000f0c <HAL_InitTick+0xac>
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_InitTick+0x5e>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d00d      	beq.n	8000ed8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000ebc:	e026      	b.n	8000f0c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000ebe:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <HAL_InitTick+0xe4>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <HAL_InitTick+0xdc>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ecc:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed4:	60fb      	str	r3, [r7, #12]
        break;
 8000ed6:	e01a      	b.n	8000f0e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_InitTick+0xdc>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ee6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	60fb      	str	r3, [r7, #12]
        break;
 8000ef0:	e00d      	b.n	8000f0e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_InitTick+0xdc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	60fb      	str	r3, [r7, #12]
        break;
 8000f0a:	e000      	b.n	8000f0e <HAL_InitTick+0xae>
        break;
 8000f0c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000f0e:	68f8      	ldr	r0, [r7, #12]
 8000f10:	f000 f940 	bl	8001194 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e009      	b.n	8000f32 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	f000 f90d 	bl	8001144 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000f2a:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <HAL_InitTick+0xe8>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000001c 	.word	0x2000001c
 8000f40:	e000e010 	.word	0xe000e010
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000018 	.word	0x20000018

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	@ (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000001c 	.word	0x2000001c
 8000f70:	20000154 	.word	0x20000154

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000154 	.word	0x20000154

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000001c 	.word	0x2000001c

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ff4c 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 800113c:	bf00      	nop
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001152:	f7ff ff63 	bl	800101c <__NVIC_GetPriorityGrouping>
 8001156:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	68b9      	ldr	r1, [r7, #8]
 800115c:	6978      	ldr	r0, [r7, #20]
 800115e:	f7ff ffb3 	bl	80010c8 <NVIC_EncodePriority>
 8001162:	4602      	mov	r2, r0
 8001164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff82 	bl	8001074 <__NVIC_SetPriority>
}
 8001170:	bf00      	nop
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff56 	bl	8001038 <__NVIC_EnableIRQ>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00d      	b.n	80011c6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <HAL_SYSTICK_Config+0x40>)
 80011be:	f043 0303 	orr.w	r3, r3, #3
 80011c2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	d844      	bhi.n	8001270 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80011e6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80011e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ec:	0800120f 	.word	0x0800120f
 80011f0:	0800122d 	.word	0x0800122d
 80011f4:	0800124f 	.word	0x0800124f
 80011f8:	08001271 	.word	0x08001271
 80011fc:	08001201 	.word	0x08001201
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001200:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6013      	str	r3, [r2, #0]
      break;
 800120c:	e031      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800120e:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800121c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001220:	4a18      	ldr	r2, [pc, #96]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001222:	f023 030c 	bic.w	r3, r3, #12
 8001226:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800122a:	e022      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800122c:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001232:	f023 0304 	bic.w	r3, r3, #4
 8001236:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800123a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800123e:	f023 030c 	bic.w	r3, r3, #12
 8001242:	4a10      	ldr	r2, [pc, #64]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800124c:	e011      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800125c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001260:	f023 030c 	bic.w	r3, r3, #12
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800126e:	e000      	b.n	8001272 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001270:	bf00      	nop
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010
 8001284:	44020c00 	.word	0x44020c00

08001288 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 800129a:	2304      	movs	r3, #4
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	e01e      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80012a0:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80012a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d00f      	beq.n	80012d2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d80f      	bhi.n	80012d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d003      	beq.n	80012cc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80012c4:	e008      	b.n	80012d8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
        break;
 80012ca:	e008      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
        break;
 80012d0:	e005      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80012d2:	2302      	movs	r3, #2
 80012d4:	607b      	str	r3, [r7, #4]
        break;
 80012d6:	e002      	b.n	80012de <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
        break;
 80012dc:	bf00      	nop
    }
  }
  return systick_source;
 80012de:	687b      	ldr	r3, [r7, #4]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e010 	.word	0xe000e010
 80012f0:	44020c00 	.word	0x44020c00

080012f4 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	460b      	mov	r3, r1
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d011      	beq.n	8001330 <HAL_EXTI_RegisterCallback+0x3c>
 800130c:	2b02      	cmp	r3, #2
 800130e:	dc13      	bgt.n	8001338 <HAL_EXTI_RegisterCallback+0x44>
 8001310:	2b00      	cmp	r3, #0
 8001312:	d002      	beq.n	800131a <HAL_EXTI_RegisterCallback+0x26>
 8001314:	2b01      	cmp	r3, #1
 8001316:	d007      	beq.n	8001328 <HAL_EXTI_RegisterCallback+0x34>
 8001318:	e00e      	b.n	8001338 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]
      break;
 8001326:	e00a      	b.n	800133e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	605a      	str	r2, [r3, #4]
      break;
 800132e:	e006      	b.n	800133e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
      break;
 8001336:	e002      	b.n	800133e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	75fb      	strb	r3, [r7, #23]
      break;
 800133c:	bf00      	nop
  }

  return status;
 800133e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001340:	4618      	mov	r0, r3
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e003      	b.n	8001368 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001366:	2300      	movs	r3, #0
  }
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 031f 	and.w	r3, r3, #31
 8001390:	2201      	movs	r2, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	015a      	lsls	r2, r3, #5
 800139c:	4b17      	ldr	r3, [pc, #92]	@ (80013fc <HAL_EXTI_IRQHandler+0x88>)
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d009      	beq.n	80013c6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	015a      	lsls	r2, r3, #5
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_EXTI_IRQHandler+0x8c>)
 80013cc:	4413      	add	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d009      	beq.n	80013f4 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	4798      	blx	r3
    }
  }
}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	4402200c 	.word	0x4402200c
 8001400:	44022010 	.word	0x44022010

08001404 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001412:	e136      	b.n	8001682 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2101      	movs	r1, #1
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 8128 	beq.w	800167c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x38>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d125      	bne.n	8001488 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	f003 020f 	and.w	r2, r3, #15
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	4313      	orrs	r3, r2
 8001478:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	08da      	lsrs	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3208      	adds	r2, #8
 8001482:	6979      	ldr	r1, [r7, #20]
 8001484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4013      	ands	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0203 	and.w	r2, r3, #3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d00b      	beq.n	80014dc <HAL_GPIO_Init+0xd8>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d007      	beq.n	80014dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014d0:	2b11      	cmp	r3, #17
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b12      	cmp	r3, #18
 80014da:	d130      	bne.n	800153e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001512:	2201      	movs	r2, #1
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	4013      	ands	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	f003 0201 	and.w	r2, r3, #1
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	4313      	orrs	r3, r2
 8001536:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b03      	cmp	r3, #3
 8001544:	d017      	beq.n	8001576 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4013      	ands	r3, r2
 800155c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4313      	orrs	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d07c      	beq.n	800167c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001582:	4a47      	ldr	r2, [pc, #284]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3318      	adds	r3, #24
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4013      	ands	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0a9a      	lsrs	r2, r3, #10
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <HAL_GPIO_Init+0x2a0>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	00d2      	lsls	r2, r2, #3
 80015b6:	4093      	lsls	r3, r2
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80015be:	4938      	ldr	r1, [pc, #224]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3318      	adds	r3, #24
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4013      	ands	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80015f0:	4a2b      	ldr	r2, [pc, #172]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	4013      	ands	r3, r2
 8001604:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 8001622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001626:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	4013      	ands	r3, r2
 8001630:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001646:	4a16      	ldr	r2, [pc, #88]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800164e:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 8001650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001654:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001674:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <HAL_GPIO_Init+0x29c>)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	3301      	adds	r3, #1
 8001680:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	f47f aec1 	bne.w	8001414 <HAL_GPIO_Init+0x10>
  }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	44022000 	.word	0x44022000
 80016a4:	002f7f7f 	.word	0x002f7f7f

080016a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
 80016b4:	4613      	mov	r3, r2
 80016b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b8:	787b      	ldrb	r3, [r7, #1]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4013      	ands	r3, r2
 80016f0:	041a      	lsls	r2, r3, #16
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43d9      	mvns	r1, r3
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	400b      	ands	r3, r1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	f000 bc28 	b.w	8001f70 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001720:	4b94      	ldr	r3, [pc, #592]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	f003 0318 	and.w	r3, r3, #24
 8001728:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800172a:	4b92      	ldr	r3, [pc, #584]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 800172c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d05b      	beq.n	80017f8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x46>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b18      	cmp	r3, #24
 800174a:	d114      	bne.n	8001776 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d111      	bne.n	8001776 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	f000 bc08 	b.w	8001f70 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001760:	4b84      	ldr	r3, [pc, #528]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	4981      	ldr	r1, [pc, #516]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001770:	4313      	orrs	r3, r2
 8001772:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001774:	e040      	b.n	80017f8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800177e:	4b7d      	ldr	r3, [pc, #500]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7c      	ldr	r2, [pc, #496]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178a:	f7ff fbf3 	bl	8000f74 <HAL_GetTick>
 800178e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001792:	f7ff fbef 	bl	8000f74 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e3e5      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80017a4:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80017b0:	4b70      	ldr	r3, [pc, #448]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	041b      	lsls	r3, r3, #16
 80017be:	496d      	ldr	r1, [pc, #436]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	618b      	str	r3, [r1, #24]
 80017c4:	e018      	b.n	80017f8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80017cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fbcf 	bl	8000f74 <HAL_GetTick>
 80017d6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80017da:	f7ff fbcb 	bl	8000f74 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e3c1      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80017ec:	4b61      	ldr	r3, [pc, #388]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80a0 	beq.w	8001946 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	2b10      	cmp	r3, #16
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x10c>
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b18      	cmp	r3, #24
 8001810:	d109      	bne.n	8001826 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f040 8092 	bne.w	8001946 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e3a4      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182e:	d106      	bne.n	800183e <HAL_RCC_OscConfig+0x132>
 8001830:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4f      	ldr	r2, [pc, #316]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	e058      	b.n	80018f0 <HAL_RCC_OscConfig+0x1e4>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d112      	bne.n	800186c <HAL_RCC_OscConfig+0x160>
 8001846:	4b4b      	ldr	r3, [pc, #300]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a4a      	ldr	r2, [pc, #296]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 800184c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a47      	ldr	r2, [pc, #284]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001858:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b45      	ldr	r3, [pc, #276]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a44      	ldr	r2, [pc, #272]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e041      	b.n	80018f0 <HAL_RCC_OscConfig+0x1e4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001874:	d112      	bne.n	800189c <HAL_RCC_OscConfig+0x190>
 8001876:	4b3f      	ldr	r3, [pc, #252]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a3e      	ldr	r2, [pc, #248]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b3c      	ldr	r3, [pc, #240]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a3b      	ldr	r2, [pc, #236]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001888:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b39      	ldr	r3, [pc, #228]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a38      	ldr	r2, [pc, #224]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e029      	b.n	80018f0 <HAL_RCC_OscConfig+0x1e4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
 80018a6:	4b33      	ldr	r3, [pc, #204]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a32      	ldr	r2, [pc, #200]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b30      	ldr	r3, [pc, #192]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e011      	b.n	80018f0 <HAL_RCC_OscConfig+0x1e4>
 80018cc:	4b29      	ldr	r3, [pc, #164]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a28      	ldr	r2, [pc, #160]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b26      	ldr	r3, [pc, #152]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a25      	ldr	r2, [pc, #148]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a22      	ldr	r2, [pc, #136]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 80018ea:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb3c 	bl	8000f74 <HAL_GetTick>
 80018fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001900:	f7ff fb38 	bl	8000f74 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	@ 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e32e      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001912:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x1f4>
 800191e:	e012      	b.n	8001946 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fb28 	bl	8000f74 <HAL_GetTick>
 8001924:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001928:	f7ff fb24 	bl	8000f74 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e31a      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193a:	4b0e      	ldr	r3, [pc, #56]	@ (8001974 <HAL_RCC_OscConfig+0x268>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 809a 	beq.w	8001a88 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x25a>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	2b18      	cmp	r3, #24
 800195e:	d149      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d146      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d104      	bne.n	8001978 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e2fe      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
 8001972:	bf00      	nop
 8001974:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800197e:	4b9a      	ldr	r3, [pc, #616]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0218 	and.w	r2, r3, #24
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	429a      	cmp	r2, r3
 800198c:	d014      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800198e:	4b96      	ldr	r3, [pc, #600]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f023 0218 	bic.w	r2, r3, #24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	4993      	ldr	r1, [pc, #588]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80019a0:	f000 fdd0 	bl	8002544 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019a4:	4b91      	ldr	r3, [pc, #580]	@ (8001bec <HAL_RCC_OscConfig+0x4e0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa59 	bl	8000e60 <HAL_InitTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e2db      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fadc 	bl	8000f74 <HAL_GetTick>
 80019bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019c0:	f7ff fad8 	bl	8000f74 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e2ce      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d2:	4b85      	ldr	r3, [pc, #532]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80019de:	4b82      	ldr	r3, [pc, #520]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	497e      	ldr	r1, [pc, #504]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80019f2:	e049      	b.n	8001a88 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d02c      	beq.n	8001a56 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80019fc:	4b7a      	ldr	r3, [pc, #488]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 0218 	bic.w	r2, r3, #24
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	4977      	ldr	r1, [pc, #476]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001a0e:	4b76      	ldr	r3, [pc, #472]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a75      	ldr	r2, [pc, #468]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff faab 	bl	8000f74 <HAL_GetTick>
 8001a1e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a22:	f7ff faa7 	bl	8000f74 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e29d      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	4b6c      	ldr	r3, [pc, #432]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001a40:	4b69      	ldr	r3, [pc, #420]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	4966      	ldr	r1, [pc, #408]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	610b      	str	r3, [r1, #16]
 8001a54:	e018      	b.n	8001a88 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a56:	4b64      	ldr	r3, [pc, #400]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a63      	ldr	r2, [pc, #396]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff fa87 	bl	8000f74 <HAL_GetTick>
 8001a66:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff fa83 	bl	8000f74 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e279      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f0      	bne.n	8001a6a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03c      	beq.n	8001b0e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01c      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aa2:	4a51      	ldr	r2, [pc, #324]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff fa62 	bl	8000f74 <HAL_GetTick>
 8001ab0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fa5e 	bl	8000f74 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e254      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ac6:	4b48      	ldr	r3, [pc, #288]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0ef      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x3a8>
 8001ad4:	e01b      	b.n	8001b0e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001adc:	4a42      	ldr	r2, [pc, #264]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001ae2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae6:	f7ff fa45 	bl	8000f74 <HAL_GetTick>
 8001aea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001aee:	f7ff fa41 	bl	8000f74 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e237      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001b00:	4b39      	ldr	r3, [pc, #228]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ef      	bne.n	8001aee <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 80d2 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <HAL_RCC_OscConfig+0x4e4>)
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d118      	bne.n	8001b5a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001b28:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <HAL_RCC_OscConfig+0x4e4>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2c:	4a30      	ldr	r2, [pc, #192]	@ (8001bf0 <HAL_RCC_OscConfig+0x4e4>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa1e 	bl	8000f74 <HAL_GetTick>
 8001b38:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3c:	f7ff fa1a 	bl	8000f74 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e210      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001b4e:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <HAL_RCC_OscConfig+0x4e4>)
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d108      	bne.n	8001b74 <HAL_RCC_OscConfig+0x468>
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b68:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b72:	e074      	b.n	8001c5e <HAL_RCC_OscConfig+0x552>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d118      	bne.n	8001bae <HAL_RCC_OscConfig+0x4a2>
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b82:	4a19      	ldr	r2, [pc, #100]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b92:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001b98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ba2:	4a11      	ldr	r2, [pc, #68]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001ba4:	f023 0304 	bic.w	r3, r3, #4
 8001ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bac:	e057      	b.n	8001c5e <HAL_RCC_OscConfig+0x552>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d11e      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x4e8>
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001bbe:	f043 0304 	orr.w	r3, r3, #4
 8001bc2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bc6:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bcc:	4a06      	ldr	r2, [pc, #24]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bd2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bd6:	4b04      	ldr	r3, [pc, #16]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bdc:	4a02      	ldr	r2, [pc, #8]	@ (8001be8 <HAL_RCC_OscConfig+0x4dc>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x552>
 8001be8:	44020c00 	.word	0x44020c00
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	44020800 	.word	0x44020800
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b85      	cmp	r3, #133	@ 0x85
 8001bfa:	d118      	bne.n	8001c2e <HAL_RCC_OscConfig+0x522>
 8001bfc:	4ba2      	ldr	r3, [pc, #648]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c02:	4aa1      	ldr	r2, [pc, #644]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c04:	f043 0304 	orr.w	r3, r3, #4
 8001c08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c0c:	4b9e      	ldr	r3, [pc, #632]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c12:	4a9d      	ldr	r2, [pc, #628]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c1c:	4b9a      	ldr	r3, [pc, #616]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c22:	4a99      	ldr	r2, [pc, #612]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c2c:	e017      	b.n	8001c5e <HAL_RCC_OscConfig+0x552>
 8001c2e:	4b96      	ldr	r3, [pc, #600]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c34:	4a94      	ldr	r2, [pc, #592]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c36:	f023 0301 	bic.w	r3, r3, #1
 8001c3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c3e:	4b92      	ldr	r3, [pc, #584]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c44:	4a90      	ldr	r2, [pc, #576]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c4e:	4b8e      	ldr	r3, [pc, #568]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c54:	4a8c      	ldr	r2, [pc, #560]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d016      	beq.n	8001c94 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff f985 	bl	8000f74 <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7ff f981 	bl	8000f74 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e175      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c84:	4b80      	ldr	r3, [pc, #512]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ed      	beq.n	8001c6e <HAL_RCC_OscConfig+0x562>
 8001c92:	e015      	b.n	8001cc0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f96e 	bl	8000f74 <HAL_GetTick>
 8001c98:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f96a 	bl	8000f74 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e15e      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb2:	4b75      	ldr	r3, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ed      	bne.n	8001c9c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d036      	beq.n	8001d3a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d019      	beq.n	8001d08 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001cda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f948 	bl	8000f74 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ce8:	f7ff f944 	bl	8000f74 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e13a      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001cfa:	4b63      	ldr	r3, [pc, #396]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x5dc>
 8001d06:	e018      	b.n	8001d3a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d08:	4b5f      	ldr	r3, [pc, #380]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f92e 	bl	8000f74 <HAL_GetTick>
 8001d18:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff f92a 	bl	8000f74 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e120      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d2e:	4b56      	ldr	r3, [pc, #344]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8115 	beq.w	8001f6e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b18      	cmp	r3, #24
 8001d48:	f000 80af 	beq.w	8001eaa <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	f040 8086 	bne.w	8001e62 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001d56:	4b4c      	ldr	r3, [pc, #304]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff f907 	bl	8000f74 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff f903 	bl	8000f74 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e0f9      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d7c:	4b42      	ldr	r3, [pc, #264]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001d88:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d9c:	0212      	lsls	r2, r2, #8
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	4939      	ldr	r1, [pc, #228]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	628b      	str	r3, [r1, #40]	@ 0x28
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db4:	3b01      	subs	r3, #1
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	061b      	lsls	r3, r3, #24
 8001dd2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001dd6:	492c      	ldr	r1, [pc, #176]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	4a29      	ldr	r2, [pc, #164]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001de2:	f023 0310 	bic.w	r3, r3, #16
 8001de6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dec:	4a26      	ldr	r2, [pc, #152]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	4a24      	ldr	r2, [pc, #144]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	f023 020c 	bic.w	r2, r3, #12
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	491f      	ldr	r1, [pc, #124]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	f023 0220 	bic.w	r2, r3, #32
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1c:	491a      	ldr	r1, [pc, #104]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001e2e:	4b16      	ldr	r3, [pc, #88]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a15      	ldr	r2, [pc, #84]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f89b 	bl	8000f74 <HAL_GetTick>
 8001e3e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e42:	f7ff f897 	bl	8000f74 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e08d      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x736>
 8001e60:	e085      	b.n	8001f6e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a08      	ldr	r2, [pc, #32]	@ (8001e88 <HAL_RCC_OscConfig+0x77c>)
 8001e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f881 	bl	8000f74 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001e76:	f7ff f87d 	bl	8000f74 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d903      	bls.n	8001e8c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e073      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
 8001e88:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e98:	4b37      	ldr	r3, [pc, #220]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	4a36      	ldr	r2, [pc, #216]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001e9e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	6293      	str	r3, [r2, #40]	@ 0x28
 8001ea8:	e061      	b.n	8001f6e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001eaa:	4b33      	ldr	r3, [pc, #204]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eb4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d031      	beq.n	8001f22 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d12a      	bne.n	8001f22 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d122      	bne.n	8001f22 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ee6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d11a      	bne.n	8001f22 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0a5b      	lsrs	r3, r3, #9
 8001ef0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d111      	bne.n	8001f22 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0c1b      	lsrs	r3, r3, #16
 8001f02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f0a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d108      	bne.n	8001f22 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	0e1b      	lsrs	r3, r3, #24
 8001f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e024      	b.n	8001f70 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f26:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2a:	08db      	lsrs	r3, r3, #3
 8001f2c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d01a      	beq.n	8001f6e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001f3e:	f023 0310 	bic.w	r3, r3, #16
 8001f42:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f816 	bl	8000f74 <HAL_GetTick>
 8001f48:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff f812 	bl	8000f74 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d0f9      	beq.n	8001f4c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5c:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001f62:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f66:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <HAL_RCC_OscConfig+0x86c>)
 8001f68:	f043 0310 	orr.w	r3, r3, #16
 8001f6c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	44020c00 	.word	0x44020c00

08001f7c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e19e      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b83      	ldr	r3, [pc, #524]	@ (80021a0 <HAL_RCC_ClockConfig+0x224>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b80      	ldr	r3, [pc, #512]	@ (80021a0 <HAL_RCC_ClockConfig+0x224>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	497e      	ldr	r1, [pc, #504]	@ (80021a0 <HAL_RCC_ClockConfig+0x224>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b7c      	ldr	r3, [pc, #496]	@ (80021a0 <HAL_RCC_ClockConfig+0x224>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e186      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d012      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	4b74      	ldr	r3, [pc, #464]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d909      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001fde:	4b71      	ldr	r3, [pc, #452]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	496d      	ldr	r1, [pc, #436]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d012      	beq.n	8002024 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	4b68      	ldr	r3, [pc, #416]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800200c:	429a      	cmp	r2, r3
 800200e:	d909      	bls.n	8002024 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002010:	4b64      	ldr	r3, [pc, #400]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	4961      	ldr	r1, [pc, #388]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002020:	4313      	orrs	r3, r2
 8002022:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	4b5b      	ldr	r3, [pc, #364]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800203c:	429a      	cmp	r2, r3
 800203e:	d908      	bls.n	8002052 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002040:	4b58      	ldr	r3, [pc, #352]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4955      	ldr	r1, [pc, #340]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 800204e:	4313      	orrs	r3, r2
 8002050:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	4b50      	ldr	r3, [pc, #320]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	429a      	cmp	r2, r3
 800206c:	d908      	bls.n	8002080 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800206e:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f023 020f 	bic.w	r2, r3, #15
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	494a      	ldr	r1, [pc, #296]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 800207c:	4313      	orrs	r3, r2
 800207e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8093 	beq.w	80021b4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002096:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d121      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e113      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e107      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80020c6:	4b37      	ldr	r3, [pc, #220]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0fb      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020d6:	4b33      	ldr	r3, [pc, #204]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0f3      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80020e6:	4b2f      	ldr	r3, [pc, #188]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	492c      	ldr	r1, [pc, #176]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f8:	f7fe ff3c 	bl	8000f74 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d112      	bne.n	800212c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002106:	e00a      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002108:	f7fe ff34 	bl	8000f74 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e0d7      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211e:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0318 	and.w	r3, r3, #24
 8002126:	2b18      	cmp	r3, #24
 8002128:	d1ee      	bne.n	8002108 <HAL_RCC_ClockConfig+0x18c>
 800212a:	e043      	b.n	80021b4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d112      	bne.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002134:	e00a      	b.n	800214c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002136:	f7fe ff1d 	bl	8000f74 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0c0      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	f003 0318 	and.w	r3, r3, #24
 8002154:	2b10      	cmp	r3, #16
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
 8002158:	e02c      	b.n	80021b4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d122      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002162:	e00a      	b.n	800217a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002164:	f7fe ff06 	bl	8000f74 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0a9      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_RCC_ClockConfig+0x228>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0318 	and.w	r3, r3, #24
 8002182:	2b08      	cmp	r3, #8
 8002184:	d1ee      	bne.n	8002164 <HAL_RCC_ClockConfig+0x1e8>
 8002186:	e015      	b.n	80021b4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fef4 	bl	8000f74 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d906      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e097      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
 800219e:	bf00      	nop
 80021a0:	40022000 	.word	0x40022000
 80021a4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021a8:	4b4b      	ldr	r3, [pc, #300]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f003 0318 	and.w	r3, r3, #24
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e9      	bne.n	8002188 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d010      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b44      	ldr	r3, [pc, #272]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d208      	bcs.n	80021e2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80021d0:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f023 020f 	bic.w	r2, r3, #15
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	493e      	ldr	r1, [pc, #248]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e2:	4b3e      	ldr	r3, [pc, #248]	@ (80022dc <HAL_RCC_ClockConfig+0x360>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d210      	bcs.n	8002212 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f0:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <HAL_RCC_ClockConfig+0x360>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 020f 	bic.w	r2, r3, #15
 80021f8:	4938      	ldr	r1, [pc, #224]	@ (80022dc <HAL_RCC_ClockConfig+0x360>)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002200:	4b36      	ldr	r3, [pc, #216]	@ (80022dc <HAL_RCC_ClockConfig+0x360>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e05d      	b.n	80022ce <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	2b00      	cmp	r3, #0
 800221c:	d010      	beq.n	8002240 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	4b2d      	ldr	r3, [pc, #180]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800222a:	429a      	cmp	r2, r3
 800222c:	d208      	bcs.n	8002240 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800222e:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4927      	ldr	r1, [pc, #156]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 800223c:	4313      	orrs	r3, r2
 800223e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	4b21      	ldr	r3, [pc, #132]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800225a:	429a      	cmp	r2, r3
 800225c:	d209      	bcs.n	8002272 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800225e:	4b1e      	ldr	r3, [pc, #120]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	491a      	ldr	r1, [pc, #104]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 800226e:	4313      	orrs	r3, r2
 8002270:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b00      	cmp	r3, #0
 800227c:	d012      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800228c:	429a      	cmp	r2, r3
 800228e:	d209      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002290:	4b11      	ldr	r3, [pc, #68]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	490e      	ldr	r1, [pc, #56]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80022a4:	f000 f822 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <HAL_RCC_ClockConfig+0x35c>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	490b      	ldr	r1, [pc, #44]	@ (80022e0 <HAL_RCC_ClockConfig+0x364>)
 80022b4:	5ccb      	ldrb	r3, [r1, r3]
 80022b6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_RCC_ClockConfig+0x368>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_RCC_ClockConfig+0x36c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fdcc 	bl	8000e60 <HAL_InitTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80022cc:	7afb      	ldrb	r3, [r7, #11]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	44020c00 	.word	0x44020c00
 80022dc:	40022000 	.word	0x40022000
 80022e0:	08005208 	.word	0x08005208
 80022e4:	20000000 	.word	0x20000000
 80022e8:	20000018 	.word	0x20000018

080022ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80022f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 0318 	and.w	r3, r3, #24
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e107      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002304:	4b87      	ldr	r3, [pc, #540]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f003 0318 	and.w	r3, r3, #24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d112      	bne.n	8002336 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002310:	4b84      	ldr	r3, [pc, #528]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800231c:	4b81      	ldr	r3, [pc, #516]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	4a81      	ldr	r2, [pc, #516]	@ (800252c <HAL_RCC_GetSysClockFreq+0x240>)
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e0f1      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002330:	4b7e      	ldr	r3, [pc, #504]	@ (800252c <HAL_RCC_GetSysClockFreq+0x240>)
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	e0ee      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002336:	4b7b      	ldr	r3, [pc, #492]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 0318 	and.w	r3, r3, #24
 800233e:	2b10      	cmp	r3, #16
 8002340:	d102      	bne.n	8002348 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002342:	4b7b      	ldr	r3, [pc, #492]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x244>)
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e0e5      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002348:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f003 0318 	and.w	r3, r3, #24
 8002350:	2b18      	cmp	r3, #24
 8002352:	f040 80dd 	bne.w	8002510 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002356:	4b73      	ldr	r3, [pc, #460]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 8002358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002360:	4b70      	ldr	r3, [pc, #448]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800236a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800236c:	4b6d      	ldr	r3, [pc, #436]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002390:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 80b7 	beq.w	800250a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0xbe>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d056      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x16a>
 80023a8:	e077      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80023aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d02d      	beq.n	8002412 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80023b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	4a5a      	ldr	r2, [pc, #360]	@ (800252c <HAL_RCC_GetSysClockFreq+0x240>)
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	ee07 3a90 	vmov	s15, r3
 80023d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e0:	4b50      	ldr	r3, [pc, #320]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 80023e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80023f4:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8002534 <HAL_RCC_GetSysClockFreq+0x248>
 80023f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002404:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002410:	e065      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002538 <HAL_RCC_GetSysClockFreq+0x24c>
 8002420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002424:	4b3f      	ldr	r3, [pc, #252]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002434:	ed97 6a02 	vldr	s12, [r7, #8]
 8002438:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8002534 <HAL_RCC_GetSysClockFreq+0x248>
 800243c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002440:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002448:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002454:	e043      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002460:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800253c <HAL_RCC_GetSysClockFreq+0x250>
 8002464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002468:	4b2e      	ldr	r3, [pc, #184]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 800246a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800246c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002478:	ed97 6a02 	vldr	s12, [r7, #8]
 800247c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8002534 <HAL_RCC_GetSysClockFreq+0x248>
 8002480:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002484:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800248c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002494:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002498:	e021      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	ee07 3a90 	vmov	s15, r3
 80024a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002540 <HAL_RCC_GetSysClockFreq+0x254>
 80024a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 80024ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80024c0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8002534 <HAL_RCC_GetSysClockFreq+0x248>
 80024c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80024cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80024dc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_RCC_GetSysClockFreq+0x238>)
 80024e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024e2:	0a5b      	lsrs	r3, r3, #9
 80024e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024e8:	3301      	adds	r3, #1
 80024ea:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80024fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002502:	ee17 3a90 	vmov	r3, s15
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	e004      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e001      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_RCC_GetSysClockFreq+0x240>)
 8002512:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002514:	69fb      	ldr	r3, [r7, #28]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	@ 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	44020c00 	.word	0x44020c00
 8002528:	003d0900 	.word	0x003d0900
 800252c:	03d09000 	.word	0x03d09000
 8002530:	016e3600 	.word	0x016e3600
 8002534:	46000000 	.word	0x46000000
 8002538:	4c742400 	.word	0x4c742400
 800253c:	4bb71b00 	.word	0x4bb71b00
 8002540:	4a742400 	.word	0x4a742400

08002544 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002548:	f7ff fed0 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002552:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002556:	4907      	ldr	r1, [pc, #28]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x30>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800255a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a05      	ldr	r2, [pc, #20]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x34>)
 8002564:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002566:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x34>)
 8002568:	681b      	ldr	r3, [r3, #0]
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	44020c00 	.word	0x44020c00
 8002574:	08005208 	.word	0x08005208
 8002578:	20000000 	.word	0x20000000

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002580:	f7ff ffe0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4904      	ldr	r1, [pc, #16]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	44020c00 	.word	0x44020c00
 80025a4:	08005218 	.word	0x08005218

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80025ac:	f7ff ffca 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	4904      	ldr	r1, [pc, #16]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025be:	5ccb      	ldrb	r3, [r1, r3]
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	44020c00 	.word	0x44020c00
 80025d0:	08005218 	.word	0x08005218

080025d4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80025d8:	f7ff ffb4 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	0b1b      	lsrs	r3, r3, #12
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4904      	ldr	r1, [pc, #16]	@ (80025fc <HAL_RCC_GetPCLK3Freq+0x28>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	44020c00 	.word	0x44020c00
 80025fc:	08005218 	.word	0x08005218

08002600 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8002600:	b480      	push	{r7}
 8002602:	b08b      	sub	sp, #44	@ 0x2c
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002608:	4bad      	ldr	r3, [pc, #692]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002612:	4bab      	ldr	r3, [pc, #684]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800261c:	4ba8      	ldr	r3, [pc, #672]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002626:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8002628:	4ba5      	ldr	r3, [pc, #660]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002632:	4ba3      	ldr	r3, [pc, #652]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	08db      	lsrs	r3, r3, #3
 8002638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	ee07 3a90 	vmov	s15, r3
 8002646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8126 	beq.w	80028a2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d053      	beq.n	8002704 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d86f      	bhi.n	8002742 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d003      	beq.n	8002670 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d02b      	beq.n	80026c6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800266e:	e068      	b.n	8002742 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002670:	4b93      	ldr	r3, [pc, #588]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	4a92      	ldr	r2, [pc, #584]	@ (80028c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800267c:	fa22 f303 	lsr.w	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a4:	ed97 6a04 	vldr	s12, [r7, #16]
 80026a8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80028c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80026ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80026c4:	e068      	b.n	8002798 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80028cc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80026d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	ee07 3a90 	vmov	s15, r3
 80026de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026e2:	ed97 6a04 	vldr	s12, [r7, #16]
 80026e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80028c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80026ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002702:	e049      	b.n	8002798 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80028d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8002712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	ee07 3a90 	vmov	s15, r3
 800271c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002720:	ed97 6a04 	vldr	s12, [r7, #16]
 8002724:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80028c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8002728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002730:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002740:	e02a      	b.n	8002798 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	08db      	lsrs	r3, r3, #3
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	4a5d      	ldr	r2, [pc, #372]	@ (80028c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002776:	ed97 6a04 	vldr	s12, [r7, #16]
 800277a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80028c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800277e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800278a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002796:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002798:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027a4:	d121      	bne.n	80027ea <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d017      	beq.n	80027e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80027b2:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80027b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b6:	0a5b      	lsrs	r3, r3, #9
 80027b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027bc:	ee07 3a90 	vmov	s15, r3
 80027c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80027c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80027cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80027d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e002      	b.n	80027f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80027f0:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027fc:	d121      	bne.n	8002842 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80027fe:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d017      	beq.n	800283a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800280a:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280e:	0c1b      	lsrs	r3, r3, #16
 8002810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800281c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002820:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8002824:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002830:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	e006      	b.n	8002848 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	e002      	b.n	8002848 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8002848:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002854:	d121      	bne.n	800289a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d017      	beq.n	8002892 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8002862:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8002864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002866:	0e1b      	lsrs	r3, r3, #24
 8002868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002878:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800287c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002888:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8002890:	e010      	b.n	80028b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
}
 8002898:	e00c      	b.n	80028b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	e008      	b.n	80028b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	609a      	str	r2, [r3, #8]
}
 80028b4:	bf00      	nop
 80028b6:	372c      	adds	r7, #44	@ 0x2c
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	44020c00 	.word	0x44020c00
 80028c4:	03d09000 	.word	0x03d09000
 80028c8:	46000000 	.word	0x46000000
 80028cc:	4a742400 	.word	0x4a742400
 80028d0:	4bb71b00 	.word	0x4bb71b00

080028d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b08b      	sub	sp, #44	@ 0x2c
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80028dc:	4bad      	ldr	r3, [pc, #692]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80028e6:	4bab      	ldr	r3, [pc, #684]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80028f0:	4ba8      	ldr	r3, [pc, #672]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fa:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80028fc:	4ba5      	ldr	r3, [pc, #660]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8002906:	4ba3      	ldr	r3, [pc, #652]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	08db      	lsrs	r3, r3, #3
 800290c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8126 	beq.w	8002b76 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d053      	beq.n	80029d8 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2b03      	cmp	r3, #3
 8002934:	d86f      	bhi.n	8002a16 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d003      	beq.n	8002944 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d02b      	beq.n	800299a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8002942:	e068      	b.n	8002a16 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002944:	4b93      	ldr	r3, [pc, #588]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	4a92      	ldr	r2, [pc, #584]	@ (8002b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002978:	ed97 6a04 	vldr	s12, [r7, #16]
 800297c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8002b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002988:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800298c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002994:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002998:	e068      	b.n	8002a6c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a4:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8002ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80029a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80029ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80029be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80029d6:	e049      	b.n	8002a6c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80029e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	ee07 3a90 	vmov	s15, r3
 80029f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80029f8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8002b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80029fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8002a14:	e02a      	b.n	8002a6c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a16:	4b5f      	ldr	r3, [pc, #380]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	08db      	lsrs	r3, r3, #3
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	4a5d      	ldr	r2, [pc, #372]	@ (8002b98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8002a22:	fa22 f303 	lsr.w	r3, r2, r3
 8002a26:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a4a:	ed97 6a04 	vldr	s12, [r7, #16]
 8002a4e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8002b9c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8002a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8002a6a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002a6c:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a78:	d121      	bne.n	8002abe <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8002a7a:	4b46      	ldr	r3, [pc, #280]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d017      	beq.n	8002ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002a86:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a90:	ee07 3a90 	vmov	s15, r3
 8002a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8002a98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002aa0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aac:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e006      	b.n	8002ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e002      	b.n	8002ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002ac4:	4b33      	ldr	r3, [pc, #204]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002acc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad0:	d121      	bne.n	8002b16 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8002ad2:	4b30      	ldr	r3, [pc, #192]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d017      	beq.n	8002b0e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002ade:	4b2d      	ldr	r3, [pc, #180]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8002af0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002af4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002af8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b04:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	e006      	b.n	8002b1c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	e002      	b.n	8002b1c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b28:	d121      	bne.n	8002b6e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d017      	beq.n	8002b66 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8002b36:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8002b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3a:	0e1b      	lsrs	r3, r3, #24
 8002b3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b40:	ee07 3a90 	vmov	s15, r3
 8002b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8002b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8002b50:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002b64:	e010      	b.n	8002b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	e00c      	b.n	8002b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	e008      	b.n	8002b88 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
}
 8002b88:	bf00      	nop
 8002b8a:	372c      	adds	r7, #44	@ 0x2c
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	44020c00 	.word	0x44020c00
 8002b98:	03d09000 	.word	0x03d09000
 8002b9c:	46000000 	.word	0x46000000
 8002ba0:	4a742400 	.word	0x4a742400
 8002ba4:	4bb71b00 	.word	0x4bb71b00

08002ba8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08c      	sub	sp, #48	@ 0x30
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	d14b      	bne.n	8002c56 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002bbe:	4bc4      	ldr	r3, [pc, #784]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8002bca:	4bc1      	ldr	r3, [pc, #772]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002bcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d108      	bne.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8002bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bde:	d104      	bne.n	8002bea <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8002be0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002be6:	f000 bf14 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8002bea:	4bb9      	ldr	r3, [pc, #740]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bf8:	d108      	bne.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8002bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c00:	d104      	bne.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8002c02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c08:	f000 bf03 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8002c0c:	4bb0      	ldr	r3, [pc, #704]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c18:	d119      	bne.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8002c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c20:	d115      	bne.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002c22:	4bab      	ldr	r3, [pc, #684]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8002c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c2e:	d30a      	bcc.n	8002c46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8002c30:	4ba7      	ldr	r3, [pc, #668]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	0a1b      	lsrs	r3, r3, #8
 8002c36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c3a:	4aa6      	ldr	r2, [pc, #664]	@ (8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002c42:	f000 bee6 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8002c4a:	f000 bee2 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c52:	f000 bede 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8002c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c5a:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8002c5e:	ea52 0301 	orrs.w	r3, r2, r1
 8002c62:	f000 838e 	beq.w	8003382 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8002c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c6a:	2a01      	cmp	r2, #1
 8002c6c:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8002c70:	f080 86cc 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c78:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8002c7c:	ea52 0301 	orrs.w	r3, r2, r1
 8002c80:	f000 82aa 	beq.w	80031d8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8002c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c88:	2a01      	cmp	r2, #1
 8002c8a:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8002c8e:	f080 86bd 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c96:	f1a3 0110 	sub.w	r1, r3, #16
 8002c9a:	ea52 0301 	orrs.w	r3, r2, r1
 8002c9e:	f000 8681 	beq.w	80039a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8002ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ca6:	2a01      	cmp	r2, #1
 8002ca8:	f173 0310 	sbcs.w	r3, r3, #16
 8002cac:	f080 86ae 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb4:	1f19      	subs	r1, r3, #4
 8002cb6:	ea52 0301 	orrs.w	r3, r2, r1
 8002cba:	f000 84b1 	beq.w	8003620 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8002cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cc2:	2a01      	cmp	r2, #1
 8002cc4:	f173 0304 	sbcs.w	r3, r3, #4
 8002cc8:	f080 86a0 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd0:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	f000 85aa 	beq.w	800382e <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8002cda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cde:	497e      	ldr	r1, [pc, #504]	@ (8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8002ce0:	428a      	cmp	r2, r1
 8002ce2:	f173 0300 	sbcs.w	r3, r3, #0
 8002ce6:	f080 8691 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cee:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	f000 8532 	beq.w	800375c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8002cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfc:	4977      	ldr	r1, [pc, #476]	@ (8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8002cfe:	428a      	cmp	r2, r1
 8002d00:	f173 0300 	sbcs.w	r3, r3, #0
 8002d04:	f080 8682 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d0c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8002d10:	430b      	orrs	r3, r1
 8002d12:	f000 84bc 	beq.w	800368e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8002d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d1a:	4971      	ldr	r1, [pc, #452]	@ (8002ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8002d1c:	428a      	cmp	r2, r1
 8002d1e:	f173 0300 	sbcs.w	r3, r3, #0
 8002d22:	f080 8673 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d2a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	f000 85f2 	beq.w	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8002d34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d38:	496a      	ldr	r1, [pc, #424]	@ (8002ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8002d3a:	428a      	cmp	r2, r1
 8002d3c:	f173 0300 	sbcs.w	r3, r3, #0
 8002d40:	f080 8664 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d48:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	f000 81e5 	beq.w	800311c <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8002d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d56:	4964      	ldr	r1, [pc, #400]	@ (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8002d58:	428a      	cmp	r2, r1
 8002d5a:	f173 0300 	sbcs.w	r3, r3, #0
 8002d5e:	f080 8655 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d66:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	f000 83cc 	beq.w	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8002d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d74:	495d      	ldr	r1, [pc, #372]	@ (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8002d76:	428a      	cmp	r2, r1
 8002d78:	f173 0300 	sbcs.w	r3, r3, #0
 8002d7c:	f080 8646 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d84:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	f000 8331 	beq.w	80033f0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8002d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d92:	4957      	ldr	r1, [pc, #348]	@ (8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8002d94:	428a      	cmp	r2, r1
 8002d96:	f173 0300 	sbcs.w	r3, r3, #0
 8002d9a:	f080 8637 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002da2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8002da6:	430b      	orrs	r3, r1
 8002da8:	f000 82bb 	beq.w	8003322 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8002dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002db0:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8002db4:	f173 0300 	sbcs.w	r3, r3, #0
 8002db8:	f080 8628 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dc0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	f000 826d 	beq.w	80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8002dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dce:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002dd2:	428a      	cmp	r2, r1
 8002dd4:	f173 0300 	sbcs.w	r3, r3, #0
 8002dd8:	f080 8618 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002de0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8002de4:	430b      	orrs	r3, r1
 8002de6:	f000 821e 	beq.w	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8002dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dee:	f242 0101 	movw	r1, #8193	@ 0x2001
 8002df2:	428a      	cmp	r2, r1
 8002df4:	f173 0300 	sbcs.w	r3, r3, #0
 8002df8:	f080 8608 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e00:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8002e04:	430b      	orrs	r3, r1
 8002e06:	f000 8137 	beq.w	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8002e0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e0e:	f241 0101 	movw	r1, #4097	@ 0x1001
 8002e12:	428a      	cmp	r2, r1
 8002e14:	f173 0300 	sbcs.w	r3, r3, #0
 8002e18:	f080 85f8 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e20:	1f11      	subs	r1, r2, #4
 8002e22:	430b      	orrs	r3, r1
 8002e24:	f000 80d2 	beq.w	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8002e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e2c:	2a05      	cmp	r2, #5
 8002e2e:	f173 0300 	sbcs.w	r3, r3, #0
 8002e32:	f080 85eb 	bcs.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8002e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e3a:	1e51      	subs	r1, r2, #1
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	d006      	beq.n	8002e4e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8002e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e44:	1e91      	subs	r1, r2, #2
 8002e46:	430b      	orrs	r3, r1
 8002e48:	d06c      	beq.n	8002f24 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8002e4a:	f000 bddf 	b.w	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d104      	bne.n	8002e6a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8002e60:	f7ff fba2 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8002e64:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8002e66:	f000 bdd4 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8002e6a:	4b19      	ldr	r3, [pc, #100]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e76:	d10a      	bne.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002e7e:	f107 030c 	add.w	r3, r7, #12
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fd26 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e8c:	e048      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8002e8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d109      	bne.n	8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	08db      	lsrs	r3, r3, #3
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eb2:	e035      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8002eb4:	4b06      	ldr	r3, [pc, #24]	@ (8002ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d11c      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8002ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d119      	bne.n	8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8002eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ecc:	e028      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8002ece:	bf00      	nop
 8002ed0:	44020c00 	.word	0x44020c00
 8002ed4:	016e3600 	.word	0x016e3600
 8002ed8:	20000001 	.word	0x20000001
 8002edc:	10000001 	.word	0x10000001
 8002ee0:	08000001 	.word	0x08000001
 8002ee4:	04000001 	.word	0x04000001
 8002ee8:	00200001 	.word	0x00200001
 8002eec:	00040001 	.word	0x00040001
 8002ef0:	00020001 	.word	0x00020001
 8002ef4:	03d09000 	.word	0x03d09000
 8002ef8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8002efc:	4b9f      	ldr	r3, [pc, #636]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d106      	bne.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8002f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d103      	bne.n	8002f18 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8002f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002f1c:	f000 bd79 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002f20:	f000 bd77 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002f24:	4b95      	ldr	r3, [pc, #596]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002f2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002f36:	f7ff fb21 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8002f3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8002f3c:	f000 bd69 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8002f40:	4b8e      	ldr	r3, [pc, #568]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f4c:	d10a      	bne.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d107      	bne.n	8002f64 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f54:	f107 030c 	add.w	r3, r7, #12
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fcbb 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f62:	e031      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8002f64:	4b85      	ldr	r3, [pc, #532]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d10c      	bne.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8002f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f72:	2b18      	cmp	r3, #24
 8002f74:	d109      	bne.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f76:	4b81      	ldr	r3, [pc, #516]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	4a7f      	ldr	r2, [pc, #508]	@ (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f88:	e01e      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8002f8a:	4b7c      	ldr	r3, [pc, #496]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8002f9e:	4b79      	ldr	r3, [pc, #484]	@ (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8002fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fa2:	e011      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8002fa4:	4b75      	ldr	r3, [pc, #468]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002fa6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d106      	bne.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	2b28      	cmp	r3, #40	@ 0x28
 8002fb6:	d103      	bne.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8002fb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002fc4:	f000 bd25 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8002fc8:	f000 bd23 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fd2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8002fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8002fde:	f7ff facd 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8002fe2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8002fe4:	f000 bd15 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8002fe8:	4b64      	ldr	r3, [pc, #400]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ff4:	d10a      	bne.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d107      	bne.n	800300c <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff fc67 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800300a:	e033      	b.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800300c:	4b5b      	ldr	r3, [pc, #364]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b02      	cmp	r3, #2
 8003016:	d10c      	bne.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301a:	2bc0      	cmp	r3, #192	@ 0xc0
 800301c:	d109      	bne.n	8003032 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800301e:	4b57      	ldr	r3, [pc, #348]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	08db      	lsrs	r3, r3, #3
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	4a55      	ldr	r2, [pc, #340]	@ (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003030:	e020      	b.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8003032:	4b52      	ldr	r3, [pc, #328]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800303a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800303e:	d106      	bne.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003046:	d102      	bne.n	800304e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8003048:	4b4e      	ldr	r3, [pc, #312]	@ (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800304a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304c:	e012      	b.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800304e:	4b4b      	ldr	r3, [pc, #300]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	d107      	bne.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003062:	d103      	bne.n	800306c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8003064:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800306a:	e003      	b.n	8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003070:	f000 bccf 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003074:	f000 bccd 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003078:	4b40      	ldr	r3, [pc, #256]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800307a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800307e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8003082:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d104      	bne.n	8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800308a:	f7ff faa3 	bl	80025d4 <HAL_RCC_GetPCLK3Freq>
 800308e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003090:	f000 bcbf 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8003094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003096:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800309a:	d108      	bne.n	80030ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fc17 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030aa:	f000 bcb2 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80030ae:	4b33      	ldr	r3, [pc, #204]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d10d      	bne.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 80030ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030c0:	d109      	bne.n	80030d6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80030c2:	4b2e      	ldr	r3, [pc, #184]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	08db      	lsrs	r3, r3, #3
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003180 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d4:	e020      	b.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80030d6:	4b29      	ldr	r3, [pc, #164]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030e2:	d106      	bne.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030ea:	d102      	bne.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80030ec:	4b25      	ldr	r3, [pc, #148]	@ (8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f0:	e012      	b.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80030f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d107      	bne.n	8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8003100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003102:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003106:	d103      	bne.n	8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8003108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800310e:	e003      	b.n	8003118 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003114:	f000 bc7d 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003118:	f000 bc7b 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800311c:	4b17      	ldr	r3, [pc, #92]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800311e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	2b00      	cmp	r3, #0
 800312c:	d104      	bne.n	8003138 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800312e:	f7ff fa09 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8003132:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8003134:	f000 bc6d 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d104      	bne.n	8003148 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 800313e:	f7ff f8d5 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 8003142:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8003144:	f000 bc65 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	2b02      	cmp	r3, #2
 800314c:	d108      	bne.n	8003160 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800314e:	f107 030c 	add.w	r3, r7, #12
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fbbe 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800315c:	f000 bc59 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800316c:	d10e      	bne.n	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800316e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003170:	2b03      	cmp	r3, #3
 8003172:	d10b      	bne.n	800318c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8003174:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003178:	e02c      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800317a:	bf00      	nop
 800317c:	44020c00 	.word	0x44020c00
 8003180:	03d09000 	.word	0x03d09000
 8003184:	003d0900 	.word	0x003d0900
 8003188:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800318c:	4b95      	ldr	r3, [pc, #596]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d10c      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8003198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319a:	2b04      	cmp	r3, #4
 800319c:	d109      	bne.n	80031b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800319e:	4b91      	ldr	r3, [pc, #580]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	08db      	lsrs	r3, r3, #3
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	4a8f      	ldr	r2, [pc, #572]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031b0:	e010      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80031b2:	4b8c      	ldr	r3, [pc, #560]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031be:	d105      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d102      	bne.n	80031cc <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 80031c6:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031ca:	e003      	b.n	80031d4 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031d0:	f000 bc1f 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80031d4:	f000 bc1d 	b.w	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80031d8:	4b82      	ldr	r3, [pc, #520]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80031da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80031e4:	4b7f      	ldr	r3, [pc, #508]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80031e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d106      	bne.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80031f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d103      	bne.n	8003200 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80031f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031fe:	e011      	b.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8003200:	4b78      	ldr	r3, [pc, #480]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003206:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800320a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800320e:	d106      	bne.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	2b08      	cmp	r3, #8
 8003214:	d103      	bne.n	800321e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8003216:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800321a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800321c:	e002      	b.n	8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8003222:	e3f6      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003224:	e3f5      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003226:	4b6f      	ldr	r3, [pc, #444]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003228:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800322c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003230:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8003232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003238:	f7ff f9a0 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 800323c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800323e:	e3e8      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003246:	d107      	bne.n	8003258 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fb41 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003256:	e3dc      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8003258:	4b62      	ldr	r3, [pc, #392]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b02      	cmp	r3, #2
 8003262:	d10d      	bne.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800326a:	d109      	bne.n	8003280 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800326c:	4b5d      	ldr	r3, [pc, #372]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	4a5c      	ldr	r2, [pc, #368]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800327e:	e010      	b.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8003280:	4b58      	ldr	r3, [pc, #352]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800328c:	d106      	bne.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800328e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003290:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003294:	d102      	bne.n	800329c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8003296:	4b55      	ldr	r3, [pc, #340]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800329a:	e002      	b.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032a0:	e3b7      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80032a2:	e3b6      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80032a4:	4b4f      	ldr	r3, [pc, #316]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80032a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032aa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80032ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80032b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80032b6:	f7ff f961 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 80032ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80032bc:	e3a9      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 80032be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032c4:	d107      	bne.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fb02 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032d4:	e39d      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80032d6:	4b43      	ldr	r3, [pc, #268]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d10d      	bne.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80032e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032e8:	d109      	bne.n	80032fe <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80032ea:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	4a3c      	ldr	r2, [pc, #240]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80032f6:	fa22 f303 	lsr.w	r3, r2, r3
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032fc:	e010      	b.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80032fe:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330a:	d106      	bne.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800330c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003312:	d102      	bne.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8003314:	4b35      	ldr	r3, [pc, #212]	@ (80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003318:	e002      	b.n	8003320 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800331e:	e378      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003320:	e377      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8003322:	4b30      	ldr	r3, [pc, #192]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003324:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003328:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003334:	f7ff f922 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8003338:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800333a:	e36a      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003342:	d107      	bne.n	8003354 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fac3 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003352:	e35e      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8003354:	4b23      	ldr	r3, [pc, #140]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d10d      	bne.n	800337c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8003360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003366:	d109      	bne.n	800337c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003368:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	08db      	lsrs	r3, r3, #3
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	4a1d      	ldr	r2, [pc, #116]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
 8003378:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800337a:	e34a      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003380:	e347      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8003382:	4b18      	ldr	r3, [pc, #96]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8003384:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003388:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800338e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003394:	f7ff f91e 	bl	80025d4 <HAL_RCC_GetPCLK3Freq>
 8003398:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800339a:	e33a      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033a2:	d107      	bne.n	80033b4 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033a4:	f107 030c 	add.w	r3, r7, #12
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fa93 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033b2:	e32e      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d10d      	bne.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c6:	d109      	bne.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80033c8:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	08db      	lsrs	r3, r3, #3
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	4a05      	ldr	r2, [pc, #20]	@ (80033e8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033da:	e31a      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80033e0:	e317      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80033e2:	bf00      	nop
 80033e4:	44020c00 	.word	0x44020c00
 80033e8:	03d09000 	.word	0x03d09000
 80033ec:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80033f0:	4b9b      	ldr	r3, [pc, #620]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80033f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80033f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003402:	d044      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800340a:	d879      	bhi.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003412:	d02d      	beq.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800341a:	d871      	bhi.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003422:	d017      	beq.n	8003454 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800342a:	d869      	bhi.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003438:	d004      	beq.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 800343a:	e061      	b.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800343c:	f7ff f8ca 	bl	80025d4 <HAL_RCC_GetPCLK3Freq>
 8003440:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8003442:	e060      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fa43 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003452:	e058      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003454:	4b82      	ldr	r3, [pc, #520]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d103      	bne.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8003462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003468:	e04d      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800346e:	e04a      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003470:	4b7b      	ldr	r3, [pc, #492]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003472:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003476:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800347a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800347e:	d103      	bne.n	8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8003480:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003484:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003486:	e03e      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800348c:	e03b      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800348e:	4b74      	ldr	r3, [pc, #464]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003494:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800349a:	4b71      	ldr	r3, [pc, #452]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80034ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	4a6b      	ldr	r2, [pc, #428]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034be:	e01e      	b.n	80034fe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80034c0:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034cc:	d106      	bne.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d4:	d102      	bne.n	80034dc <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80034d6:	4b64      	ldr	r3, [pc, #400]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034da:	e010      	b.n	80034fe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80034dc:	4b60      	ldr	r3, [pc, #384]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034e8:	d106      	bne.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034f0:	d102      	bne.n	80034f8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80034f2:	4b5e      	ldr	r3, [pc, #376]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80034f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f6:	e002      	b.n	80034fe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003504:	bf00      	nop
          }
        }
        break;
 8003506:	e284      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003508:	4b55      	ldr	r3, [pc, #340]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800350a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800350e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800351a:	d044      	beq.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003522:	d879      	bhi.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800352a:	d02d      	beq.n	8003588 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003532:	d871      	bhi.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003536:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800353a:	d017      	beq.n	800356c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003542:	d869      	bhi.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800354a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003550:	d004      	beq.n	800355c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8003552:	e061      	b.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8003554:	f7ff f812 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8003558:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800355a:	e060      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff f9b7 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800356a:	e058      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800356c:	4b3c      	ldr	r3, [pc, #240]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800356e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d103      	bne.n	8003582 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800357a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8003580:	e04d      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003586:	e04a      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8003588:	4b35      	ldr	r3, [pc, #212]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800358a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800358e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003596:	d103      	bne.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8003598:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800359e:	e03e      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80035a4:	e03b      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80035a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80035a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035ac:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80035b0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80035b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80035c4:	4b26      	ldr	r3, [pc, #152]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	4a25      	ldr	r2, [pc, #148]	@ (8003664 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80035d0:	fa22 f303 	lsr.w	r3, r2, r3
 80035d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035d6:	e01e      	b.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035d8:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e4:	d106      	bne.n	80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ec:	d102      	bne.n	80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80035ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f2:	e010      	b.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80035f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003600:	d106      	bne.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003608:	d102      	bne.n	8003610 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800360a:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360e:	e002      	b.n	8003616 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003614:	e003      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8003616:	e002      	b.n	800361e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800361c:	bf00      	nop
          }
        }
        break;
 800361e:	e1f8      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8003622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800362a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800362c:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003638:	d105      	bne.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8003640:	4b0a      	ldr	r3, [pc, #40]	@ (800366c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8003642:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8003644:	e1e5      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800364c:	d110      	bne.n	8003670 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800364e:	f107 0318 	add.w	r3, r7, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe ffd4 	bl	8002600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800365c:	e1d9      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800365e:	bf00      	nop
 8003660:	44020c00 	.word	0x44020c00
 8003664:	03d09000 	.word	0x03d09000
 8003668:	003d0900 	.word	0x003d0900
 800366c:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003676:	d107      	bne.n	8003688 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f929 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003686:	e1c4      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800368c:	e1c1      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800368e:	4b9d      	ldr	r3, [pc, #628]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	2b04      	cmp	r3, #4
 800369e:	d859      	bhi.n	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80036a0:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036bd 	.word	0x080036bd
 80036ac:	080036cd 	.word	0x080036cd
 80036b0:	08003755 	.word	0x08003755
 80036b4:	080036dd 	.word	0x080036dd
 80036b8:	080036e3 	.word	0x080036e3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80036bc:	f107 0318 	add.w	r3, r7, #24
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe ff9d 	bl	8002600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80036ca:	e046      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f8ff 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80036da:	e03e      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80036dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80036e0:	e03b      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80036e2:	4b88      	ldr	r3, [pc, #544]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80036e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80036e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80036ec:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80036ee:	4b85      	ldr	r3, [pc, #532]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d10c      	bne.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003700:	4b80      	ldr	r3, [pc, #512]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	08db      	lsrs	r3, r3, #3
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	4a80      	ldr	r2, [pc, #512]	@ (800390c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003712:	e01e      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003714:	4b7b      	ldr	r3, [pc, #492]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003720:	d106      	bne.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003728:	d102      	bne.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800372a:	4b79      	ldr	r3, [pc, #484]	@ (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800372c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800372e:	e010      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003730:	4b74      	ldr	r3, [pc, #464]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800373c:	d106      	bne.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003744:	d102      	bne.n	800374c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003746:	4b73      	ldr	r3, [pc, #460]	@ (8003914 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8003748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800374a:	e002      	b.n	8003752 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003750:	e003      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8003752:	e002      	b.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003758:	bf00      	nop
          }
        }
        break;
 800375a:	e15a      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800375c:	4b69      	ldr	r3, [pc, #420]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800375e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003766:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376a:	2b20      	cmp	r3, #32
 800376c:	d022      	beq.n	80037b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	2b20      	cmp	r3, #32
 8003772:	d858      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003776:	2b18      	cmp	r3, #24
 8003778:	d019      	beq.n	80037ae <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	2b18      	cmp	r3, #24
 800377e:	d852      	bhi.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8003780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	2b08      	cmp	r3, #8
 800378a:	d008      	beq.n	800379e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800378c:	e04b      	b.n	8003826 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe ff34 	bl	8002600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800379c:	e046      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff f896 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80037ac:	e03e      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80037ae:	4b56      	ldr	r3, [pc, #344]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80037b2:	e03b      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80037b4:	4b53      	ldr	r3, [pc, #332]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80037b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80037ba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80037c0:	4b50      	ldr	r3, [pc, #320]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037d2:	4b4c      	ldr	r3, [pc, #304]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	08db      	lsrs	r3, r3, #3
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	4a4b      	ldr	r2, [pc, #300]	@ (800390c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e4:	e01e      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80037e6:	4b47      	ldr	r3, [pc, #284]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f2:	d106      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fa:	d102      	bne.n	8003802 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80037fc:	4b44      	ldr	r3, [pc, #272]	@ (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80037fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003800:	e010      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003802:	4b40      	ldr	r3, [pc, #256]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800380a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800380e:	d106      	bne.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 8003810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003812:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003816:	d102      	bne.n	800381e <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8003818:	4b3e      	ldr	r3, [pc, #248]	@ (8003914 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800381e:	2300      	movs	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8003822:	e003      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8003824:	e002      	b.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800382a:	bf00      	nop
          }
        }
        break;
 800382c:	e0f1      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800382e:	4b35      	ldr	r3, [pc, #212]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003834:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003840:	d023      	beq.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003848:	d858      	bhi.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	2bc0      	cmp	r3, #192	@ 0xc0
 800384e:	d019      	beq.n	8003884 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8003850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003852:	2bc0      	cmp	r3, #192	@ 0xc0
 8003854:	d852      	bhi.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 800385c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d008      	beq.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8003862:	e04b      	b.n	80038fc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003864:	f107 0318 	add.w	r3, r7, #24
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fec9 	bl	8002600 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003872:	e046      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff f82b 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003882:	e03e      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8003884:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8003886:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003888:	e03b      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800388a:	4b1e      	ldr	r3, [pc, #120]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800388c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003890:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003896:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d10c      	bne.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80038a8:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	4a16      	ldr	r2, [pc, #88]	@ (800390c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
 80038b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038ba:	e01e      	b.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c8:	d106      	bne.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d0:	d102      	bne.n	80038d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80038d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80038d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d6:	e010      	b.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038e4:	d106      	bne.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80038ec:	d102      	bne.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80038ee:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	e002      	b.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80038fa:	e002      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8003900:	bf00      	nop
          }
        }
        break;
 8003902:	e086      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003904:	44020c00 	.word	0x44020c00
 8003908:	00bb8000 	.word	0x00bb8000
 800390c:	03d09000 	.word	0x03d09000
 8003910:	003d0900 	.word	0x003d0900
 8003914:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8003918:	4b40      	ldr	r3, [pc, #256]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800391a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800391e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8003924:	4b3d      	ldr	r3, [pc, #244]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003930:	d105      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8003932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8003938:	4b39      	ldr	r3, [pc, #228]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800393a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800393c:	e031      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800393e:	4b37      	ldr	r3, [pc, #220]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394a:	d10a      	bne.n	8003962 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	2b10      	cmp	r3, #16
 8003950:	d107      	bne.n	8003962 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003952:	f107 0318 	add.w	r3, r7, #24
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fe52 	bl	8002600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003960:	e01f      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8003962:	4b2e      	ldr	r3, [pc, #184]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003964:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b02      	cmp	r3, #2
 800396e:	d106      	bne.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	2b20      	cmp	r3, #32
 8003974:	d103      	bne.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8003976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800397a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800397c:	e011      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800397e:	4b27      	ldr	r3, [pc, #156]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8003980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800398c:	d106      	bne.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	2b30      	cmp	r3, #48	@ 0x30
 8003992:	d103      	bne.n	800399c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8003994:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800399a:	e002      	b.n	80039a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80039a0:	e037      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80039a2:	e036      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80039a4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80039a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80039aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039ae:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d107      	bne.n	80039c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039b6:	f107 0318 	add.w	r3, r7, #24
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fe20 	bl	8002600 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80039c4:	e025      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80039c6:	4b15      	ldr	r3, [pc, #84]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d2:	d10a      	bne.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d107      	bne.n	80039ea <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039da:	f107 030c 	add.w	r3, r7, #12
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe ff78 	bl	80028d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e8:	e00f      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80039ea:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f6:	d105      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	2b30      	cmp	r3, #48	@ 0x30
 80039fc:	d102      	bne.n	8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8003a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a02:	e002      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8003a0a:	e002      	b.n	8003a12 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003a10:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8003a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3730      	adds	r7, #48	@ 0x30
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	44020c00 	.word	0x44020c00
 8003a20:	02dc6c00 	.word	0x02dc6c00

08003a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e042      	b.n	8003abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f83b 	bl	8003ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2224      	movs	r2, #36	@ 0x24
 8003a52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa4e 	bl	8003f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f8cd 	bl	8003c14 <UART_SetConfig>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01b      	b.n	8003abc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 facd 	bl	8004054 <UART_CheckIdleState>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	@ 0x28
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	f040 808b 	bne.w	8003c0a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Transmit+0x28>
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e083      	b.n	8003c0c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b0e:	2b80      	cmp	r3, #128	@ 0x80
 8003b10:	d107      	bne.n	8003b22 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b20:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	@ 0x21
 8003b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b32:	f7fd fa1f 	bl	8000f74 <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b50:	d108      	bne.n	8003b64 <HAL_UART_Transmit+0x8c>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d104      	bne.n	8003b64 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e003      	b.n	8003b6c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b6c:	e030      	b.n	8003bd0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2180      	movs	r1, #128	@ 0x80
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fb15 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e03d      	b.n	8003c0c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	3302      	adds	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e007      	b.n	8003bbe <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	781a      	ldrb	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1c8      	bne.n	8003b6e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2200      	movs	r2, #0
 8003be4:	2140      	movs	r1, #64	@ 0x40
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 fade 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e006      	b.n	8003c0c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c18:	b094      	sub	sp, #80	@ 0x50
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	498a      	ldr	r1, [pc, #552]	@ (8003e6c <UART_SetConfig+0x258>)
 8003c44:	4019      	ands	r1, r3
 8003c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	68d9      	ldr	r1, [r3, #12]
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	ea40 0301 	orr.w	r3, r0, r1
 8003c66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b7f      	ldr	r3, [pc, #508]	@ (8003e70 <UART_SetConfig+0x25c>)
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d004      	beq.n	8003c82 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8003c8c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8003c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca0:	f023 000f 	bic.w	r0, r3, #15
 8003ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	ea40 0301 	orr.w	r3, r0, r1
 8003cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b6f      	ldr	r3, [pc, #444]	@ (8003e74 <UART_SetConfig+0x260>)
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d102      	bne.n	8003cc2 <UART_SetConfig+0xae>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc0:	e01a      	b.n	8003cf8 <UART_SetConfig+0xe4>
 8003cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e78 <UART_SetConfig+0x264>)
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d102      	bne.n	8003cd2 <UART_SetConfig+0xbe>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd0:	e012      	b.n	8003cf8 <UART_SetConfig+0xe4>
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	4b69      	ldr	r3, [pc, #420]	@ (8003e7c <UART_SetConfig+0x268>)
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d102      	bne.n	8003ce2 <UART_SetConfig+0xce>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce0:	e00a      	b.n	8003cf8 <UART_SetConfig+0xe4>
 8003ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b62      	ldr	r3, [pc, #392]	@ (8003e70 <UART_SetConfig+0x25c>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d103      	bne.n	8003cf4 <UART_SetConfig+0xe0>
 8003cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cf2:	e001      	b.n	8003cf8 <UART_SetConfig+0xe4>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b5c      	ldr	r3, [pc, #368]	@ (8003e70 <UART_SetConfig+0x25c>)
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d171      	bne.n	8003de6 <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d04:	2200      	movs	r2, #0
 8003d06:	623b      	str	r3, [r7, #32]
 8003d08:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d0e:	f7fe ff4b 	bl	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d12:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80e2 	beq.w	8003ee0 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	4a57      	ldr	r2, [pc, #348]	@ (8003e80 <UART_SetConfig+0x26c>)
 8003d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d26:	461a      	mov	r2, r3
 8003d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d305      	bcc.n	8003d4c <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d903      	bls.n	8003d54 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003d52:	e0c5      	b.n	8003ee0 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d56:	2200      	movs	r2, #0
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	61fa      	str	r2, [r7, #28]
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	4a47      	ldr	r2, [pc, #284]	@ (8003e80 <UART_SetConfig+0x26c>)
 8003d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	617a      	str	r2, [r7, #20]
 8003d6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d76:	f7fc fa8f 	bl	8000298 <__aeabi_uldivmod>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4610      	mov	r0, r2
 8003d80:	4619      	mov	r1, r3
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	020b      	lsls	r3, r1, #8
 8003d8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d90:	0202      	lsls	r2, r0, #8
 8003d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d94:	6849      	ldr	r1, [r1, #4]
 8003d96:	0849      	lsrs	r1, r1, #1
 8003d98:	2000      	movs	r0, #0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	4605      	mov	r5, r0
 8003d9e:	eb12 0804 	adds.w	r8, r2, r4
 8003da2:	eb43 0905 	adc.w	r9, r3, r5
 8003da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003db4:	4640      	mov	r0, r8
 8003db6:	4649      	mov	r1, r9
 8003db8:	f7fc fa6e 	bl	8000298 <__aeabi_uldivmod>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dca:	d308      	bcc.n	8003dde <UART_SetConfig+0x1ca>
 8003dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd2:	d204      	bcs.n	8003dde <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8003dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dda:	60da      	str	r2, [r3, #12]
 8003ddc:	e080      	b.n	8003ee0 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003de4:	e07c      	b.n	8003ee0 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dee:	d149      	bne.n	8003e84 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003df2:	2200      	movs	r2, #0
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dfc:	f7fe fed4 	bl	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e00:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d06b      	beq.n	8003ee0 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e80 <UART_SetConfig+0x26c>)
 8003e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e1a:	005a      	lsls	r2, r3, #1
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	441a      	add	r2, r3
 8003e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e30:	2b0f      	cmp	r3, #15
 8003e32:	d916      	bls.n	8003e62 <UART_SetConfig+0x24e>
 8003e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3a:	d212      	bcs.n	8003e62 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f023 030f 	bic.w	r3, r3, #15
 8003e44:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003e54:	4313      	orrs	r3, r2
 8003e56:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8003e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	e03e      	b.n	8003ee0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8003e68:	e03a      	b.n	8003ee0 <UART_SetConfig+0x2cc>
 8003e6a:	bf00      	nop
 8003e6c:	cfff69f3 	.word	0xcfff69f3
 8003e70:	44002400 	.word	0x44002400
 8003e74:	40013800 	.word	0x40013800
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	40004800 	.word	0x40004800
 8003e80:	08005224 	.word	0x08005224
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e86:	2200      	movs	r2, #0
 8003e88:	469a      	mov	sl, r3
 8003e8a:	4693      	mov	fp, r2
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	4659      	mov	r1, fp
 8003e90:	f7fe fe8a 	bl	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e94:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8003e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d021      	beq.n	8003ee0 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <UART_SetConfig+0x2f8>)
 8003ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	441a      	add	r2, r3
 8003eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d909      	bls.n	8003eda <UART_SetConfig+0x2c6>
 8003ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ecc:	d205      	bcs.n	8003eda <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60da      	str	r2, [r3, #12]
 8003ed8:	e002      	b.n	8003ee0 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	2201      	movs	r2, #1
 8003eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef8:	2200      	movs	r2, #0
 8003efa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003efc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3750      	adds	r7, #80	@ 0x50
 8003f04:	46bd      	mov	sp, r7
 8003f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0a:	bf00      	nop
 8003f0c:	08005224 	.word	0x08005224

08003f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01a      	beq.n	8004026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800400e:	d10a      	bne.n	8004026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b098      	sub	sp, #96	@ 0x60
 8004058:	af02      	add	r7, sp, #8
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004064:	f7fc ff86 	bl	8000f74 <HAL_GetTick>
 8004068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b08      	cmp	r3, #8
 8004076:	d12f      	bne.n	80040d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004080:	2200      	movs	r2, #0
 8004082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f88e 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d022      	beq.n	80040d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e6      	bne.n	8004092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e063      	b.n	80041a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d149      	bne.n	800417a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ee:	2200      	movs	r2, #0
 80040f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f857 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03c      	beq.n	800417a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	623b      	str	r3, [r7, #32]
   return(result);
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800411e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	60fb      	str	r3, [r7, #12]
   return(result);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3308      	adds	r3, #8
 8004150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004152:	61fa      	str	r2, [r7, #28]
 8004154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	69b9      	ldr	r1, [r7, #24]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	617b      	str	r3, [r7, #20]
   return(result);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e5      	bne.n	8004132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e012      	b.n	80041a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3758      	adds	r7, #88	@ 0x58
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	e04f      	b.n	800425a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d04b      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fc fed7 	bl	8000f74 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e04e      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d037      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0xb2>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b80      	cmp	r3, #128	@ 0x80
 80041ee:	d034      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0xb2>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b40      	cmp	r3, #64	@ 0x40
 80041f4:	d031      	beq.n	800425a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d110      	bne.n	8004226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2208      	movs	r2, #8
 800420a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f838 	bl	8004282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2208      	movs	r2, #8
 8004216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e029      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004234:	d111      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800423e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f81e 	bl	8004282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e00f      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	bf0c      	ite	eq
 800426a:	2301      	moveq	r3, #1
 800426c:	2300      	movne	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	429a      	cmp	r2, r3
 8004276:	d0a0      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b095      	sub	sp, #84	@ 0x54
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800429e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e6      	bne.n	800428a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3308      	adds	r3, #8
 80042c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e3      	bne.n	80042bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d118      	bne.n	800432e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	60bb      	str	r3, [r7, #8]
   return(result);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 0310 	bic.w	r3, r3, #16
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431e:	6979      	ldr	r1, [r7, #20]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	e841 2300 	strex	r3, r2, [r1]
 8004326:	613b      	str	r3, [r7, #16]
   return(result);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e6      	bne.n	80042fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004342:	bf00      	nop
 8004344:	3754      	adds	r7, #84	@ 0x54
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <std>:
 8004350:	2300      	movs	r3, #0
 8004352:	b510      	push	{r4, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	6083      	str	r3, [r0, #8]
 8004358:	8181      	strh	r1, [r0, #12]
 800435a:	4619      	mov	r1, r3
 800435c:	6643      	str	r3, [r0, #100]	@ 0x64
 800435e:	81c2      	strh	r2, [r0, #14]
 8004360:	2208      	movs	r2, #8
 8004362:	6183      	str	r3, [r0, #24]
 8004364:	e9c0 3300 	strd	r3, r3, [r0]
 8004368:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800436c:	305c      	adds	r0, #92	@ 0x5c
 800436e:	f000 f906 	bl	800457e <memset>
 8004372:	4b0d      	ldr	r3, [pc, #52]	@ (80043a8 <std+0x58>)
 8004374:	6224      	str	r4, [r4, #32]
 8004376:	6263      	str	r3, [r4, #36]	@ 0x24
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <std+0x5c>)
 800437a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800437c:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <std+0x60>)
 800437e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <std+0x64>)
 8004382:	6323      	str	r3, [r4, #48]	@ 0x30
 8004384:	4b0c      	ldr	r3, [pc, #48]	@ (80043b8 <std+0x68>)
 8004386:	429c      	cmp	r4, r3
 8004388:	d006      	beq.n	8004398 <std+0x48>
 800438a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800438e:	4294      	cmp	r4, r2
 8004390:	d002      	beq.n	8004398 <std+0x48>
 8004392:	33d0      	adds	r3, #208	@ 0xd0
 8004394:	429c      	cmp	r4, r3
 8004396:	d105      	bne.n	80043a4 <std+0x54>
 8004398:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800439c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a0:	f000 b966 	b.w	8004670 <__retarget_lock_init_recursive>
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	080044f9 	.word	0x080044f9
 80043ac:	0800451b 	.word	0x0800451b
 80043b0:	08004553 	.word	0x08004553
 80043b4:	08004577 	.word	0x08004577
 80043b8:	20000158 	.word	0x20000158

080043bc <stdio_exit_handler>:
 80043bc:	4a02      	ldr	r2, [pc, #8]	@ (80043c8 <stdio_exit_handler+0xc>)
 80043be:	4903      	ldr	r1, [pc, #12]	@ (80043cc <stdio_exit_handler+0x10>)
 80043c0:	4803      	ldr	r0, [pc, #12]	@ (80043d0 <stdio_exit_handler+0x14>)
 80043c2:	f000 b869 	b.w	8004498 <_fwalk_sglue>
 80043c6:	bf00      	nop
 80043c8:	20000020 	.word	0x20000020
 80043cc:	08004f19 	.word	0x08004f19
 80043d0:	20000030 	.word	0x20000030

080043d4 <cleanup_stdio>:
 80043d4:	6841      	ldr	r1, [r0, #4]
 80043d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004408 <cleanup_stdio+0x34>)
 80043d8:	4299      	cmp	r1, r3
 80043da:	b510      	push	{r4, lr}
 80043dc:	4604      	mov	r4, r0
 80043de:	d001      	beq.n	80043e4 <cleanup_stdio+0x10>
 80043e0:	f000 fd9a 	bl	8004f18 <_fflush_r>
 80043e4:	68a1      	ldr	r1, [r4, #8]
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <cleanup_stdio+0x38>)
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d002      	beq.n	80043f2 <cleanup_stdio+0x1e>
 80043ec:	4620      	mov	r0, r4
 80043ee:	f000 fd93 	bl	8004f18 <_fflush_r>
 80043f2:	68e1      	ldr	r1, [r4, #12]
 80043f4:	4b06      	ldr	r3, [pc, #24]	@ (8004410 <cleanup_stdio+0x3c>)
 80043f6:	4299      	cmp	r1, r3
 80043f8:	d004      	beq.n	8004404 <cleanup_stdio+0x30>
 80043fa:	4620      	mov	r0, r4
 80043fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004400:	f000 bd8a 	b.w	8004f18 <_fflush_r>
 8004404:	bd10      	pop	{r4, pc}
 8004406:	bf00      	nop
 8004408:	20000158 	.word	0x20000158
 800440c:	200001c0 	.word	0x200001c0
 8004410:	20000228 	.word	0x20000228

08004414 <global_stdio_init.part.0>:
 8004414:	b510      	push	{r4, lr}
 8004416:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <global_stdio_init.part.0+0x30>)
 8004418:	2104      	movs	r1, #4
 800441a:	4c0b      	ldr	r4, [pc, #44]	@ (8004448 <global_stdio_init.part.0+0x34>)
 800441c:	4a0b      	ldr	r2, [pc, #44]	@ (800444c <global_stdio_init.part.0+0x38>)
 800441e:	4620      	mov	r0, r4
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	f7ff ff94 	bl	8004350 <std>
 8004428:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800442c:	2201      	movs	r2, #1
 800442e:	2109      	movs	r1, #9
 8004430:	f7ff ff8e 	bl	8004350 <std>
 8004434:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004438:	2202      	movs	r2, #2
 800443a:	2112      	movs	r1, #18
 800443c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004440:	f7ff bf86 	b.w	8004350 <std>
 8004444:	20000290 	.word	0x20000290
 8004448:	20000158 	.word	0x20000158
 800444c:	080043bd 	.word	0x080043bd

08004450 <__sfp_lock_acquire>:
 8004450:	4801      	ldr	r0, [pc, #4]	@ (8004458 <__sfp_lock_acquire+0x8>)
 8004452:	f000 b90e 	b.w	8004672 <__retarget_lock_acquire_recursive>
 8004456:	bf00      	nop
 8004458:	20000299 	.word	0x20000299

0800445c <__sfp_lock_release>:
 800445c:	4801      	ldr	r0, [pc, #4]	@ (8004464 <__sfp_lock_release+0x8>)
 800445e:	f000 b909 	b.w	8004674 <__retarget_lock_release_recursive>
 8004462:	bf00      	nop
 8004464:	20000299 	.word	0x20000299

08004468 <__sinit>:
 8004468:	b510      	push	{r4, lr}
 800446a:	4604      	mov	r4, r0
 800446c:	f7ff fff0 	bl	8004450 <__sfp_lock_acquire>
 8004470:	6a23      	ldr	r3, [r4, #32]
 8004472:	b11b      	cbz	r3, 800447c <__sinit+0x14>
 8004474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004478:	f7ff bff0 	b.w	800445c <__sfp_lock_release>
 800447c:	4b04      	ldr	r3, [pc, #16]	@ (8004490 <__sinit+0x28>)
 800447e:	6223      	str	r3, [r4, #32]
 8004480:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <__sinit+0x2c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f5      	bne.n	8004474 <__sinit+0xc>
 8004488:	f7ff ffc4 	bl	8004414 <global_stdio_init.part.0>
 800448c:	e7f2      	b.n	8004474 <__sinit+0xc>
 800448e:	bf00      	nop
 8004490:	080043d5 	.word	0x080043d5
 8004494:	20000290 	.word	0x20000290

08004498 <_fwalk_sglue>:
 8004498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800449c:	4607      	mov	r7, r0
 800449e:	4688      	mov	r8, r1
 80044a0:	4614      	mov	r4, r2
 80044a2:	2600      	movs	r6, #0
 80044a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044a8:	f1b9 0901 	subs.w	r9, r9, #1
 80044ac:	d505      	bpl.n	80044ba <_fwalk_sglue+0x22>
 80044ae:	6824      	ldr	r4, [r4, #0]
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	d1f7      	bne.n	80044a4 <_fwalk_sglue+0xc>
 80044b4:	4630      	mov	r0, r6
 80044b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ba:	89ab      	ldrh	r3, [r5, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d907      	bls.n	80044d0 <_fwalk_sglue+0x38>
 80044c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044c4:	3301      	adds	r3, #1
 80044c6:	d003      	beq.n	80044d0 <_fwalk_sglue+0x38>
 80044c8:	4629      	mov	r1, r5
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	4306      	orrs	r6, r0
 80044d0:	3568      	adds	r5, #104	@ 0x68
 80044d2:	e7e9      	b.n	80044a8 <_fwalk_sglue+0x10>

080044d4 <iprintf>:
 80044d4:	b40f      	push	{r0, r1, r2, r3}
 80044d6:	b507      	push	{r0, r1, r2, lr}
 80044d8:	4906      	ldr	r1, [pc, #24]	@ (80044f4 <iprintf+0x20>)
 80044da:	ab04      	add	r3, sp, #16
 80044dc:	6808      	ldr	r0, [r1, #0]
 80044de:	f853 2b04 	ldr.w	r2, [r3], #4
 80044e2:	6881      	ldr	r1, [r0, #8]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	f000 f9e9 	bl	80048bc <_vfiprintf_r>
 80044ea:	b003      	add	sp, #12
 80044ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f0:	b004      	add	sp, #16
 80044f2:	4770      	bx	lr
 80044f4:	2000002c 	.word	0x2000002c

080044f8 <__sread>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	f000 f868 	bl	80045d4 <_read_r>
 8004504:	2800      	cmp	r0, #0
 8004506:	bfab      	itete	ge
 8004508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800450a:	89a3      	ldrhlt	r3, [r4, #12]
 800450c:	181b      	addge	r3, r3, r0
 800450e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004512:	bfac      	ite	ge
 8004514:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004516:	81a3      	strhlt	r3, [r4, #12]
 8004518:	bd10      	pop	{r4, pc}

0800451a <__swrite>:
 800451a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	461f      	mov	r7, r3
 8004520:	898b      	ldrh	r3, [r1, #12]
 8004522:	4605      	mov	r5, r0
 8004524:	460c      	mov	r4, r1
 8004526:	05db      	lsls	r3, r3, #23
 8004528:	4616      	mov	r6, r2
 800452a:	d505      	bpl.n	8004538 <__swrite+0x1e>
 800452c:	2302      	movs	r3, #2
 800452e:	2200      	movs	r2, #0
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	f000 f83c 	bl	80045b0 <_lseek_r>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	4632      	mov	r2, r6
 800453c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004540:	4628      	mov	r0, r5
 8004542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	463b      	mov	r3, r7
 800454a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454e:	f000 b853 	b.w	80045f8 <_write_r>

08004552 <__sseek>:
 8004552:	b510      	push	{r4, lr}
 8004554:	460c      	mov	r4, r1
 8004556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455a:	f000 f829 	bl	80045b0 <_lseek_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	bf15      	itete	ne
 8004564:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004566:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800456a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800456e:	81a3      	strheq	r3, [r4, #12]
 8004570:	bf18      	it	ne
 8004572:	81a3      	strhne	r3, [r4, #12]
 8004574:	bd10      	pop	{r4, pc}

08004576 <__sclose>:
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	f000 b809 	b.w	8004590 <_close_r>

0800457e <memset>:
 800457e:	4402      	add	r2, r0
 8004580:	4603      	mov	r3, r0
 8004582:	4293      	cmp	r3, r2
 8004584:	d100      	bne.n	8004588 <memset+0xa>
 8004586:	4770      	bx	lr
 8004588:	f803 1b01 	strb.w	r1, [r3], #1
 800458c:	e7f9      	b.n	8004582 <memset+0x4>
	...

08004590 <_close_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	2300      	movs	r3, #0
 8004594:	4d05      	ldr	r5, [pc, #20]	@ (80045ac <_close_r+0x1c>)
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	f7fc f946 	bl	800082c <_close>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_close_r+0x1a>
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_close_r+0x1a>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	20000294 	.word	0x20000294

080045b0 <_lseek_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4604      	mov	r4, r0
 80045b4:	4d06      	ldr	r5, [pc, #24]	@ (80045d0 <_lseek_r+0x20>)
 80045b6:	4608      	mov	r0, r1
 80045b8:	4611      	mov	r1, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	602a      	str	r2, [r5, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f7fc f95b 	bl	800087a <_lseek>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_lseek_r+0x1e>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_lseek_r+0x1e>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	20000294 	.word	0x20000294

080045d4 <_read_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	4d06      	ldr	r5, [pc, #24]	@ (80045f4 <_read_r+0x20>)
 80045da:	4608      	mov	r0, r1
 80045dc:	4611      	mov	r1, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	602a      	str	r2, [r5, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f7fc f8e9 	bl	80007ba <_read>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d102      	bne.n	80045f2 <_read_r+0x1e>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b103      	cbz	r3, 80045f2 <_read_r+0x1e>
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	20000294 	.word	0x20000294

080045f8 <_write_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4604      	mov	r4, r0
 80045fc:	4d06      	ldr	r5, [pc, #24]	@ (8004618 <_write_r+0x20>)
 80045fe:	4608      	mov	r0, r1
 8004600:	4611      	mov	r1, r2
 8004602:	2200      	movs	r2, #0
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	f7fc f8f4 	bl	80007f4 <_write>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_write_r+0x1e>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	b103      	cbz	r3, 8004616 <_write_r+0x1e>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	20000294 	.word	0x20000294

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	@ (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000002c 	.word	0x2000002c

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	@ (8004660 <__libc_init_array+0x38>)
 800462c:	2600      	movs	r6, #0
 800462e:	4c0d      	ldr	r4, [pc, #52]	@ (8004664 <__libc_init_array+0x3c>)
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	@ (8004668 <__libc_init_array+0x40>)
 800463a:	2600      	movs	r6, #0
 800463c:	4c0b      	ldr	r4, [pc, #44]	@ (800466c <__libc_init_array+0x44>)
 800463e:	f000 fdc9 	bl	80051d4 <_init>
 8004642:	1b64      	subs	r4, r4, r5
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	3601      	adds	r6, #1
 8004652:	4798      	blx	r3
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	3601      	adds	r6, #1
 800465c:	4798      	blx	r3
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08005278 	.word	0x08005278
 8004664:	08005278 	.word	0x08005278
 8004668:	08005278 	.word	0x08005278
 800466c:	0800527c 	.word	0x0800527c

08004670 <__retarget_lock_init_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_acquire_recursive>:
 8004672:	4770      	bx	lr

08004674 <__retarget_lock_release_recursive>:
 8004674:	4770      	bx	lr
	...

08004678 <_free_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4605      	mov	r5, r0
 800467c:	2900      	cmp	r1, #0
 800467e:	d041      	beq.n	8004704 <_free_r+0x8c>
 8004680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004684:	1f0c      	subs	r4, r1, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	bfb8      	it	lt
 800468a:	18e4      	addlt	r4, r4, r3
 800468c:	f000 f8e0 	bl	8004850 <__malloc_lock>
 8004690:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <_free_r+0x90>)
 8004692:	6813      	ldr	r3, [r2, #0]
 8004694:	b933      	cbnz	r3, 80046a4 <_free_r+0x2c>
 8004696:	6063      	str	r3, [r4, #4]
 8004698:	6014      	str	r4, [r2, #0]
 800469a:	4628      	mov	r0, r5
 800469c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046a0:	f000 b8dc 	b.w	800485c <__malloc_unlock>
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d908      	bls.n	80046ba <_free_r+0x42>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	1821      	adds	r1, r4, r0
 80046ac:	428b      	cmp	r3, r1
 80046ae:	bf01      	itttt	eq
 80046b0:	6819      	ldreq	r1, [r3, #0]
 80046b2:	685b      	ldreq	r3, [r3, #4]
 80046b4:	1809      	addeq	r1, r1, r0
 80046b6:	6021      	streq	r1, [r4, #0]
 80046b8:	e7ed      	b.n	8004696 <_free_r+0x1e>
 80046ba:	461a      	mov	r2, r3
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	b10b      	cbz	r3, 80046c4 <_free_r+0x4c>
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d9fa      	bls.n	80046ba <_free_r+0x42>
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	1850      	adds	r0, r2, r1
 80046c8:	42a0      	cmp	r0, r4
 80046ca:	d10b      	bne.n	80046e4 <_free_r+0x6c>
 80046cc:	6820      	ldr	r0, [r4, #0]
 80046ce:	4401      	add	r1, r0
 80046d0:	1850      	adds	r0, r2, r1
 80046d2:	6011      	str	r1, [r2, #0]
 80046d4:	4283      	cmp	r3, r0
 80046d6:	d1e0      	bne.n	800469a <_free_r+0x22>
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4408      	add	r0, r1
 80046de:	6053      	str	r3, [r2, #4]
 80046e0:	6010      	str	r0, [r2, #0]
 80046e2:	e7da      	b.n	800469a <_free_r+0x22>
 80046e4:	d902      	bls.n	80046ec <_free_r+0x74>
 80046e6:	230c      	movs	r3, #12
 80046e8:	602b      	str	r3, [r5, #0]
 80046ea:	e7d6      	b.n	800469a <_free_r+0x22>
 80046ec:	6820      	ldr	r0, [r4, #0]
 80046ee:	1821      	adds	r1, r4, r0
 80046f0:	428b      	cmp	r3, r1
 80046f2:	bf02      	ittt	eq
 80046f4:	6819      	ldreq	r1, [r3, #0]
 80046f6:	685b      	ldreq	r3, [r3, #4]
 80046f8:	1809      	addeq	r1, r1, r0
 80046fa:	6063      	str	r3, [r4, #4]
 80046fc:	bf08      	it	eq
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	6054      	str	r4, [r2, #4]
 8004702:	e7ca      	b.n	800469a <_free_r+0x22>
 8004704:	bd38      	pop	{r3, r4, r5, pc}
 8004706:	bf00      	nop
 8004708:	200002a0 	.word	0x200002a0

0800470c <sbrk_aligned>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4e0f      	ldr	r6, [pc, #60]	@ (800474c <sbrk_aligned+0x40>)
 8004710:	460c      	mov	r4, r1
 8004712:	4605      	mov	r5, r0
 8004714:	6831      	ldr	r1, [r6, #0]
 8004716:	b911      	cbnz	r1, 800471e <sbrk_aligned+0x12>
 8004718:	f000 fcba 	bl	8005090 <_sbrk_r>
 800471c:	6030      	str	r0, [r6, #0]
 800471e:	4621      	mov	r1, r4
 8004720:	4628      	mov	r0, r5
 8004722:	f000 fcb5 	bl	8005090 <_sbrk_r>
 8004726:	1c43      	adds	r3, r0, #1
 8004728:	d103      	bne.n	8004732 <sbrk_aligned+0x26>
 800472a:	f04f 34ff 	mov.w	r4, #4294967295
 800472e:	4620      	mov	r0, r4
 8004730:	bd70      	pop	{r4, r5, r6, pc}
 8004732:	1cc4      	adds	r4, r0, #3
 8004734:	f024 0403 	bic.w	r4, r4, #3
 8004738:	42a0      	cmp	r0, r4
 800473a:	d0f8      	beq.n	800472e <sbrk_aligned+0x22>
 800473c:	1a21      	subs	r1, r4, r0
 800473e:	4628      	mov	r0, r5
 8004740:	f000 fca6 	bl	8005090 <_sbrk_r>
 8004744:	3001      	adds	r0, #1
 8004746:	d1f2      	bne.n	800472e <sbrk_aligned+0x22>
 8004748:	e7ef      	b.n	800472a <sbrk_aligned+0x1e>
 800474a:	bf00      	nop
 800474c:	2000029c 	.word	0x2000029c

08004750 <_malloc_r>:
 8004750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004754:	1ccd      	adds	r5, r1, #3
 8004756:	4606      	mov	r6, r0
 8004758:	f025 0503 	bic.w	r5, r5, #3
 800475c:	3508      	adds	r5, #8
 800475e:	2d0c      	cmp	r5, #12
 8004760:	bf38      	it	cc
 8004762:	250c      	movcc	r5, #12
 8004764:	2d00      	cmp	r5, #0
 8004766:	db01      	blt.n	800476c <_malloc_r+0x1c>
 8004768:	42a9      	cmp	r1, r5
 800476a:	d904      	bls.n	8004776 <_malloc_r+0x26>
 800476c:	230c      	movs	r3, #12
 800476e:	6033      	str	r3, [r6, #0]
 8004770:	2000      	movs	r0, #0
 8004772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800484c <_malloc_r+0xfc>
 800477a:	f000 f869 	bl	8004850 <__malloc_lock>
 800477e:	f8d8 3000 	ldr.w	r3, [r8]
 8004782:	461c      	mov	r4, r3
 8004784:	bb44      	cbnz	r4, 80047d8 <_malloc_r+0x88>
 8004786:	4629      	mov	r1, r5
 8004788:	4630      	mov	r0, r6
 800478a:	f7ff ffbf 	bl	800470c <sbrk_aligned>
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	4604      	mov	r4, r0
 8004792:	d158      	bne.n	8004846 <_malloc_r+0xf6>
 8004794:	f8d8 4000 	ldr.w	r4, [r8]
 8004798:	4627      	mov	r7, r4
 800479a:	2f00      	cmp	r7, #0
 800479c:	d143      	bne.n	8004826 <_malloc_r+0xd6>
 800479e:	2c00      	cmp	r4, #0
 80047a0:	d04b      	beq.n	800483a <_malloc_r+0xea>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	4639      	mov	r1, r7
 80047a6:	4630      	mov	r0, r6
 80047a8:	eb04 0903 	add.w	r9, r4, r3
 80047ac:	f000 fc70 	bl	8005090 <_sbrk_r>
 80047b0:	4581      	cmp	r9, r0
 80047b2:	d142      	bne.n	800483a <_malloc_r+0xea>
 80047b4:	6821      	ldr	r1, [r4, #0]
 80047b6:	4630      	mov	r0, r6
 80047b8:	1a6d      	subs	r5, r5, r1
 80047ba:	4629      	mov	r1, r5
 80047bc:	f7ff ffa6 	bl	800470c <sbrk_aligned>
 80047c0:	3001      	adds	r0, #1
 80047c2:	d03a      	beq.n	800483a <_malloc_r+0xea>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	442b      	add	r3, r5
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	f8d8 3000 	ldr.w	r3, [r8]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	bb62      	cbnz	r2, 800482c <_malloc_r+0xdc>
 80047d2:	f8c8 7000 	str.w	r7, [r8]
 80047d6:	e00f      	b.n	80047f8 <_malloc_r+0xa8>
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	1b52      	subs	r2, r2, r5
 80047dc:	d420      	bmi.n	8004820 <_malloc_r+0xd0>
 80047de:	2a0b      	cmp	r2, #11
 80047e0:	d917      	bls.n	8004812 <_malloc_r+0xc2>
 80047e2:	1961      	adds	r1, r4, r5
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	6025      	str	r5, [r4, #0]
 80047e8:	bf18      	it	ne
 80047ea:	6059      	strne	r1, [r3, #4]
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	bf08      	it	eq
 80047f0:	f8c8 1000 	streq.w	r1, [r8]
 80047f4:	5162      	str	r2, [r4, r5]
 80047f6:	604b      	str	r3, [r1, #4]
 80047f8:	4630      	mov	r0, r6
 80047fa:	f000 f82f 	bl	800485c <__malloc_unlock>
 80047fe:	f104 000b 	add.w	r0, r4, #11
 8004802:	1d23      	adds	r3, r4, #4
 8004804:	f020 0007 	bic.w	r0, r0, #7
 8004808:	1ac2      	subs	r2, r0, r3
 800480a:	bf1c      	itt	ne
 800480c:	1a1b      	subne	r3, r3, r0
 800480e:	50a3      	strne	r3, [r4, r2]
 8004810:	e7af      	b.n	8004772 <_malloc_r+0x22>
 8004812:	6862      	ldr	r2, [r4, #4]
 8004814:	42a3      	cmp	r3, r4
 8004816:	bf0c      	ite	eq
 8004818:	f8c8 2000 	streq.w	r2, [r8]
 800481c:	605a      	strne	r2, [r3, #4]
 800481e:	e7eb      	b.n	80047f8 <_malloc_r+0xa8>
 8004820:	4623      	mov	r3, r4
 8004822:	6864      	ldr	r4, [r4, #4]
 8004824:	e7ae      	b.n	8004784 <_malloc_r+0x34>
 8004826:	463c      	mov	r4, r7
 8004828:	687f      	ldr	r7, [r7, #4]
 800482a:	e7b6      	b.n	800479a <_malloc_r+0x4a>
 800482c:	461a      	mov	r2, r3
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	42a3      	cmp	r3, r4
 8004832:	d1fb      	bne.n	800482c <_malloc_r+0xdc>
 8004834:	2300      	movs	r3, #0
 8004836:	6053      	str	r3, [r2, #4]
 8004838:	e7de      	b.n	80047f8 <_malloc_r+0xa8>
 800483a:	230c      	movs	r3, #12
 800483c:	4630      	mov	r0, r6
 800483e:	6033      	str	r3, [r6, #0]
 8004840:	f000 f80c 	bl	800485c <__malloc_unlock>
 8004844:	e794      	b.n	8004770 <_malloc_r+0x20>
 8004846:	6005      	str	r5, [r0, #0]
 8004848:	e7d6      	b.n	80047f8 <_malloc_r+0xa8>
 800484a:	bf00      	nop
 800484c:	200002a0 	.word	0x200002a0

08004850 <__malloc_lock>:
 8004850:	4801      	ldr	r0, [pc, #4]	@ (8004858 <__malloc_lock+0x8>)
 8004852:	f7ff bf0e 	b.w	8004672 <__retarget_lock_acquire_recursive>
 8004856:	bf00      	nop
 8004858:	20000298 	.word	0x20000298

0800485c <__malloc_unlock>:
 800485c:	4801      	ldr	r0, [pc, #4]	@ (8004864 <__malloc_unlock+0x8>)
 800485e:	f7ff bf09 	b.w	8004674 <__retarget_lock_release_recursive>
 8004862:	bf00      	nop
 8004864:	20000298 	.word	0x20000298

08004868 <__sfputc_r>:
 8004868:	6893      	ldr	r3, [r2, #8]
 800486a:	3b01      	subs	r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	6093      	str	r3, [r2, #8]
 8004870:	b410      	push	{r4}
 8004872:	da08      	bge.n	8004886 <__sfputc_r+0x1e>
 8004874:	6994      	ldr	r4, [r2, #24]
 8004876:	42a3      	cmp	r3, r4
 8004878:	db01      	blt.n	800487e <__sfputc_r+0x16>
 800487a:	290a      	cmp	r1, #10
 800487c:	d103      	bne.n	8004886 <__sfputc_r+0x1e>
 800487e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004882:	f000 bb71 	b.w	8004f68 <__swbuf_r>
 8004886:	6813      	ldr	r3, [r2, #0]
 8004888:	1c58      	adds	r0, r3, #1
 800488a:	6010      	str	r0, [r2, #0]
 800488c:	4608      	mov	r0, r1
 800488e:	7019      	strb	r1, [r3, #0]
 8004890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004894:	4770      	bx	lr

08004896 <__sfputs_r>:
 8004896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004898:	4606      	mov	r6, r0
 800489a:	460f      	mov	r7, r1
 800489c:	4614      	mov	r4, r2
 800489e:	18d5      	adds	r5, r2, r3
 80048a0:	42ac      	cmp	r4, r5
 80048a2:	d101      	bne.n	80048a8 <__sfputs_r+0x12>
 80048a4:	2000      	movs	r0, #0
 80048a6:	e007      	b.n	80048b8 <__sfputs_r+0x22>
 80048a8:	463a      	mov	r2, r7
 80048aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ffda 	bl	8004868 <__sfputc_r>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d1f3      	bne.n	80048a0 <__sfputs_r+0xa>
 80048b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048bc <_vfiprintf_r>:
 80048bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048c0:	460d      	mov	r5, r1
 80048c2:	b09d      	sub	sp, #116	@ 0x74
 80048c4:	4614      	mov	r4, r2
 80048c6:	4698      	mov	r8, r3
 80048c8:	4606      	mov	r6, r0
 80048ca:	b118      	cbz	r0, 80048d4 <_vfiprintf_r+0x18>
 80048cc:	6a03      	ldr	r3, [r0, #32]
 80048ce:	b90b      	cbnz	r3, 80048d4 <_vfiprintf_r+0x18>
 80048d0:	f7ff fdca 	bl	8004468 <__sinit>
 80048d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048d6:	07d9      	lsls	r1, r3, #31
 80048d8:	d405      	bmi.n	80048e6 <_vfiprintf_r+0x2a>
 80048da:	89ab      	ldrh	r3, [r5, #12]
 80048dc:	059a      	lsls	r2, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_vfiprintf_r+0x2a>
 80048e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048e2:	f7ff fec6 	bl	8004672 <__retarget_lock_acquire_recursive>
 80048e6:	89ab      	ldrh	r3, [r5, #12]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	d501      	bpl.n	80048f0 <_vfiprintf_r+0x34>
 80048ec:	692b      	ldr	r3, [r5, #16]
 80048ee:	b99b      	cbnz	r3, 8004918 <_vfiprintf_r+0x5c>
 80048f0:	4629      	mov	r1, r5
 80048f2:	4630      	mov	r0, r6
 80048f4:	f000 fb76 	bl	8004fe4 <__swsetup_r>
 80048f8:	b170      	cbz	r0, 8004918 <_vfiprintf_r+0x5c>
 80048fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048fc:	07dc      	lsls	r4, r3, #31
 80048fe:	d504      	bpl.n	800490a <_vfiprintf_r+0x4e>
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	b01d      	add	sp, #116	@ 0x74
 8004906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490a:	89ab      	ldrh	r3, [r5, #12]
 800490c:	0598      	lsls	r0, r3, #22
 800490e:	d4f7      	bmi.n	8004900 <_vfiprintf_r+0x44>
 8004910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004912:	f7ff feaf 	bl	8004674 <__retarget_lock_release_recursive>
 8004916:	e7f3      	b.n	8004900 <_vfiprintf_r+0x44>
 8004918:	2300      	movs	r3, #0
 800491a:	f8cd 800c 	str.w	r8, [sp, #12]
 800491e:	f04f 0901 	mov.w	r9, #1
 8004922:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8004ad8 <_vfiprintf_r+0x21c>
 8004926:	9309      	str	r3, [sp, #36]	@ 0x24
 8004928:	2320      	movs	r3, #32
 800492a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800492e:	2330      	movs	r3, #48	@ 0x30
 8004930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004934:	4623      	mov	r3, r4
 8004936:	469a      	mov	sl, r3
 8004938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800493c:	b10a      	cbz	r2, 8004942 <_vfiprintf_r+0x86>
 800493e:	2a25      	cmp	r2, #37	@ 0x25
 8004940:	d1f9      	bne.n	8004936 <_vfiprintf_r+0x7a>
 8004942:	ebba 0b04 	subs.w	fp, sl, r4
 8004946:	d00b      	beq.n	8004960 <_vfiprintf_r+0xa4>
 8004948:	465b      	mov	r3, fp
 800494a:	4622      	mov	r2, r4
 800494c:	4629      	mov	r1, r5
 800494e:	4630      	mov	r0, r6
 8004950:	f7ff ffa1 	bl	8004896 <__sfputs_r>
 8004954:	3001      	adds	r0, #1
 8004956:	f000 80a7 	beq.w	8004aa8 <_vfiprintf_r+0x1ec>
 800495a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800495c:	445a      	add	r2, fp
 800495e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004960:	f89a 3000 	ldrb.w	r3, [sl]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 809f 	beq.w	8004aa8 <_vfiprintf_r+0x1ec>
 800496a:	2300      	movs	r3, #0
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	f10a 0a01 	add.w	sl, sl, #1
 8004974:	9304      	str	r3, [sp, #16]
 8004976:	9307      	str	r3, [sp, #28]
 8004978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800497c:	931a      	str	r3, [sp, #104]	@ 0x68
 800497e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004982:	4654      	mov	r4, sl
 8004984:	2205      	movs	r2, #5
 8004986:	4854      	ldr	r0, [pc, #336]	@ (8004ad8 <_vfiprintf_r+0x21c>)
 8004988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498c:	f000 fb90 	bl	80050b0 <memchr>
 8004990:	9a04      	ldr	r2, [sp, #16]
 8004992:	b9d8      	cbnz	r0, 80049cc <_vfiprintf_r+0x110>
 8004994:	06d1      	lsls	r1, r2, #27
 8004996:	bf44      	itt	mi
 8004998:	2320      	movmi	r3, #32
 800499a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800499e:	0713      	lsls	r3, r2, #28
 80049a0:	bf44      	itt	mi
 80049a2:	232b      	movmi	r3, #43	@ 0x2b
 80049a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049a8:	f89a 3000 	ldrb.w	r3, [sl]
 80049ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ae:	d015      	beq.n	80049dc <_vfiprintf_r+0x120>
 80049b0:	9a07      	ldr	r2, [sp, #28]
 80049b2:	4654      	mov	r4, sl
 80049b4:	2000      	movs	r0, #0
 80049b6:	f04f 0c0a 	mov.w	ip, #10
 80049ba:	4621      	mov	r1, r4
 80049bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c0:	3b30      	subs	r3, #48	@ 0x30
 80049c2:	2b09      	cmp	r3, #9
 80049c4:	d94b      	bls.n	8004a5e <_vfiprintf_r+0x1a2>
 80049c6:	b1b0      	cbz	r0, 80049f6 <_vfiprintf_r+0x13a>
 80049c8:	9207      	str	r2, [sp, #28]
 80049ca:	e014      	b.n	80049f6 <_vfiprintf_r+0x13a>
 80049cc:	eba0 0308 	sub.w	r3, r0, r8
 80049d0:	46a2      	mov	sl, r4
 80049d2:	fa09 f303 	lsl.w	r3, r9, r3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	9304      	str	r3, [sp, #16]
 80049da:	e7d2      	b.n	8004982 <_vfiprintf_r+0xc6>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	1d19      	adds	r1, r3, #4
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	9103      	str	r1, [sp, #12]
 80049e6:	bfbb      	ittet	lt
 80049e8:	425b      	neglt	r3, r3
 80049ea:	f042 0202 	orrlt.w	r2, r2, #2
 80049ee:	9307      	strge	r3, [sp, #28]
 80049f0:	9307      	strlt	r3, [sp, #28]
 80049f2:	bfb8      	it	lt
 80049f4:	9204      	strlt	r2, [sp, #16]
 80049f6:	7823      	ldrb	r3, [r4, #0]
 80049f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80049fa:	d10a      	bne.n	8004a12 <_vfiprintf_r+0x156>
 80049fc:	7863      	ldrb	r3, [r4, #1]
 80049fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a00:	d132      	bne.n	8004a68 <_vfiprintf_r+0x1ac>
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	3402      	adds	r4, #2
 8004a06:	1d1a      	adds	r2, r3, #4
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a0e:	9203      	str	r2, [sp, #12]
 8004a10:	9305      	str	r3, [sp, #20]
 8004a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004ae8 <_vfiprintf_r+0x22c>
 8004a16:	2203      	movs	r2, #3
 8004a18:	7821      	ldrb	r1, [r4, #0]
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	f000 fb48 	bl	80050b0 <memchr>
 8004a20:	b138      	cbz	r0, 8004a32 <_vfiprintf_r+0x176>
 8004a22:	eba0 000a 	sub.w	r0, r0, sl
 8004a26:	2240      	movs	r2, #64	@ 0x40
 8004a28:	9b04      	ldr	r3, [sp, #16]
 8004a2a:	3401      	adds	r4, #1
 8004a2c:	4082      	lsls	r2, r0
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a36:	2206      	movs	r2, #6
 8004a38:	4828      	ldr	r0, [pc, #160]	@ (8004adc <_vfiprintf_r+0x220>)
 8004a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a3e:	f000 fb37 	bl	80050b0 <memchr>
 8004a42:	2800      	cmp	r0, #0
 8004a44:	d03f      	beq.n	8004ac6 <_vfiprintf_r+0x20a>
 8004a46:	4b26      	ldr	r3, [pc, #152]	@ (8004ae0 <_vfiprintf_r+0x224>)
 8004a48:	bb1b      	cbnz	r3, 8004a92 <_vfiprintf_r+0x1d6>
 8004a4a:	9b03      	ldr	r3, [sp, #12]
 8004a4c:	3307      	adds	r3, #7
 8004a4e:	f023 0307 	bic.w	r3, r3, #7
 8004a52:	3308      	adds	r3, #8
 8004a54:	9303      	str	r3, [sp, #12]
 8004a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a58:	443b      	add	r3, r7
 8004a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5c:	e76a      	b.n	8004934 <_vfiprintf_r+0x78>
 8004a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a62:	460c      	mov	r4, r1
 8004a64:	2001      	movs	r0, #1
 8004a66:	e7a8      	b.n	80049ba <_vfiprintf_r+0xfe>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	3401      	adds	r4, #1
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4619      	mov	r1, r3
 8004a72:	9305      	str	r3, [sp, #20]
 8004a74:	4620      	mov	r0, r4
 8004a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a7a:	3a30      	subs	r2, #48	@ 0x30
 8004a7c:	2a09      	cmp	r2, #9
 8004a7e:	d903      	bls.n	8004a88 <_vfiprintf_r+0x1cc>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0c6      	beq.n	8004a12 <_vfiprintf_r+0x156>
 8004a84:	9105      	str	r1, [sp, #20]
 8004a86:	e7c4      	b.n	8004a12 <_vfiprintf_r+0x156>
 8004a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7f0      	b.n	8004a74 <_vfiprintf_r+0x1b8>
 8004a92:	ab03      	add	r3, sp, #12
 8004a94:	462a      	mov	r2, r5
 8004a96:	a904      	add	r1, sp, #16
 8004a98:	4630      	mov	r0, r6
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ae4 <_vfiprintf_r+0x228>)
 8004a9e:	f3af 8000 	nop.w
 8004aa2:	4607      	mov	r7, r0
 8004aa4:	1c78      	adds	r0, r7, #1
 8004aa6:	d1d6      	bne.n	8004a56 <_vfiprintf_r+0x19a>
 8004aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aaa:	07d9      	lsls	r1, r3, #31
 8004aac:	d405      	bmi.n	8004aba <_vfiprintf_r+0x1fe>
 8004aae:	89ab      	ldrh	r3, [r5, #12]
 8004ab0:	059a      	lsls	r2, r3, #22
 8004ab2:	d402      	bmi.n	8004aba <_vfiprintf_r+0x1fe>
 8004ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ab6:	f7ff fddd 	bl	8004674 <__retarget_lock_release_recursive>
 8004aba:	89ab      	ldrh	r3, [r5, #12]
 8004abc:	065b      	lsls	r3, r3, #25
 8004abe:	f53f af1f 	bmi.w	8004900 <_vfiprintf_r+0x44>
 8004ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ac4:	e71e      	b.n	8004904 <_vfiprintf_r+0x48>
 8004ac6:	ab03      	add	r3, sp, #12
 8004ac8:	462a      	mov	r2, r5
 8004aca:	a904      	add	r1, sp, #16
 8004acc:	4630      	mov	r0, r6
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	4b04      	ldr	r3, [pc, #16]	@ (8004ae4 <_vfiprintf_r+0x228>)
 8004ad2:	f000 f87d 	bl	8004bd0 <_printf_i>
 8004ad6:	e7e4      	b.n	8004aa2 <_vfiprintf_r+0x1e6>
 8004ad8:	0800523c 	.word	0x0800523c
 8004adc:	08005246 	.word	0x08005246
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	08004897 	.word	0x08004897
 8004ae8:	08005242 	.word	0x08005242

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4616      	mov	r6, r2
 8004af2:	4698      	mov	r8, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	4607      	mov	r7, r0
 8004af8:	690b      	ldr	r3, [r1, #16]
 8004afa:	460c      	mov	r4, r1
 8004afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	bfb8      	it	lt
 8004b04:	4613      	movlt	r3, r2
 8004b06:	6033      	str	r3, [r6, #0]
 8004b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b0c:	b10a      	cbz	r2, 8004b12 <_printf_common+0x26>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	6833      	ldrmi	r3, [r6, #0]
 8004b1a:	3302      	addmi	r3, #2
 8004b1c:	6033      	strmi	r3, [r6, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	f015 0506 	ands.w	r5, r5, #6
 8004b24:	d106      	bne.n	8004b34 <_printf_common+0x48>
 8004b26:	f104 0a19 	add.w	sl, r4, #25
 8004b2a:	68e3      	ldr	r3, [r4, #12]
 8004b2c:	6832      	ldr	r2, [r6, #0]
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	42ab      	cmp	r3, r5
 8004b32:	dc2b      	bgt.n	8004b8c <_printf_common+0xa0>
 8004b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	3b00      	subs	r3, #0
 8004b3c:	bf18      	it	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	0692      	lsls	r2, r2, #26
 8004b42:	d430      	bmi.n	8004ba6 <_printf_common+0xba>
 8004b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b48:	4641      	mov	r1, r8
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c8      	blx	r9
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d023      	beq.n	8004b9a <_printf_common+0xae>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	341a      	adds	r4, #26
 8004b56:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8004b5a:	f003 0306 	and.w	r3, r3, #6
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf0a      	itet	eq
 8004b62:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8004b66:	2500      	movne	r5, #0
 8004b68:	6833      	ldreq	r3, [r6, #0]
 8004b6a:	f04f 0600 	mov.w	r6, #0
 8004b6e:	bf08      	it	eq
 8004b70:	1aed      	subeq	r5, r5, r3
 8004b72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b76:	bf08      	it	eq
 8004b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bfc4      	itt	gt
 8004b80:	1a9b      	subgt	r3, r3, r2
 8004b82:	18ed      	addgt	r5, r5, r3
 8004b84:	42b5      	cmp	r5, r6
 8004b86:	d11a      	bne.n	8004bbe <_printf_common+0xd2>
 8004b88:	2000      	movs	r0, #0
 8004b8a:	e008      	b.n	8004b9e <_printf_common+0xb2>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4652      	mov	r2, sl
 8004b90:	4641      	mov	r1, r8
 8004b92:	4638      	mov	r0, r7
 8004b94:	47c8      	blx	r9
 8004b96:	3001      	adds	r0, #1
 8004b98:	d103      	bne.n	8004ba2 <_printf_common+0xb6>
 8004b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	e7c1      	b.n	8004b2a <_printf_common+0x3e>
 8004ba6:	18e1      	adds	r1, r4, r3
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	2030      	movs	r0, #48	@ 0x30
 8004bac:	3302      	adds	r3, #2
 8004bae:	4422      	add	r2, r4
 8004bb0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bbc:	e7c2      	b.n	8004b44 <_printf_common+0x58>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	47c8      	blx	r9
 8004bc8:	3001      	adds	r0, #1
 8004bca:	d0e6      	beq.n	8004b9a <_printf_common+0xae>
 8004bcc:	3601      	adds	r6, #1
 8004bce:	e7d9      	b.n	8004b84 <_printf_common+0x98>

08004bd0 <_printf_i>:
 8004bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd4:	7e0f      	ldrb	r7, [r1, #24]
 8004bd6:	4691      	mov	r9, r2
 8004bd8:	4680      	mov	r8, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	2f78      	cmp	r7, #120	@ 0x78
 8004bde:	469a      	mov	sl, r3
 8004be0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004be6:	d807      	bhi.n	8004bf8 <_printf_i+0x28>
 8004be8:	2f62      	cmp	r7, #98	@ 0x62
 8004bea:	d80a      	bhi.n	8004c02 <_printf_i+0x32>
 8004bec:	2f00      	cmp	r7, #0
 8004bee:	f000 80d2 	beq.w	8004d96 <_printf_i+0x1c6>
 8004bf2:	2f58      	cmp	r7, #88	@ 0x58
 8004bf4:	f000 80b9 	beq.w	8004d6a <_printf_i+0x19a>
 8004bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c00:	e03a      	b.n	8004c78 <_printf_i+0xa8>
 8004c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c06:	2b15      	cmp	r3, #21
 8004c08:	d8f6      	bhi.n	8004bf8 <_printf_i+0x28>
 8004c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c10 <_printf_i+0x40>)
 8004c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c10:	08004c69 	.word	0x08004c69
 8004c14:	08004c7d 	.word	0x08004c7d
 8004c18:	08004bf9 	.word	0x08004bf9
 8004c1c:	08004bf9 	.word	0x08004bf9
 8004c20:	08004bf9 	.word	0x08004bf9
 8004c24:	08004bf9 	.word	0x08004bf9
 8004c28:	08004c7d 	.word	0x08004c7d
 8004c2c:	08004bf9 	.word	0x08004bf9
 8004c30:	08004bf9 	.word	0x08004bf9
 8004c34:	08004bf9 	.word	0x08004bf9
 8004c38:	08004bf9 	.word	0x08004bf9
 8004c3c:	08004d7d 	.word	0x08004d7d
 8004c40:	08004ca7 	.word	0x08004ca7
 8004c44:	08004d37 	.word	0x08004d37
 8004c48:	08004bf9 	.word	0x08004bf9
 8004c4c:	08004bf9 	.word	0x08004bf9
 8004c50:	08004d9f 	.word	0x08004d9f
 8004c54:	08004bf9 	.word	0x08004bf9
 8004c58:	08004ca7 	.word	0x08004ca7
 8004c5c:	08004bf9 	.word	0x08004bf9
 8004c60:	08004bf9 	.word	0x08004bf9
 8004c64:	08004d3f 	.word	0x08004d3f
 8004c68:	6833      	ldr	r3, [r6, #0]
 8004c6a:	1d1a      	adds	r2, r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6032      	str	r2, [r6, #0]
 8004c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e09d      	b.n	8004db8 <_printf_i+0x1e8>
 8004c7c:	6833      	ldr	r3, [r6, #0]
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	1d19      	adds	r1, r3, #4
 8004c82:	6031      	str	r1, [r6, #0]
 8004c84:	0606      	lsls	r6, r0, #24
 8004c86:	d501      	bpl.n	8004c8c <_printf_i+0xbc>
 8004c88:	681d      	ldr	r5, [r3, #0]
 8004c8a:	e003      	b.n	8004c94 <_printf_i+0xc4>
 8004c8c:	0645      	lsls	r5, r0, #25
 8004c8e:	d5fb      	bpl.n	8004c88 <_printf_i+0xb8>
 8004c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c94:	2d00      	cmp	r5, #0
 8004c96:	da03      	bge.n	8004ca0 <_printf_i+0xd0>
 8004c98:	232d      	movs	r3, #45	@ 0x2d
 8004c9a:	426d      	negs	r5, r5
 8004c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca0:	4859      	ldr	r0, [pc, #356]	@ (8004e08 <_printf_i+0x238>)
 8004ca2:	230a      	movs	r3, #10
 8004ca4:	e011      	b.n	8004cca <_printf_i+0xfa>
 8004ca6:	6821      	ldr	r1, [r4, #0]
 8004ca8:	6833      	ldr	r3, [r6, #0]
 8004caa:	0608      	lsls	r0, r1, #24
 8004cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cb0:	d402      	bmi.n	8004cb8 <_printf_i+0xe8>
 8004cb2:	0649      	lsls	r1, r1, #25
 8004cb4:	bf48      	it	mi
 8004cb6:	b2ad      	uxthmi	r5, r5
 8004cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cba:	6033      	str	r3, [r6, #0]
 8004cbc:	4852      	ldr	r0, [pc, #328]	@ (8004e08 <_printf_i+0x238>)
 8004cbe:	bf14      	ite	ne
 8004cc0:	230a      	movne	r3, #10
 8004cc2:	2308      	moveq	r3, #8
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cca:	6866      	ldr	r6, [r4, #4]
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	60a6      	str	r6, [r4, #8]
 8004cd0:	bfa2      	ittt	ge
 8004cd2:	6821      	ldrge	r1, [r4, #0]
 8004cd4:	f021 0104 	bicge.w	r1, r1, #4
 8004cd8:	6021      	strge	r1, [r4, #0]
 8004cda:	b90d      	cbnz	r5, 8004ce0 <_printf_i+0x110>
 8004cdc:	2e00      	cmp	r6, #0
 8004cde:	d04b      	beq.n	8004d78 <_printf_i+0x1a8>
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8004cea:	5dc7      	ldrb	r7, [r0, r7]
 8004cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cf0:	462f      	mov	r7, r5
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	42bb      	cmp	r3, r7
 8004cf6:	d9f4      	bls.n	8004ce2 <_printf_i+0x112>
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d10b      	bne.n	8004d14 <_printf_i+0x144>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	07df      	lsls	r7, r3, #31
 8004d00:	d508      	bpl.n	8004d14 <_printf_i+0x144>
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	6861      	ldr	r1, [r4, #4]
 8004d06:	4299      	cmp	r1, r3
 8004d08:	bfde      	ittt	le
 8004d0a:	2330      	movle	r3, #48	@ 0x30
 8004d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d14:	1b92      	subs	r2, r2, r6
 8004d16:	6122      	str	r2, [r4, #16]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	aa03      	add	r2, sp, #12
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f8cd a000 	str.w	sl, [sp]
 8004d24:	f7ff fee2 	bl	8004aec <_printf_common>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d14a      	bne.n	8004dc2 <_printf_i+0x1f2>
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d30:	b004      	add	sp, #16
 8004d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	f043 0320 	orr.w	r3, r3, #32
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	2778      	movs	r7, #120	@ 0x78
 8004d40:	4832      	ldr	r0, [pc, #200]	@ (8004e0c <_printf_i+0x23c>)
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d48:	061f      	lsls	r7, r3, #24
 8004d4a:	6831      	ldr	r1, [r6, #0]
 8004d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d50:	d402      	bmi.n	8004d58 <_printf_i+0x188>
 8004d52:	065f      	lsls	r7, r3, #25
 8004d54:	bf48      	it	mi
 8004d56:	b2ad      	uxthmi	r5, r5
 8004d58:	6031      	str	r1, [r6, #0]
 8004d5a:	07d9      	lsls	r1, r3, #31
 8004d5c:	bf44      	itt	mi
 8004d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004d62:	6023      	strmi	r3, [r4, #0]
 8004d64:	b11d      	cbz	r5, 8004d6e <_printf_i+0x19e>
 8004d66:	2310      	movs	r3, #16
 8004d68:	e7ac      	b.n	8004cc4 <_printf_i+0xf4>
 8004d6a:	4827      	ldr	r0, [pc, #156]	@ (8004e08 <_printf_i+0x238>)
 8004d6c:	e7e9      	b.n	8004d42 <_printf_i+0x172>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	f023 0320 	bic.w	r3, r3, #32
 8004d74:	6023      	str	r3, [r4, #0]
 8004d76:	e7f6      	b.n	8004d66 <_printf_i+0x196>
 8004d78:	4616      	mov	r6, r2
 8004d7a:	e7bd      	b.n	8004cf8 <_printf_i+0x128>
 8004d7c:	6833      	ldr	r3, [r6, #0]
 8004d7e:	6825      	ldr	r5, [r4, #0]
 8004d80:	1d18      	adds	r0, r3, #4
 8004d82:	6961      	ldr	r1, [r4, #20]
 8004d84:	6030      	str	r0, [r6, #0]
 8004d86:	062e      	lsls	r6, r5, #24
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	d501      	bpl.n	8004d90 <_printf_i+0x1c0>
 8004d8c:	6019      	str	r1, [r3, #0]
 8004d8e:	e002      	b.n	8004d96 <_printf_i+0x1c6>
 8004d90:	0668      	lsls	r0, r5, #25
 8004d92:	d5fb      	bpl.n	8004d8c <_printf_i+0x1bc>
 8004d94:	8019      	strh	r1, [r3, #0]
 8004d96:	2300      	movs	r3, #0
 8004d98:	4616      	mov	r6, r2
 8004d9a:	6123      	str	r3, [r4, #16]
 8004d9c:	e7bc      	b.n	8004d18 <_printf_i+0x148>
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	2100      	movs	r1, #0
 8004da2:	1d1a      	adds	r2, r3, #4
 8004da4:	6032      	str	r2, [r6, #0]
 8004da6:	681e      	ldr	r6, [r3, #0]
 8004da8:	6862      	ldr	r2, [r4, #4]
 8004daa:	4630      	mov	r0, r6
 8004dac:	f000 f980 	bl	80050b0 <memchr>
 8004db0:	b108      	cbz	r0, 8004db6 <_printf_i+0x1e6>
 8004db2:	1b80      	subs	r0, r0, r6
 8004db4:	6060      	str	r0, [r4, #4]
 8004db6:	6863      	ldr	r3, [r4, #4]
 8004db8:	6123      	str	r3, [r4, #16]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc0:	e7aa      	b.n	8004d18 <_printf_i+0x148>
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	4640      	mov	r0, r8
 8004dca:	47d0      	blx	sl
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d0ad      	beq.n	8004d2c <_printf_i+0x15c>
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	079b      	lsls	r3, r3, #30
 8004dd4:	d413      	bmi.n	8004dfe <_printf_i+0x22e>
 8004dd6:	68e0      	ldr	r0, [r4, #12]
 8004dd8:	9b03      	ldr	r3, [sp, #12]
 8004dda:	4298      	cmp	r0, r3
 8004ddc:	bfb8      	it	lt
 8004dde:	4618      	movlt	r0, r3
 8004de0:	e7a6      	b.n	8004d30 <_printf_i+0x160>
 8004de2:	2301      	movs	r3, #1
 8004de4:	4632      	mov	r2, r6
 8004de6:	4649      	mov	r1, r9
 8004de8:	4640      	mov	r0, r8
 8004dea:	47d0      	blx	sl
 8004dec:	3001      	adds	r0, #1
 8004dee:	d09d      	beq.n	8004d2c <_printf_i+0x15c>
 8004df0:	3501      	adds	r5, #1
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	9903      	ldr	r1, [sp, #12]
 8004df6:	1a5b      	subs	r3, r3, r1
 8004df8:	42ab      	cmp	r3, r5
 8004dfa:	dcf2      	bgt.n	8004de2 <_printf_i+0x212>
 8004dfc:	e7eb      	b.n	8004dd6 <_printf_i+0x206>
 8004dfe:	2500      	movs	r5, #0
 8004e00:	f104 0619 	add.w	r6, r4, #25
 8004e04:	e7f5      	b.n	8004df2 <_printf_i+0x222>
 8004e06:	bf00      	nop
 8004e08:	0800524d 	.word	0x0800524d
 8004e0c:	0800525e 	.word	0x0800525e

08004e10 <__sflush_r>:
 8004e10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e18:	0716      	lsls	r6, r2, #28
 8004e1a:	4605      	mov	r5, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	d454      	bmi.n	8004eca <__sflush_r+0xba>
 8004e20:	684b      	ldr	r3, [r1, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	dc02      	bgt.n	8004e2c <__sflush_r+0x1c>
 8004e26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dd48      	ble.n	8004ebe <__sflush_r+0xae>
 8004e2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e2e:	2e00      	cmp	r6, #0
 8004e30:	d045      	beq.n	8004ebe <__sflush_r+0xae>
 8004e32:	2300      	movs	r3, #0
 8004e34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e38:	682f      	ldr	r7, [r5, #0]
 8004e3a:	6a21      	ldr	r1, [r4, #32]
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	d030      	beq.n	8004ea2 <__sflush_r+0x92>
 8004e40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	0759      	lsls	r1, r3, #29
 8004e46:	d505      	bpl.n	8004e54 <__sflush_r+0x44>
 8004e48:	6863      	ldr	r3, [r4, #4]
 8004e4a:	1ad2      	subs	r2, r2, r3
 8004e4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e4e:	b10b      	cbz	r3, 8004e54 <__sflush_r+0x44>
 8004e50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e52:	1ad2      	subs	r2, r2, r3
 8004e54:	2300      	movs	r3, #0
 8004e56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e58:	6a21      	ldr	r1, [r4, #32]
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b0      	blx	r6
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	d106      	bne.n	8004e72 <__sflush_r+0x62>
 8004e64:	6829      	ldr	r1, [r5, #0]
 8004e66:	291d      	cmp	r1, #29
 8004e68:	d82b      	bhi.n	8004ec2 <__sflush_r+0xb2>
 8004e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004f14 <__sflush_r+0x104>)
 8004e6c:	410a      	asrs	r2, r1
 8004e6e:	07d6      	lsls	r6, r2, #31
 8004e70:	d427      	bmi.n	8004ec2 <__sflush_r+0xb2>
 8004e72:	2200      	movs	r2, #0
 8004e74:	04d9      	lsls	r1, r3, #19
 8004e76:	6062      	str	r2, [r4, #4]
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	d504      	bpl.n	8004e88 <__sflush_r+0x78>
 8004e7e:	1c42      	adds	r2, r0, #1
 8004e80:	d101      	bne.n	8004e86 <__sflush_r+0x76>
 8004e82:	682b      	ldr	r3, [r5, #0]
 8004e84:	b903      	cbnz	r3, 8004e88 <__sflush_r+0x78>
 8004e86:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e8a:	602f      	str	r7, [r5, #0]
 8004e8c:	b1b9      	cbz	r1, 8004ebe <__sflush_r+0xae>
 8004e8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e92:	4299      	cmp	r1, r3
 8004e94:	d002      	beq.n	8004e9c <__sflush_r+0x8c>
 8004e96:	4628      	mov	r0, r5
 8004e98:	f7ff fbee 	bl	8004678 <_free_r>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ea0:	e00d      	b.n	8004ebe <__sflush_r+0xae>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b0      	blx	r6
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	1c50      	adds	r0, r2, #1
 8004eac:	d1c9      	bne.n	8004e42 <__sflush_r+0x32>
 8004eae:	682b      	ldr	r3, [r5, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0c6      	beq.n	8004e42 <__sflush_r+0x32>
 8004eb4:	2b1d      	cmp	r3, #29
 8004eb6:	d001      	beq.n	8004ebc <__sflush_r+0xac>
 8004eb8:	2b16      	cmp	r3, #22
 8004eba:	d11d      	bne.n	8004ef8 <__sflush_r+0xe8>
 8004ebc:	602f      	str	r7, [r5, #0]
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	e021      	b.n	8004f06 <__sflush_r+0xf6>
 8004ec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec6:	b21b      	sxth	r3, r3
 8004ec8:	e01a      	b.n	8004f00 <__sflush_r+0xf0>
 8004eca:	690f      	ldr	r7, [r1, #16]
 8004ecc:	2f00      	cmp	r7, #0
 8004ece:	d0f6      	beq.n	8004ebe <__sflush_r+0xae>
 8004ed0:	0793      	lsls	r3, r2, #30
 8004ed2:	680e      	ldr	r6, [r1, #0]
 8004ed4:	600f      	str	r7, [r1, #0]
 8004ed6:	bf0c      	ite	eq
 8004ed8:	694b      	ldreq	r3, [r1, #20]
 8004eda:	2300      	movne	r3, #0
 8004edc:	eba6 0807 	sub.w	r8, r6, r7
 8004ee0:	608b      	str	r3, [r1, #8]
 8004ee2:	f1b8 0f00 	cmp.w	r8, #0
 8004ee6:	ddea      	ble.n	8004ebe <__sflush_r+0xae>
 8004ee8:	4643      	mov	r3, r8
 8004eea:	463a      	mov	r2, r7
 8004eec:	6a21      	ldr	r1, [r4, #32]
 8004eee:	4628      	mov	r0, r5
 8004ef0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004ef2:	47b0      	blx	r6
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	dc08      	bgt.n	8004f0a <__sflush_r+0xfa>
 8004ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0a:	4407      	add	r7, r0
 8004f0c:	eba8 0800 	sub.w	r8, r8, r0
 8004f10:	e7e7      	b.n	8004ee2 <__sflush_r+0xd2>
 8004f12:	bf00      	nop
 8004f14:	dfbffffe 	.word	0xdfbffffe

08004f18 <_fflush_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	690b      	ldr	r3, [r1, #16]
 8004f1c:	4605      	mov	r5, r0
 8004f1e:	460c      	mov	r4, r1
 8004f20:	b913      	cbnz	r3, 8004f28 <_fflush_r+0x10>
 8004f22:	2500      	movs	r5, #0
 8004f24:	4628      	mov	r0, r5
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	b118      	cbz	r0, 8004f32 <_fflush_r+0x1a>
 8004f2a:	6a03      	ldr	r3, [r0, #32]
 8004f2c:	b90b      	cbnz	r3, 8004f32 <_fflush_r+0x1a>
 8004f2e:	f7ff fa9b 	bl	8004468 <__sinit>
 8004f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f3      	beq.n	8004f22 <_fflush_r+0xa>
 8004f3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f3c:	07d0      	lsls	r0, r2, #31
 8004f3e:	d404      	bmi.n	8004f4a <_fflush_r+0x32>
 8004f40:	0599      	lsls	r1, r3, #22
 8004f42:	d402      	bmi.n	8004f4a <_fflush_r+0x32>
 8004f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f46:	f7ff fb94 	bl	8004672 <__retarget_lock_acquire_recursive>
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	f7ff ff5f 	bl	8004e10 <__sflush_r>
 8004f52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f54:	4605      	mov	r5, r0
 8004f56:	07da      	lsls	r2, r3, #31
 8004f58:	d4e4      	bmi.n	8004f24 <_fflush_r+0xc>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	059b      	lsls	r3, r3, #22
 8004f5e:	d4e1      	bmi.n	8004f24 <_fflush_r+0xc>
 8004f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f62:	f7ff fb87 	bl	8004674 <__retarget_lock_release_recursive>
 8004f66:	e7dd      	b.n	8004f24 <_fflush_r+0xc>

08004f68 <__swbuf_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	4605      	mov	r5, r0
 8004f70:	b118      	cbz	r0, 8004f7a <__swbuf_r+0x12>
 8004f72:	6a03      	ldr	r3, [r0, #32]
 8004f74:	b90b      	cbnz	r3, 8004f7a <__swbuf_r+0x12>
 8004f76:	f7ff fa77 	bl	8004468 <__sinit>
 8004f7a:	69a3      	ldr	r3, [r4, #24]
 8004f7c:	60a3      	str	r3, [r4, #8]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	071a      	lsls	r2, r3, #28
 8004f82:	d501      	bpl.n	8004f88 <__swbuf_r+0x20>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	b943      	cbnz	r3, 8004f9a <__swbuf_r+0x32>
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 f82a 	bl	8004fe4 <__swsetup_r>
 8004f90:	b118      	cbz	r0, 8004f9a <__swbuf_r+0x32>
 8004f92:	f04f 37ff 	mov.w	r7, #4294967295
 8004f96:	4638      	mov	r0, r7
 8004f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	b2f6      	uxtb	r6, r6
 8004f9e:	6922      	ldr	r2, [r4, #16]
 8004fa0:	4637      	mov	r7, r6
 8004fa2:	1a98      	subs	r0, r3, r2
 8004fa4:	6963      	ldr	r3, [r4, #20]
 8004fa6:	4283      	cmp	r3, r0
 8004fa8:	dc05      	bgt.n	8004fb6 <__swbuf_r+0x4e>
 8004faa:	4621      	mov	r1, r4
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7ff ffb3 	bl	8004f18 <_fflush_r>
 8004fb2:	2800      	cmp	r0, #0
 8004fb4:	d1ed      	bne.n	8004f92 <__swbuf_r+0x2a>
 8004fb6:	68a3      	ldr	r3, [r4, #8]
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	60a3      	str	r3, [r4, #8]
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	6022      	str	r2, [r4, #0]
 8004fc2:	701e      	strb	r6, [r3, #0]
 8004fc4:	1c43      	adds	r3, r0, #1
 8004fc6:	6962      	ldr	r2, [r4, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d004      	beq.n	8004fd6 <__swbuf_r+0x6e>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	07db      	lsls	r3, r3, #31
 8004fd0:	d5e1      	bpl.n	8004f96 <__swbuf_r+0x2e>
 8004fd2:	2e0a      	cmp	r6, #10
 8004fd4:	d1df      	bne.n	8004f96 <__swbuf_r+0x2e>
 8004fd6:	4621      	mov	r1, r4
 8004fd8:	4628      	mov	r0, r5
 8004fda:	f7ff ff9d 	bl	8004f18 <_fflush_r>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d0d9      	beq.n	8004f96 <__swbuf_r+0x2e>
 8004fe2:	e7d6      	b.n	8004f92 <__swbuf_r+0x2a>

08004fe4 <__swsetup_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4b29      	ldr	r3, [pc, #164]	@ (800508c <__swsetup_r+0xa8>)
 8004fe8:	4605      	mov	r5, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	b118      	cbz	r0, 8004ff8 <__swsetup_r+0x14>
 8004ff0:	6a03      	ldr	r3, [r0, #32]
 8004ff2:	b90b      	cbnz	r3, 8004ff8 <__swsetup_r+0x14>
 8004ff4:	f7ff fa38 	bl	8004468 <__sinit>
 8004ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ffc:	0719      	lsls	r1, r3, #28
 8004ffe:	d422      	bmi.n	8005046 <__swsetup_r+0x62>
 8005000:	06da      	lsls	r2, r3, #27
 8005002:	d407      	bmi.n	8005014 <__swsetup_r+0x30>
 8005004:	2209      	movs	r2, #9
 8005006:	602a      	str	r2, [r5, #0]
 8005008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	81a3      	strh	r3, [r4, #12]
 8005012:	e033      	b.n	800507c <__swsetup_r+0x98>
 8005014:	0758      	lsls	r0, r3, #29
 8005016:	d512      	bpl.n	800503e <__swsetup_r+0x5a>
 8005018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800501a:	b141      	cbz	r1, 800502e <__swsetup_r+0x4a>
 800501c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005020:	4299      	cmp	r1, r3
 8005022:	d002      	beq.n	800502a <__swsetup_r+0x46>
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff fb27 	bl	8004678 <_free_r>
 800502a:	2300      	movs	r3, #0
 800502c:	6363      	str	r3, [r4, #52]	@ 0x34
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	2300      	movs	r3, #0
 8005038:	6063      	str	r3, [r4, #4]
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	f043 0308 	orr.w	r3, r3, #8
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	6923      	ldr	r3, [r4, #16]
 8005048:	b94b      	cbnz	r3, 800505e <__swsetup_r+0x7a>
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005054:	d003      	beq.n	800505e <__swsetup_r+0x7a>
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 f85c 	bl	8005116 <__smakebuf_r>
 800505e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005062:	f013 0201 	ands.w	r2, r3, #1
 8005066:	d00a      	beq.n	800507e <__swsetup_r+0x9a>
 8005068:	2200      	movs	r2, #0
 800506a:	60a2      	str	r2, [r4, #8]
 800506c:	6962      	ldr	r2, [r4, #20]
 800506e:	4252      	negs	r2, r2
 8005070:	61a2      	str	r2, [r4, #24]
 8005072:	6922      	ldr	r2, [r4, #16]
 8005074:	b942      	cbnz	r2, 8005088 <__swsetup_r+0xa4>
 8005076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800507a:	d1c5      	bne.n	8005008 <__swsetup_r+0x24>
 800507c:	bd38      	pop	{r3, r4, r5, pc}
 800507e:	0799      	lsls	r1, r3, #30
 8005080:	bf58      	it	pl
 8005082:	6962      	ldrpl	r2, [r4, #20]
 8005084:	60a2      	str	r2, [r4, #8]
 8005086:	e7f4      	b.n	8005072 <__swsetup_r+0x8e>
 8005088:	2000      	movs	r0, #0
 800508a:	e7f7      	b.n	800507c <__swsetup_r+0x98>
 800508c:	2000002c 	.word	0x2000002c

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	2300      	movs	r3, #0
 8005094:	4d05      	ldr	r5, [pc, #20]	@ (80050ac <_sbrk_r+0x1c>)
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fb fbfa 	bl	8000894 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000294 	.word	0x20000294

080050b0 <memchr>:
 80050b0:	b2c9      	uxtb	r1, r1
 80050b2:	4603      	mov	r3, r0
 80050b4:	4402      	add	r2, r0
 80050b6:	b510      	push	{r4, lr}
 80050b8:	4293      	cmp	r3, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	d101      	bne.n	80050c2 <memchr+0x12>
 80050be:	2000      	movs	r0, #0
 80050c0:	e003      	b.n	80050ca <memchr+0x1a>
 80050c2:	7804      	ldrb	r4, [r0, #0]
 80050c4:	3301      	adds	r3, #1
 80050c6:	428c      	cmp	r4, r1
 80050c8:	d1f6      	bne.n	80050b8 <memchr+0x8>
 80050ca:	bd10      	pop	{r4, pc}

080050cc <__swhatbuf_r>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	460c      	mov	r4, r1
 80050d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d4:	b096      	sub	sp, #88	@ 0x58
 80050d6:	4615      	mov	r5, r2
 80050d8:	2900      	cmp	r1, #0
 80050da:	461e      	mov	r6, r3
 80050dc:	da0c      	bge.n	80050f8 <__swhatbuf_r+0x2c>
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	2100      	movs	r1, #0
 80050e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80050e6:	bf14      	ite	ne
 80050e8:	2340      	movne	r3, #64	@ 0x40
 80050ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80050ee:	2000      	movs	r0, #0
 80050f0:	6031      	str	r1, [r6, #0]
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	b016      	add	sp, #88	@ 0x58
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	466a      	mov	r2, sp
 80050fa:	f000 f849 	bl	8005190 <_fstat_r>
 80050fe:	2800      	cmp	r0, #0
 8005100:	dbed      	blt.n	80050de <__swhatbuf_r+0x12>
 8005102:	9901      	ldr	r1, [sp, #4]
 8005104:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005108:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800510c:	4259      	negs	r1, r3
 800510e:	4159      	adcs	r1, r3
 8005110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005114:	e7eb      	b.n	80050ee <__swhatbuf_r+0x22>

08005116 <__smakebuf_r>:
 8005116:	898b      	ldrh	r3, [r1, #12]
 8005118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800511a:	079d      	lsls	r5, r3, #30
 800511c:	4606      	mov	r6, r0
 800511e:	460c      	mov	r4, r1
 8005120:	d507      	bpl.n	8005132 <__smakebuf_r+0x1c>
 8005122:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	2301      	movs	r3, #1
 800512c:	6163      	str	r3, [r4, #20]
 800512e:	b003      	add	sp, #12
 8005130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005132:	ab01      	add	r3, sp, #4
 8005134:	466a      	mov	r2, sp
 8005136:	f7ff ffc9 	bl	80050cc <__swhatbuf_r>
 800513a:	9f00      	ldr	r7, [sp, #0]
 800513c:	4605      	mov	r5, r0
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7ff fb05 	bl	8004750 <_malloc_r>
 8005146:	b948      	cbnz	r0, 800515c <__smakebuf_r+0x46>
 8005148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800514c:	059a      	lsls	r2, r3, #22
 800514e:	d4ee      	bmi.n	800512e <__smakebuf_r+0x18>
 8005150:	f023 0303 	bic.w	r3, r3, #3
 8005154:	f043 0302 	orr.w	r3, r3, #2
 8005158:	81a3      	strh	r3, [r4, #12]
 800515a:	e7e2      	b.n	8005122 <__smakebuf_r+0xc>
 800515c:	89a3      	ldrh	r3, [r4, #12]
 800515e:	6020      	str	r0, [r4, #0]
 8005160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	9b01      	ldr	r3, [sp, #4]
 8005168:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800516c:	b15b      	cbz	r3, 8005186 <__smakebuf_r+0x70>
 800516e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005172:	4630      	mov	r0, r6
 8005174:	f000 f81e 	bl	80051b4 <_isatty_r>
 8005178:	b128      	cbz	r0, 8005186 <__smakebuf_r+0x70>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f023 0303 	bic.w	r3, r3, #3
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	431d      	orrs	r5, r3
 800518a:	81a5      	strh	r5, [r4, #12]
 800518c:	e7cf      	b.n	800512e <__smakebuf_r+0x18>
	...

08005190 <_fstat_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	2300      	movs	r3, #0
 8005194:	4d06      	ldr	r5, [pc, #24]	@ (80051b0 <_fstat_r+0x20>)
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	4611      	mov	r1, r2
 800519c:	602b      	str	r3, [r5, #0]
 800519e:	f7fb fb51 	bl	8000844 <_fstat>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	d102      	bne.n	80051ac <_fstat_r+0x1c>
 80051a6:	682b      	ldr	r3, [r5, #0]
 80051a8:	b103      	cbz	r3, 80051ac <_fstat_r+0x1c>
 80051aa:	6023      	str	r3, [r4, #0]
 80051ac:	bd38      	pop	{r3, r4, r5, pc}
 80051ae:	bf00      	nop
 80051b0:	20000294 	.word	0x20000294

080051b4 <_isatty_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	2300      	movs	r3, #0
 80051b8:	4d05      	ldr	r5, [pc, #20]	@ (80051d0 <_isatty_r+0x1c>)
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	f7fb fb50 	bl	8000864 <_isatty>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_isatty_r+0x1a>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_isatty_r+0x1a>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	20000294 	.word	0x20000294

080051d4 <_init>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	bf00      	nop
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr

080051e0 <_fini>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	bf00      	nop
 80051e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e6:	bc08      	pop	{r3}
 80051e8:	469e      	mov	lr, r3
 80051ea:	4770      	bx	lr
